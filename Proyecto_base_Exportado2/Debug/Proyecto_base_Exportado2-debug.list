
Proyecto_base_Exportado2-debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006540  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000628  200000c0  08006548  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000724  200006e8  08006b70  000206e8  2**3
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000206e8  2**0
                  CONTENTS, READONLY
  5 .comment      0000007c  00000000  00000000  00020710  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004a92b  00000000  00000000  0002078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00009ce7  00000000  00000000  0006b0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001222e  00000000  00000000  00074d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001a20  00000000  00000000  00086fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001d90  00000000  00000000  000889f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e354  00000000  00000000  0008a780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000d337  00000000  00000000  00098ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004d48  00000000  00000000  000a5e0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 40 00 20 01 26 00 08 55 26 00 08 55 26 00 08     .@. .&..U&..U&..
	...
 800002c:	55 26 00 08 00 00 00 00 00 00 00 00 55 26 00 08     U&..........U&..
 800003c:	55 26 00 08 55 26 00 08 00 00 00 00 55 26 00 08     U&..U&......U&..
 800004c:	55 26 00 08 55 26 00 08 55 26 00 08 55 26 00 08     U&..U&..U&..U&..
 800005c:	55 26 00 08 00 00 00 00 55 26 00 08 55 26 00 08     U&......U&..U&..
 800006c:	55 26 00 08 55 26 00 08 55 26 00 08 55 26 00 08     U&..U&..U&..U&..
 800007c:	00 00 00 00 55 26 00 08 55 26 00 08 55 26 00 08     ....U&..U&..U&..
 800008c:	55 26 00 08 55 26 00 08 55 26 00 08 55 26 00 08     U&..U&..U&..U&..
 800009c:	55 26 00 08 55 26 00 08 55 26 00 08 55 26 00 08     U&..U&..U&..U&..
 80000ac:	55 26 00 08 55 26 00 08 55 26 00 08 00 00 00 00     U&..U&..U&......
 80000bc:	55 26 00 08                                         U&..

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200006e8 	.word	0x200006e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005e94 	.word	0x08005e94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200006ec 	.word	0x200006ec
 8000104:	08005e94 	.word	0x08005e94

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f830 	bl	80002d8 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	0415      	lsls	r5, r2, #16
 800028c:	0c2d      	lsrs	r5, r5, #16
 800028e:	002e      	movs	r6, r5
 8000290:	b580      	push	{r7, lr}
 8000292:	0407      	lsls	r7, r0, #16
 8000294:	0c14      	lsrs	r4, r2, #16
 8000296:	0c3f      	lsrs	r7, r7, #16
 8000298:	4699      	mov	r9, r3
 800029a:	0c03      	lsrs	r3, r0, #16
 800029c:	437e      	muls	r6, r7
 800029e:	435d      	muls	r5, r3
 80002a0:	4367      	muls	r7, r4
 80002a2:	4363      	muls	r3, r4
 80002a4:	197f      	adds	r7, r7, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	19e4      	adds	r4, r4, r7
 80002aa:	469c      	mov	ip, r3
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	025b      	lsls	r3, r3, #9
 80002b4:	4698      	mov	r8, r3
 80002b6:	44c4      	add	ip, r8
 80002b8:	464b      	mov	r3, r9
 80002ba:	4351      	muls	r1, r2
 80002bc:	4343      	muls	r3, r0
 80002be:	0436      	lsls	r6, r6, #16
 80002c0:	0c36      	lsrs	r6, r6, #16
 80002c2:	0c25      	lsrs	r5, r4, #16
 80002c4:	0424      	lsls	r4, r4, #16
 80002c6:	4465      	add	r5, ip
 80002c8:	19a4      	adds	r4, r4, r6
 80002ca:	1859      	adds	r1, r3, r1
 80002cc:	1949      	adds	r1, r1, r5
 80002ce:	0020      	movs	r0, r4
 80002d0:	bc0c      	pop	{r2, r3}
 80002d2:	4690      	mov	r8, r2
 80002d4:	4699      	mov	r9, r3
 80002d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d8 <__udivmoddi4>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	4657      	mov	r7, sl
 80002dc:	464e      	mov	r6, r9
 80002de:	4645      	mov	r5, r8
 80002e0:	46de      	mov	lr, fp
 80002e2:	b5e0      	push	{r5, r6, r7, lr}
 80002e4:	0004      	movs	r4, r0
 80002e6:	b083      	sub	sp, #12
 80002e8:	000d      	movs	r5, r1
 80002ea:	4692      	mov	sl, r2
 80002ec:	4699      	mov	r9, r3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d82f      	bhi.n	8000352 <__udivmoddi4+0x7a>
 80002f2:	d02c      	beq.n	800034e <__udivmoddi4+0x76>
 80002f4:	4649      	mov	r1, r9
 80002f6:	4650      	mov	r0, sl
 80002f8:	f000 fa52 	bl	80007a0 <__clzdi2>
 80002fc:	0029      	movs	r1, r5
 80002fe:	0006      	movs	r6, r0
 8000300:	0020      	movs	r0, r4
 8000302:	f000 fa4d 	bl	80007a0 <__clzdi2>
 8000306:	1a33      	subs	r3, r6, r0
 8000308:	4698      	mov	r8, r3
 800030a:	3b20      	subs	r3, #32
 800030c:	469b      	mov	fp, r3
 800030e:	d500      	bpl.n	8000312 <__udivmoddi4+0x3a>
 8000310:	e074      	b.n	80003fc <__udivmoddi4+0x124>
 8000312:	4653      	mov	r3, sl
 8000314:	465a      	mov	r2, fp
 8000316:	4093      	lsls	r3, r2
 8000318:	001f      	movs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4642      	mov	r2, r8
 800031e:	4093      	lsls	r3, r2
 8000320:	001e      	movs	r6, r3
 8000322:	42af      	cmp	r7, r5
 8000324:	d829      	bhi.n	800037a <__udivmoddi4+0xa2>
 8000326:	d026      	beq.n	8000376 <__udivmoddi4+0x9e>
 8000328:	465b      	mov	r3, fp
 800032a:	1ba4      	subs	r4, r4, r6
 800032c:	41bd      	sbcs	r5, r7
 800032e:	2b00      	cmp	r3, #0
 8000330:	da00      	bge.n	8000334 <__udivmoddi4+0x5c>
 8000332:	e079      	b.n	8000428 <__udivmoddi4+0x150>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	2301      	movs	r3, #1
 800033e:	465a      	mov	r2, fp
 8000340:	4093      	lsls	r3, r2
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	2301      	movs	r3, #1
 8000346:	4642      	mov	r2, r8
 8000348:	4093      	lsls	r3, r2
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	e019      	b.n	8000382 <__udivmoddi4+0xaa>
 800034e:	4282      	cmp	r2, r0
 8000350:	d9d0      	bls.n	80002f4 <__udivmoddi4+0x1c>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <__udivmoddi4+0x8c>
 8000360:	601c      	str	r4, [r3, #0]
 8000362:	605d      	str	r5, [r3, #4]
 8000364:	9800      	ldr	r0, [sp, #0]
 8000366:	9901      	ldr	r1, [sp, #4]
 8000368:	b003      	add	sp, #12
 800036a:	bc3c      	pop	{r2, r3, r4, r5}
 800036c:	4690      	mov	r8, r2
 800036e:	4699      	mov	r9, r3
 8000370:	46a2      	mov	sl, r4
 8000372:	46ab      	mov	fp, r5
 8000374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000376:	42a3      	cmp	r3, r4
 8000378:	d9d6      	bls.n	8000328 <__udivmoddi4+0x50>
 800037a:	2200      	movs	r2, #0
 800037c:	2300      	movs	r3, #0
 800037e:	9200      	str	r2, [sp, #0]
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	4643      	mov	r3, r8
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0e8      	beq.n	800035a <__udivmoddi4+0x82>
 8000388:	07fb      	lsls	r3, r7, #31
 800038a:	0872      	lsrs	r2, r6, #1
 800038c:	431a      	orrs	r2, r3
 800038e:	4646      	mov	r6, r8
 8000390:	087b      	lsrs	r3, r7, #1
 8000392:	e00e      	b.n	80003b2 <__udivmoddi4+0xda>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d101      	bne.n	800039c <__udivmoddi4+0xc4>
 8000398:	42a2      	cmp	r2, r4
 800039a:	d80c      	bhi.n	80003b6 <__udivmoddi4+0xde>
 800039c:	1aa4      	subs	r4, r4, r2
 800039e:	419d      	sbcs	r5, r3
 80003a0:	2001      	movs	r0, #1
 80003a2:	1924      	adds	r4, r4, r4
 80003a4:	416d      	adcs	r5, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	3e01      	subs	r6, #1
 80003aa:	1824      	adds	r4, r4, r0
 80003ac:	414d      	adcs	r5, r1
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d006      	beq.n	80003c0 <__udivmoddi4+0xe8>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d9ee      	bls.n	8000394 <__udivmoddi4+0xbc>
 80003b6:	3e01      	subs	r6, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2e00      	cmp	r6, #0
 80003be:	d1f8      	bne.n	80003b2 <__udivmoddi4+0xda>
 80003c0:	465b      	mov	r3, fp
 80003c2:	9800      	ldr	r0, [sp, #0]
 80003c4:	9901      	ldr	r1, [sp, #4]
 80003c6:	1900      	adds	r0, r0, r4
 80003c8:	4169      	adcs	r1, r5
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	db22      	blt.n	8000414 <__udivmoddi4+0x13c>
 80003ce:	002b      	movs	r3, r5
 80003d0:	465a      	mov	r2, fp
 80003d2:	40d3      	lsrs	r3, r2
 80003d4:	002a      	movs	r2, r5
 80003d6:	4644      	mov	r4, r8
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db2c      	blt.n	800043e <__udivmoddi4+0x166>
 80003e4:	0026      	movs	r6, r4
 80003e6:	409e      	lsls	r6, r3
 80003e8:	0033      	movs	r3, r6
 80003ea:	0026      	movs	r6, r4
 80003ec:	4647      	mov	r7, r8
 80003ee:	40be      	lsls	r6, r7
 80003f0:	0032      	movs	r2, r6
 80003f2:	1a80      	subs	r0, r0, r2
 80003f4:	4199      	sbcs	r1, r3
 80003f6:	9000      	str	r0, [sp, #0]
 80003f8:	9101      	str	r1, [sp, #4]
 80003fa:	e7ae      	b.n	800035a <__udivmoddi4+0x82>
 80003fc:	4642      	mov	r2, r8
 80003fe:	2320      	movs	r3, #32
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	4652      	mov	r2, sl
 8000404:	40da      	lsrs	r2, r3
 8000406:	4641      	mov	r1, r8
 8000408:	0013      	movs	r3, r2
 800040a:	464a      	mov	r2, r9
 800040c:	408a      	lsls	r2, r1
 800040e:	0017      	movs	r7, r2
 8000410:	431f      	orrs	r7, r3
 8000412:	e782      	b.n	800031a <__udivmoddi4+0x42>
 8000414:	4642      	mov	r2, r8
 8000416:	2320      	movs	r3, #32
 8000418:	1a9b      	subs	r3, r3, r2
 800041a:	002a      	movs	r2, r5
 800041c:	4646      	mov	r6, r8
 800041e:	409a      	lsls	r2, r3
 8000420:	0023      	movs	r3, r4
 8000422:	40f3      	lsrs	r3, r6
 8000424:	4313      	orrs	r3, r2
 8000426:	e7d5      	b.n	80003d4 <__udivmoddi4+0xfc>
 8000428:	4642      	mov	r2, r8
 800042a:	2320      	movs	r3, #32
 800042c:	2100      	movs	r1, #0
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	2200      	movs	r2, #0
 8000432:	9100      	str	r1, [sp, #0]
 8000434:	9201      	str	r2, [sp, #4]
 8000436:	2201      	movs	r2, #1
 8000438:	40da      	lsrs	r2, r3
 800043a:	9201      	str	r2, [sp, #4]
 800043c:	e782      	b.n	8000344 <__udivmoddi4+0x6c>
 800043e:	4642      	mov	r2, r8
 8000440:	2320      	movs	r3, #32
 8000442:	0026      	movs	r6, r4
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	40de      	lsrs	r6, r3
 8000448:	002f      	movs	r7, r5
 800044a:	46b4      	mov	ip, r6
 800044c:	4097      	lsls	r7, r2
 800044e:	4666      	mov	r6, ip
 8000450:	003b      	movs	r3, r7
 8000452:	4333      	orrs	r3, r6
 8000454:	e7c9      	b.n	80003ea <__udivmoddi4+0x112>
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_fmul>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0247      	lsls	r7, r0, #9
 8000466:	0046      	lsls	r6, r0, #1
 8000468:	4688      	mov	r8, r1
 800046a:	0a7f      	lsrs	r7, r7, #9
 800046c:	0e36      	lsrs	r6, r6, #24
 800046e:	0fc4      	lsrs	r4, r0, #31
 8000470:	2e00      	cmp	r6, #0
 8000472:	d047      	beq.n	8000504 <__aeabi_fmul+0xac>
 8000474:	2eff      	cmp	r6, #255	; 0xff
 8000476:	d024      	beq.n	80004c2 <__aeabi_fmul+0x6a>
 8000478:	00fb      	lsls	r3, r7, #3
 800047a:	2780      	movs	r7, #128	; 0x80
 800047c:	04ff      	lsls	r7, r7, #19
 800047e:	431f      	orrs	r7, r3
 8000480:	2300      	movs	r3, #0
 8000482:	4699      	mov	r9, r3
 8000484:	469a      	mov	sl, r3
 8000486:	3e7f      	subs	r6, #127	; 0x7f
 8000488:	4643      	mov	r3, r8
 800048a:	025d      	lsls	r5, r3, #9
 800048c:	0058      	lsls	r0, r3, #1
 800048e:	0fdb      	lsrs	r3, r3, #31
 8000490:	0a6d      	lsrs	r5, r5, #9
 8000492:	0e00      	lsrs	r0, r0, #24
 8000494:	4698      	mov	r8, r3
 8000496:	d043      	beq.n	8000520 <__aeabi_fmul+0xc8>
 8000498:	28ff      	cmp	r0, #255	; 0xff
 800049a:	d03b      	beq.n	8000514 <__aeabi_fmul+0xbc>
 800049c:	00eb      	lsls	r3, r5, #3
 800049e:	2580      	movs	r5, #128	; 0x80
 80004a0:	2200      	movs	r2, #0
 80004a2:	04ed      	lsls	r5, r5, #19
 80004a4:	431d      	orrs	r5, r3
 80004a6:	387f      	subs	r0, #127	; 0x7f
 80004a8:	1836      	adds	r6, r6, r0
 80004aa:	1c73      	adds	r3, r6, #1
 80004ac:	4641      	mov	r1, r8
 80004ae:	469b      	mov	fp, r3
 80004b0:	464b      	mov	r3, r9
 80004b2:	4061      	eors	r1, r4
 80004b4:	4313      	orrs	r3, r2
 80004b6:	2b0f      	cmp	r3, #15
 80004b8:	d864      	bhi.n	8000584 <__aeabi_fmul+0x12c>
 80004ba:	4875      	ldr	r0, [pc, #468]	; (8000690 <__aeabi_fmul+0x238>)
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	58c3      	ldr	r3, [r0, r3]
 80004c0:	469f      	mov	pc, r3
 80004c2:	2f00      	cmp	r7, #0
 80004c4:	d142      	bne.n	800054c <__aeabi_fmul+0xf4>
 80004c6:	2308      	movs	r3, #8
 80004c8:	4699      	mov	r9, r3
 80004ca:	3b06      	subs	r3, #6
 80004cc:	26ff      	movs	r6, #255	; 0xff
 80004ce:	469a      	mov	sl, r3
 80004d0:	e7da      	b.n	8000488 <__aeabi_fmul+0x30>
 80004d2:	4641      	mov	r1, r8
 80004d4:	2a02      	cmp	r2, #2
 80004d6:	d028      	beq.n	800052a <__aeabi_fmul+0xd2>
 80004d8:	2a03      	cmp	r2, #3
 80004da:	d100      	bne.n	80004de <__aeabi_fmul+0x86>
 80004dc:	e0ce      	b.n	800067c <__aeabi_fmul+0x224>
 80004de:	2a01      	cmp	r2, #1
 80004e0:	d000      	beq.n	80004e4 <__aeabi_fmul+0x8c>
 80004e2:	e0ac      	b.n	800063e <__aeabi_fmul+0x1e6>
 80004e4:	4011      	ands	r1, r2
 80004e6:	2000      	movs	r0, #0
 80004e8:	2200      	movs	r2, #0
 80004ea:	b2cc      	uxtb	r4, r1
 80004ec:	0240      	lsls	r0, r0, #9
 80004ee:	05d2      	lsls	r2, r2, #23
 80004f0:	0a40      	lsrs	r0, r0, #9
 80004f2:	07e4      	lsls	r4, r4, #31
 80004f4:	4310      	orrs	r0, r2
 80004f6:	4320      	orrs	r0, r4
 80004f8:	bc3c      	pop	{r2, r3, r4, r5}
 80004fa:	4690      	mov	r8, r2
 80004fc:	4699      	mov	r9, r3
 80004fe:	46a2      	mov	sl, r4
 8000500:	46ab      	mov	fp, r5
 8000502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000504:	2f00      	cmp	r7, #0
 8000506:	d115      	bne.n	8000534 <__aeabi_fmul+0xdc>
 8000508:	2304      	movs	r3, #4
 800050a:	4699      	mov	r9, r3
 800050c:	3b03      	subs	r3, #3
 800050e:	2600      	movs	r6, #0
 8000510:	469a      	mov	sl, r3
 8000512:	e7b9      	b.n	8000488 <__aeabi_fmul+0x30>
 8000514:	20ff      	movs	r0, #255	; 0xff
 8000516:	2202      	movs	r2, #2
 8000518:	2d00      	cmp	r5, #0
 800051a:	d0c5      	beq.n	80004a8 <__aeabi_fmul+0x50>
 800051c:	2203      	movs	r2, #3
 800051e:	e7c3      	b.n	80004a8 <__aeabi_fmul+0x50>
 8000520:	2d00      	cmp	r5, #0
 8000522:	d119      	bne.n	8000558 <__aeabi_fmul+0x100>
 8000524:	2000      	movs	r0, #0
 8000526:	2201      	movs	r2, #1
 8000528:	e7be      	b.n	80004a8 <__aeabi_fmul+0x50>
 800052a:	2401      	movs	r4, #1
 800052c:	22ff      	movs	r2, #255	; 0xff
 800052e:	400c      	ands	r4, r1
 8000530:	2000      	movs	r0, #0
 8000532:	e7db      	b.n	80004ec <__aeabi_fmul+0x94>
 8000534:	0038      	movs	r0, r7
 8000536:	f000 f915 	bl	8000764 <__clzsi2>
 800053a:	2676      	movs	r6, #118	; 0x76
 800053c:	1f43      	subs	r3, r0, #5
 800053e:	409f      	lsls	r7, r3
 8000540:	2300      	movs	r3, #0
 8000542:	4276      	negs	r6, r6
 8000544:	1a36      	subs	r6, r6, r0
 8000546:	4699      	mov	r9, r3
 8000548:	469a      	mov	sl, r3
 800054a:	e79d      	b.n	8000488 <__aeabi_fmul+0x30>
 800054c:	230c      	movs	r3, #12
 800054e:	4699      	mov	r9, r3
 8000550:	3b09      	subs	r3, #9
 8000552:	26ff      	movs	r6, #255	; 0xff
 8000554:	469a      	mov	sl, r3
 8000556:	e797      	b.n	8000488 <__aeabi_fmul+0x30>
 8000558:	0028      	movs	r0, r5
 800055a:	f000 f903 	bl	8000764 <__clzsi2>
 800055e:	1f43      	subs	r3, r0, #5
 8000560:	409d      	lsls	r5, r3
 8000562:	2376      	movs	r3, #118	; 0x76
 8000564:	425b      	negs	r3, r3
 8000566:	1a18      	subs	r0, r3, r0
 8000568:	2200      	movs	r2, #0
 800056a:	e79d      	b.n	80004a8 <__aeabi_fmul+0x50>
 800056c:	2080      	movs	r0, #128	; 0x80
 800056e:	2400      	movs	r4, #0
 8000570:	03c0      	lsls	r0, r0, #15
 8000572:	22ff      	movs	r2, #255	; 0xff
 8000574:	e7ba      	b.n	80004ec <__aeabi_fmul+0x94>
 8000576:	003d      	movs	r5, r7
 8000578:	4652      	mov	r2, sl
 800057a:	e7ab      	b.n	80004d4 <__aeabi_fmul+0x7c>
 800057c:	003d      	movs	r5, r7
 800057e:	0021      	movs	r1, r4
 8000580:	4652      	mov	r2, sl
 8000582:	e7a7      	b.n	80004d4 <__aeabi_fmul+0x7c>
 8000584:	0c3b      	lsrs	r3, r7, #16
 8000586:	469c      	mov	ip, r3
 8000588:	042a      	lsls	r2, r5, #16
 800058a:	0c12      	lsrs	r2, r2, #16
 800058c:	0c2b      	lsrs	r3, r5, #16
 800058e:	0014      	movs	r4, r2
 8000590:	4660      	mov	r0, ip
 8000592:	4665      	mov	r5, ip
 8000594:	043f      	lsls	r7, r7, #16
 8000596:	0c3f      	lsrs	r7, r7, #16
 8000598:	437c      	muls	r4, r7
 800059a:	4342      	muls	r2, r0
 800059c:	435d      	muls	r5, r3
 800059e:	437b      	muls	r3, r7
 80005a0:	0c27      	lsrs	r7, r4, #16
 80005a2:	189b      	adds	r3, r3, r2
 80005a4:	18ff      	adds	r7, r7, r3
 80005a6:	42ba      	cmp	r2, r7
 80005a8:	d903      	bls.n	80005b2 <__aeabi_fmul+0x15a>
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	025b      	lsls	r3, r3, #9
 80005ae:	469c      	mov	ip, r3
 80005b0:	4465      	add	r5, ip
 80005b2:	0424      	lsls	r4, r4, #16
 80005b4:	043a      	lsls	r2, r7, #16
 80005b6:	0c24      	lsrs	r4, r4, #16
 80005b8:	1912      	adds	r2, r2, r4
 80005ba:	0193      	lsls	r3, r2, #6
 80005bc:	1e5c      	subs	r4, r3, #1
 80005be:	41a3      	sbcs	r3, r4
 80005c0:	0c3f      	lsrs	r7, r7, #16
 80005c2:	0e92      	lsrs	r2, r2, #26
 80005c4:	197d      	adds	r5, r7, r5
 80005c6:	431a      	orrs	r2, r3
 80005c8:	01ad      	lsls	r5, r5, #6
 80005ca:	4315      	orrs	r5, r2
 80005cc:	012b      	lsls	r3, r5, #4
 80005ce:	d504      	bpl.n	80005da <__aeabi_fmul+0x182>
 80005d0:	2301      	movs	r3, #1
 80005d2:	465e      	mov	r6, fp
 80005d4:	086a      	lsrs	r2, r5, #1
 80005d6:	401d      	ands	r5, r3
 80005d8:	4315      	orrs	r5, r2
 80005da:	0032      	movs	r2, r6
 80005dc:	327f      	adds	r2, #127	; 0x7f
 80005de:	2a00      	cmp	r2, #0
 80005e0:	dd25      	ble.n	800062e <__aeabi_fmul+0x1d6>
 80005e2:	076b      	lsls	r3, r5, #29
 80005e4:	d004      	beq.n	80005f0 <__aeabi_fmul+0x198>
 80005e6:	230f      	movs	r3, #15
 80005e8:	402b      	ands	r3, r5
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	d000      	beq.n	80005f0 <__aeabi_fmul+0x198>
 80005ee:	3504      	adds	r5, #4
 80005f0:	012b      	lsls	r3, r5, #4
 80005f2:	d503      	bpl.n	80005fc <__aeabi_fmul+0x1a4>
 80005f4:	0032      	movs	r2, r6
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <__aeabi_fmul+0x23c>)
 80005f8:	3280      	adds	r2, #128	; 0x80
 80005fa:	401d      	ands	r5, r3
 80005fc:	2afe      	cmp	r2, #254	; 0xfe
 80005fe:	dc94      	bgt.n	800052a <__aeabi_fmul+0xd2>
 8000600:	2401      	movs	r4, #1
 8000602:	01a8      	lsls	r0, r5, #6
 8000604:	0a40      	lsrs	r0, r0, #9
 8000606:	b2d2      	uxtb	r2, r2
 8000608:	400c      	ands	r4, r1
 800060a:	e76f      	b.n	80004ec <__aeabi_fmul+0x94>
 800060c:	2080      	movs	r0, #128	; 0x80
 800060e:	03c0      	lsls	r0, r0, #15
 8000610:	4207      	tst	r7, r0
 8000612:	d007      	beq.n	8000624 <__aeabi_fmul+0x1cc>
 8000614:	4205      	tst	r5, r0
 8000616:	d105      	bne.n	8000624 <__aeabi_fmul+0x1cc>
 8000618:	4328      	orrs	r0, r5
 800061a:	0240      	lsls	r0, r0, #9
 800061c:	0a40      	lsrs	r0, r0, #9
 800061e:	4644      	mov	r4, r8
 8000620:	22ff      	movs	r2, #255	; 0xff
 8000622:	e763      	b.n	80004ec <__aeabi_fmul+0x94>
 8000624:	4338      	orrs	r0, r7
 8000626:	0240      	lsls	r0, r0, #9
 8000628:	0a40      	lsrs	r0, r0, #9
 800062a:	22ff      	movs	r2, #255	; 0xff
 800062c:	e75e      	b.n	80004ec <__aeabi_fmul+0x94>
 800062e:	2401      	movs	r4, #1
 8000630:	1aa3      	subs	r3, r4, r2
 8000632:	2b1b      	cmp	r3, #27
 8000634:	dd05      	ble.n	8000642 <__aeabi_fmul+0x1ea>
 8000636:	400c      	ands	r4, r1
 8000638:	2200      	movs	r2, #0
 800063a:	2000      	movs	r0, #0
 800063c:	e756      	b.n	80004ec <__aeabi_fmul+0x94>
 800063e:	465e      	mov	r6, fp
 8000640:	e7cb      	b.n	80005da <__aeabi_fmul+0x182>
 8000642:	002a      	movs	r2, r5
 8000644:	2020      	movs	r0, #32
 8000646:	40da      	lsrs	r2, r3
 8000648:	1ac3      	subs	r3, r0, r3
 800064a:	409d      	lsls	r5, r3
 800064c:	002b      	movs	r3, r5
 800064e:	1e5d      	subs	r5, r3, #1
 8000650:	41ab      	sbcs	r3, r5
 8000652:	4313      	orrs	r3, r2
 8000654:	075a      	lsls	r2, r3, #29
 8000656:	d004      	beq.n	8000662 <__aeabi_fmul+0x20a>
 8000658:	220f      	movs	r2, #15
 800065a:	401a      	ands	r2, r3
 800065c:	2a04      	cmp	r2, #4
 800065e:	d000      	beq.n	8000662 <__aeabi_fmul+0x20a>
 8000660:	3304      	adds	r3, #4
 8000662:	015a      	lsls	r2, r3, #5
 8000664:	d504      	bpl.n	8000670 <__aeabi_fmul+0x218>
 8000666:	2401      	movs	r4, #1
 8000668:	2201      	movs	r2, #1
 800066a:	400c      	ands	r4, r1
 800066c:	2000      	movs	r0, #0
 800066e:	e73d      	b.n	80004ec <__aeabi_fmul+0x94>
 8000670:	2401      	movs	r4, #1
 8000672:	019b      	lsls	r3, r3, #6
 8000674:	0a58      	lsrs	r0, r3, #9
 8000676:	400c      	ands	r4, r1
 8000678:	2200      	movs	r2, #0
 800067a:	e737      	b.n	80004ec <__aeabi_fmul+0x94>
 800067c:	2080      	movs	r0, #128	; 0x80
 800067e:	2401      	movs	r4, #1
 8000680:	03c0      	lsls	r0, r0, #15
 8000682:	4328      	orrs	r0, r5
 8000684:	0240      	lsls	r0, r0, #9
 8000686:	0a40      	lsrs	r0, r0, #9
 8000688:	400c      	ands	r4, r1
 800068a:	22ff      	movs	r2, #255	; 0xff
 800068c:	e72e      	b.n	80004ec <__aeabi_fmul+0x94>
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	08006500 	.word	0x08006500
 8000694:	f7ffffff 	.word	0xf7ffffff

08000698 <__aeabi_f2iz>:
 8000698:	0241      	lsls	r1, r0, #9
 800069a:	0043      	lsls	r3, r0, #1
 800069c:	0fc2      	lsrs	r2, r0, #31
 800069e:	0a49      	lsrs	r1, r1, #9
 80006a0:	0e1b      	lsrs	r3, r3, #24
 80006a2:	2000      	movs	r0, #0
 80006a4:	2b7e      	cmp	r3, #126	; 0x7e
 80006a6:	dd0d      	ble.n	80006c4 <__aeabi_f2iz+0x2c>
 80006a8:	2b9d      	cmp	r3, #157	; 0x9d
 80006aa:	dc0c      	bgt.n	80006c6 <__aeabi_f2iz+0x2e>
 80006ac:	2080      	movs	r0, #128	; 0x80
 80006ae:	0400      	lsls	r0, r0, #16
 80006b0:	4301      	orrs	r1, r0
 80006b2:	2b95      	cmp	r3, #149	; 0x95
 80006b4:	dc0a      	bgt.n	80006cc <__aeabi_f2iz+0x34>
 80006b6:	2096      	movs	r0, #150	; 0x96
 80006b8:	1ac3      	subs	r3, r0, r3
 80006ba:	40d9      	lsrs	r1, r3
 80006bc:	4248      	negs	r0, r1
 80006be:	2a00      	cmp	r2, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_f2iz+0x2c>
 80006c2:	0008      	movs	r0, r1
 80006c4:	4770      	bx	lr
 80006c6:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <__aeabi_f2iz+0x3c>)
 80006c8:	18d0      	adds	r0, r2, r3
 80006ca:	e7fb      	b.n	80006c4 <__aeabi_f2iz+0x2c>
 80006cc:	3b96      	subs	r3, #150	; 0x96
 80006ce:	4099      	lsls	r1, r3
 80006d0:	e7f4      	b.n	80006bc <__aeabi_f2iz+0x24>
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	7fffffff 	.word	0x7fffffff

080006d8 <__aeabi_ui2f>:
 80006d8:	b510      	push	{r4, lr}
 80006da:	1e04      	subs	r4, r0, #0
 80006dc:	d027      	beq.n	800072e <__aeabi_ui2f+0x56>
 80006de:	f000 f841 	bl	8000764 <__clzsi2>
 80006e2:	239e      	movs	r3, #158	; 0x9e
 80006e4:	1a1b      	subs	r3, r3, r0
 80006e6:	2b96      	cmp	r3, #150	; 0x96
 80006e8:	dc0a      	bgt.n	8000700 <__aeabi_ui2f+0x28>
 80006ea:	2296      	movs	r2, #150	; 0x96
 80006ec:	1ad2      	subs	r2, r2, r3
 80006ee:	4094      	lsls	r4, r2
 80006f0:	0264      	lsls	r4, r4, #9
 80006f2:	0a64      	lsrs	r4, r4, #9
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	0264      	lsls	r4, r4, #9
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	0a60      	lsrs	r0, r4, #9
 80006fc:	4318      	orrs	r0, r3
 80006fe:	bd10      	pop	{r4, pc}
 8000700:	2b99      	cmp	r3, #153	; 0x99
 8000702:	dc17      	bgt.n	8000734 <__aeabi_ui2f+0x5c>
 8000704:	2299      	movs	r2, #153	; 0x99
 8000706:	1ad2      	subs	r2, r2, r3
 8000708:	2a00      	cmp	r2, #0
 800070a:	dd27      	ble.n	800075c <__aeabi_ui2f+0x84>
 800070c:	4094      	lsls	r4, r2
 800070e:	0022      	movs	r2, r4
 8000710:	4c13      	ldr	r4, [pc, #76]	; (8000760 <__aeabi_ui2f+0x88>)
 8000712:	4014      	ands	r4, r2
 8000714:	0751      	lsls	r1, r2, #29
 8000716:	d004      	beq.n	8000722 <__aeabi_ui2f+0x4a>
 8000718:	210f      	movs	r1, #15
 800071a:	400a      	ands	r2, r1
 800071c:	2a04      	cmp	r2, #4
 800071e:	d000      	beq.n	8000722 <__aeabi_ui2f+0x4a>
 8000720:	3404      	adds	r4, #4
 8000722:	0162      	lsls	r2, r4, #5
 8000724:	d412      	bmi.n	800074c <__aeabi_ui2f+0x74>
 8000726:	01a4      	lsls	r4, r4, #6
 8000728:	0a64      	lsrs	r4, r4, #9
 800072a:	b2db      	uxtb	r3, r3
 800072c:	e7e3      	b.n	80006f6 <__aeabi_ui2f+0x1e>
 800072e:	2300      	movs	r3, #0
 8000730:	2400      	movs	r4, #0
 8000732:	e7e0      	b.n	80006f6 <__aeabi_ui2f+0x1e>
 8000734:	22b9      	movs	r2, #185	; 0xb9
 8000736:	0021      	movs	r1, r4
 8000738:	1ad2      	subs	r2, r2, r3
 800073a:	4091      	lsls	r1, r2
 800073c:	000a      	movs	r2, r1
 800073e:	1e51      	subs	r1, r2, #1
 8000740:	418a      	sbcs	r2, r1
 8000742:	2105      	movs	r1, #5
 8000744:	1a09      	subs	r1, r1, r0
 8000746:	40cc      	lsrs	r4, r1
 8000748:	4314      	orrs	r4, r2
 800074a:	e7db      	b.n	8000704 <__aeabi_ui2f+0x2c>
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <__aeabi_ui2f+0x88>)
 800074e:	401c      	ands	r4, r3
 8000750:	239f      	movs	r3, #159	; 0x9f
 8000752:	01a4      	lsls	r4, r4, #6
 8000754:	1a1b      	subs	r3, r3, r0
 8000756:	0a64      	lsrs	r4, r4, #9
 8000758:	b2db      	uxtb	r3, r3
 800075a:	e7cc      	b.n	80006f6 <__aeabi_ui2f+0x1e>
 800075c:	0022      	movs	r2, r4
 800075e:	e7d7      	b.n	8000710 <__aeabi_ui2f+0x38>
 8000760:	fbffffff 	.word	0xfbffffff

08000764 <__clzsi2>:
 8000764:	211c      	movs	r1, #28
 8000766:	2301      	movs	r3, #1
 8000768:	041b      	lsls	r3, r3, #16
 800076a:	4298      	cmp	r0, r3
 800076c:	d301      	bcc.n	8000772 <__clzsi2+0xe>
 800076e:	0c00      	lsrs	r0, r0, #16
 8000770:	3910      	subs	r1, #16
 8000772:	0a1b      	lsrs	r3, r3, #8
 8000774:	4298      	cmp	r0, r3
 8000776:	d301      	bcc.n	800077c <__clzsi2+0x18>
 8000778:	0a00      	lsrs	r0, r0, #8
 800077a:	3908      	subs	r1, #8
 800077c:	091b      	lsrs	r3, r3, #4
 800077e:	4298      	cmp	r0, r3
 8000780:	d301      	bcc.n	8000786 <__clzsi2+0x22>
 8000782:	0900      	lsrs	r0, r0, #4
 8000784:	3904      	subs	r1, #4
 8000786:	a202      	add	r2, pc, #8	; (adr r2, 8000790 <__clzsi2+0x2c>)
 8000788:	5c10      	ldrb	r0, [r2, r0]
 800078a:	1840      	adds	r0, r0, r1
 800078c:	4770      	bx	lr
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	02020304 	.word	0x02020304
 8000794:	01010101 	.word	0x01010101
	...

080007a0 <__clzdi2>:
 80007a0:	b510      	push	{r4, lr}
 80007a2:	2900      	cmp	r1, #0
 80007a4:	d103      	bne.n	80007ae <__clzdi2+0xe>
 80007a6:	f7ff ffdd 	bl	8000764 <__clzsi2>
 80007aa:	3020      	adds	r0, #32
 80007ac:	e002      	b.n	80007b4 <__clzdi2+0x14>
 80007ae:	1c08      	adds	r0, r1, #0
 80007b0:	f7ff ffd8 	bl	8000764 <__clzsi2>
 80007b4:	bd10      	pop	{r4, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)

080007b8 <_ZN4mbed8AnalogInD1Ev>:
    }

    virtual ~AnalogIn()
    {
        // Do nothing
    }
 80007b8:	4770      	bx	lr
	...

080007bc <_ZN4mbed8AnalogIn4lockEv>:
     * @returns
     *   A pointer to the singleton
     */
    T *get()
    {
        if (NULL == _ptr) {
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <_ZN4mbed8AnalogIn4lockEv+0x14>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d000      	beq.n	80007c6 <_ZN4mbed8AnalogIn4lockEv+0xa>
protected:

    virtual void lock()
    {
        _mutex->lock();
    }
 80007c4:	4770      	bx	lr
            singleton_lock();
            if (NULL == _ptr) {
                _ptr = new (_data) T();
 80007c6:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <_ZN4mbed8AnalogIn4lockEv+0x14>)
 80007c8:	1d1a      	adds	r2, r3, #4
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	e7fa      	b.n	80007c4 <_ZN4mbed8AnalogIn4lockEv+0x8>
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	20000980 	.word	0x20000980

080007d4 <_ZN4mbed8AnalogIn6unlockEv>:
        if (NULL == _ptr) {
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <_ZN4mbed8AnalogIn6unlockEv+0x14>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d000      	beq.n	80007de <_ZN4mbed8AnalogIn6unlockEv+0xa>

    virtual void unlock()
    {
        _mutex->unlock();
    }
 80007dc:	4770      	bx	lr
                _ptr = new (_data) T();
 80007de:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <_ZN4mbed8AnalogIn6unlockEv+0x14>)
 80007e0:	1d1a      	adds	r2, r3, #4
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	e7fa      	b.n	80007dc <_ZN4mbed8AnalogIn6unlockEv+0x8>
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000980 	.word	0x20000980

080007ec <_ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv>:
        _ops = &ops;
    }

    // Function attributes
    template <typename F>
    static R function_call(const void *p)
 80007ec:	b510      	push	{r4, lr}
    {
        return (*(F *)p)();
 80007ee:	6803      	ldr	r3, [r0, #0]
 80007f0:	4798      	blx	r3
    }
 80007f2:	bd10      	pop	{r4, pc}

080007f4 <_ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv>:

    template <typename F>
    static void function_move(void *d, const void *p)
    {
        new (d) F(*(F *)p);
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d001      	beq.n	80007fc <_ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv+0x8>
 80007f8:	680b      	ldr	r3, [r1, #0]
 80007fa:	6003      	str	r3, [r0, #0]
    }
 80007fc:	4770      	bx	lr

080007fe <_ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv>:

    template <typename F>
    static void function_dtor(void *p)
    {
        ((F *)p)->~F();
    }
 80007fe:	4770      	bx	lr

08000800 <_ZN4mbed8AnalogInD0Ev>:
    virtual ~AnalogIn()
 8000800:	b510      	push	{r4, lr}
 8000802:	0004      	movs	r4, r0
    }
 8000804:	f001 fed4 	bl	80025b0 <_ZdlPv>
 8000808:	0020      	movs	r0, r4
 800080a:	bd10      	pop	{r4, pc}

0800080c <_ZN4mbed6TickerD1Ev>:
    void attach_us(T *obj, M method, us_timestamp_t t)
    {
        attach_us(Callback<void()>(obj, method), t);
    }

    virtual ~Ticker()
 800080c:	b510      	push	{r4, lr}
 800080e:	0004      	movs	r4, r0
    {
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <_ZN4mbed6TickerD1Ev+0x24>)
 8000812:	6003      	str	r3, [r0, #0]
        detach();
 8000814:	f000 fc0c 	bl	8001030 <_ZN4mbed6Ticker6detachEv>
    {
 8000818:	0020      	movs	r0, r4
 800081a:	3028      	adds	r0, #40	; 0x28
        if (_ops) {
 800081c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <_ZN4mbed6TickerD1Ev+0x1a>
            _ops->dtor(this);
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	4798      	blx	r3
 8000826:	0020      	movs	r0, r4
 8000828:	f000 fc80 	bl	800112c <_ZN4mbed10TimerEventD1Ev>
    }
 800082c:	0020      	movs	r0, r4
 800082e:	bd10      	pop	{r4, pc}
 8000830:	08005f84 	.word	0x08005f84

08000834 <_ZN4mbed6SerialD1Ev>:
 *     pc.printf("Hello World\n");
 * }
 * @endcode
 * @ingroup drivers
 */
class Serial : public SerialBase, public Stream, private NonCopyable<Serial> {
 8000834:	b510      	push	{r4, lr}
 8000836:	0004      	movs	r4, r0
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <_ZN4mbed6SerialD1Ev+0x28>)
 800083a:	6003      	str	r3, [r0, #0]
 800083c:	0019      	movs	r1, r3
 800083e:	3120      	adds	r1, #32
 8000840:	22bc      	movs	r2, #188	; 0xbc
 8000842:	5081      	str	r1, [r0, r2]
 8000844:	3380      	adds	r3, #128	; 0x80
 8000846:	3204      	adds	r2, #4
 8000848:	5083      	str	r3, [r0, r2]
 800084a:	30bc      	adds	r0, #188	; 0xbc
 800084c:	f001 f9a4 	bl	8001b98 <_ZN4mbed6StreamD1Ev>
 8000850:	0020      	movs	r0, r4
 8000852:	f000 fb85 	bl	8000f60 <_ZN4mbed10SerialBaseD1Ev>
 8000856:	0020      	movs	r0, r4
 8000858:	bd10      	pop	{r4, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	08005edc 	.word	0x08005edc

08000860 <_ZThn188_N4mbed6SerialD1Ev>:
 8000860:	b408      	push	{r3}
 8000862:	4b02      	ldr	r3, [pc, #8]	; (800086c <_ZThn188_N4mbed6SerialD1Ev+0xc>)
 8000864:	469c      	mov	ip, r3
 8000866:	38bc      	subs	r0, #188	; 0xbc
 8000868:	bc08      	pop	{r3}
 800086a:	4760      	bx	ip
 800086c:	08000835 	.word	0x08000835

08000870 <_ZThn192_N4mbed6SerialD1Ev>:
 8000870:	b408      	push	{r3}
 8000872:	4b02      	ldr	r3, [pc, #8]	; (800087c <_ZThn192_N4mbed6SerialD1Ev+0xc>)
 8000874:	469c      	mov	ip, r3
 8000876:	38c0      	subs	r0, #192	; 0xc0
 8000878:	bc08      	pop	{r3}
 800087a:	4760      	bx	ip
 800087c:	08000835 	.word	0x08000835

08000880 <_Z13enviar_visualv>:
//Funciones:
void enviar_visual (void);


void enviar_visual (void)
{
 8000880:	b570      	push	{r4, r5, r6, lr}
        lock();
 8000882:	4c39      	ldr	r4, [pc, #228]	; (8000968 <_Z13enviar_visualv+0xe8>)
 8000884:	6823      	ldr	r3, [r4, #0]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	0020      	movs	r0, r4
 800088a:	4798      	blx	r3
        float ret = analogin_read(&_adc);
 800088c:	1d20      	adds	r0, r4, #4
 800088e:	f003 fa39 	bl	8003d04 <analogin_read>
 8000892:	1c05      	adds	r5, r0, #0
        unlock();
 8000894:	6823      	ldr	r3, [r4, #0]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	0020      	movs	r0, r4
 800089a:	4798      	blx	r3
  temp[0][0] = milm35_1.read()*100;
 800089c:	4933      	ldr	r1, [pc, #204]	; (800096c <_Z13enviar_visualv+0xec>)
 800089e:	1c28      	adds	r0, r5, #0
 80008a0:	f7ff fdda 	bl	8000458 <__aeabi_fmul>
 80008a4:	f7ff fef8 	bl	8000698 <__aeabi_f2iz>
 80008a8:	4d31      	ldr	r5, [pc, #196]	; (8000970 <_Z13enviar_visualv+0xf0>)
 80008aa:	6028      	str	r0, [r5, #0]
        lock();
 80008ac:	4c31      	ldr	r4, [pc, #196]	; (8000974 <_Z13enviar_visualv+0xf4>)
 80008ae:	6823      	ldr	r3, [r4, #0]
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	0020      	movs	r0, r4
 80008b4:	4798      	blx	r3
        float ret = analogin_read(&_adc);
 80008b6:	1d20      	adds	r0, r4, #4
 80008b8:	f003 fa24 	bl	8003d04 <analogin_read>
 80008bc:	1c06      	adds	r6, r0, #0
        unlock();
 80008be:	6823      	ldr	r3, [r4, #0]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	0020      	movs	r0, r4
 80008c4:	4798      	blx	r3
  temp[1][0] = milm35_2.read()*100;
 80008c6:	4929      	ldr	r1, [pc, #164]	; (800096c <_Z13enviar_visualv+0xec>)
 80008c8:	1c30      	adds	r0, r6, #0
 80008ca:	f7ff fdc5 	bl	8000458 <__aeabi_fmul>
 80008ce:	f7ff fee3 	bl	8000698 <__aeabi_f2iz>
 80008d2:	6068      	str	r0, [r5, #4]
        lock();
 80008d4:	4c28      	ldr	r4, [pc, #160]	; (8000978 <_Z13enviar_visualv+0xf8>)
 80008d6:	6823      	ldr	r3, [r4, #0]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	0020      	movs	r0, r4
 80008dc:	4798      	blx	r3
        float ret = analogin_read(&_adc);
 80008de:	1d20      	adds	r0, r4, #4
 80008e0:	f003 fa10 	bl	8003d04 <analogin_read>
 80008e4:	1c06      	adds	r6, r0, #0
        unlock();
 80008e6:	6823      	ldr	r3, [r4, #0]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	0020      	movs	r0, r4
 80008ec:	4798      	blx	r3
  temp[2][0] = milm35_3.read()*100;
 80008ee:	491f      	ldr	r1, [pc, #124]	; (800096c <_Z13enviar_visualv+0xec>)
 80008f0:	1c30      	adds	r0, r6, #0
 80008f2:	f7ff fdb1 	bl	8000458 <__aeabi_fmul>
 80008f6:	f7ff fecf 	bl	8000698 <__aeabi_f2iz>
 80008fa:	60a8      	str	r0, [r5, #8]
        lock();
 80008fc:	4c1f      	ldr	r4, [pc, #124]	; (800097c <_Z13enviar_visualv+0xfc>)
 80008fe:	6823      	ldr	r3, [r4, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	0020      	movs	r0, r4
 8000904:	4798      	blx	r3
        float ret = analogin_read(&_adc);
 8000906:	1d20      	adds	r0, r4, #4
 8000908:	f003 f9fc 	bl	8003d04 <analogin_read>
 800090c:	1c06      	adds	r6, r0, #0
        unlock();
 800090e:	6823      	ldr	r3, [r4, #0]
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	0020      	movs	r0, r4
 8000914:	4798      	blx	r3
  temp[3][0] = milm35_4.read()*100;
 8000916:	4915      	ldr	r1, [pc, #84]	; (800096c <_Z13enviar_visualv+0xec>)
 8000918:	1c30      	adds	r0, r6, #0
 800091a:	f7ff fd9d 	bl	8000458 <__aeabi_fmul>
 800091e:	f7ff febb 	bl	8000698 <__aeabi_f2iz>
 8000922:	60e8      	str	r0, [r5, #12]
    for (int i=0; i<4; i++){
 8000924:	2500      	movs	r5, #0
 8000926:	2d03      	cmp	r5, #3
 8000928:	dc1c      	bgt.n	8000964 <_Z13enviar_visualv+0xe4>
      pc.putc((char)0x50);
 800092a:	4c15      	ldr	r4, [pc, #84]	; (8000980 <_Z13enviar_visualv+0x100>)
 800092c:	34bc      	adds	r4, #188	; 0xbc
 800092e:	2150      	movs	r1, #80	; 0x50
 8000930:	0020      	movs	r0, r4
 8000932:	f001 f949 	bl	8001bc8 <_ZN4mbed6Stream4putcEi>
      pc.putc((char) i);
 8000936:	26ff      	movs	r6, #255	; 0xff
 8000938:	0031      	movs	r1, r6
 800093a:	4029      	ands	r1, r5
 800093c:	0020      	movs	r0, r4
 800093e:	f001 f943 	bl	8001bc8 <_ZN4mbed6Stream4putcEi>
      pc.putc((char) 0);
 8000942:	2100      	movs	r1, #0
 8000944:	0020      	movs	r0, r4
 8000946:	f001 f93f 	bl	8001bc8 <_ZN4mbed6Stream4putcEi>
      pc.putc((char) temp[i][0]);
 800094a:	00aa      	lsls	r2, r5, #2
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <_Z13enviar_visualv+0xf0>)
 800094e:	58d1      	ldr	r1, [r2, r3]
 8000950:	4031      	ands	r1, r6
 8000952:	0020      	movs	r0, r4
 8000954:	f001 f938 	bl	8001bc8 <_ZN4mbed6Stream4putcEi>
      pc.putc((char) 0xE0);
 8000958:	21e0      	movs	r1, #224	; 0xe0
 800095a:	0020      	movs	r0, r4
 800095c:	f001 f934 	bl	8001bc8 <_ZN4mbed6Stream4putcEi>
    for (int i=0; i<4; i++){
 8000960:	3501      	adds	r5, #1
 8000962:	e7e0      	b.n	8000926 <_Z13enviar_visualv+0xa6>
    }
}
 8000964:	bd70      	pop	{r4, r5, r6, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	20000704 	.word	0x20000704
 800096c:	42c80000 	.word	0x42c80000
 8000970:	2000092c 	.word	0x2000092c
 8000974:	20000758 	.word	0x20000758
 8000978:	200007ac 	.word	0x200007ac
 800097c:	20000800 	.word	0x20000800
 8000980:	20000854 	.word	0x20000854

08000984 <_ZN4mbed8AnalogInC1E7PinName>:
    AnalogIn(PinName pin)
 8000984:	b510      	push	{r4, lr}
 8000986:	0004      	movs	r4, r0
    {
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <_ZN4mbed8AnalogInC1E7PinName+0x34>)
 800098a:	6003      	str	r3, [r0, #0]
        if (NULL == _ptr) {
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <_ZN4mbed8AnalogInC1E7PinName+0x38>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d008      	beq.n	80009a6 <_ZN4mbed8AnalogInC1E7PinName+0x22>
        analogin_init(&_adc, pin);
 8000994:	1d20      	adds	r0, r4, #4
 8000996:	f001 ff3f 	bl	8002818 <analogin_init>
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <_ZN4mbed8AnalogInC1E7PinName+0x38>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d005      	beq.n	80009ae <_ZN4mbed8AnalogInC1E7PinName+0x2a>
    }
 80009a2:	0020      	movs	r0, r4
 80009a4:	bd10      	pop	{r4, pc}
                _ptr = new (_data) T();
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <_ZN4mbed8AnalogInC1E7PinName+0x38>)
 80009a8:	1d1a      	adds	r2, r3, #4
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	e7f2      	b.n	8000994 <_ZN4mbed8AnalogInC1E7PinName+0x10>
 80009ae:	4b03      	ldr	r3, [pc, #12]	; (80009bc <_ZN4mbed8AnalogInC1E7PinName+0x38>)
 80009b0:	1d1a      	adds	r2, r3, #4
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	e7f5      	b.n	80009a2 <_ZN4mbed8AnalogInC1E7PinName+0x1e>
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	08005eb8 	.word	0x08005eb8
 80009bc:	20000980 	.word	0x20000980

080009c0 <_Z41__static_initialization_and_destruction_0ii>:
{
    tiempo_visual_studio.attach(&enviar_visual,1);  //Icializamos y le asignamos Ticker tiempo_visual_studio a la funcion enviar_visual (cada 1 seg).

    while(1){
    }
}
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	2801      	cmp	r0, #1
 80009c6:	d001      	beq.n	80009cc <_Z41__static_initialization_and_destruction_0ii+0xc>
 80009c8:	b002      	add	sp, #8
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80009ce:	4299      	cmp	r1, r3
 80009d0:	d1fa      	bne.n	80009c8 <_Z41__static_initialization_and_destruction_0ii+0x8>
Serial pc(USBTX,USBRX);
 80009d2:	4d28      	ldr	r5, [pc, #160]	; (8000a74 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80009d4:	2396      	movs	r3, #150	; 0x96
 80009d6:	019b      	lsls	r3, r3, #6
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2300      	movs	r3, #0
 80009dc:	2203      	movs	r2, #3
 80009de:	2102      	movs	r1, #2
 80009e0:	0028      	movs	r0, r5
 80009e2:	f000 f987 	bl	8000cf4 <_ZN4mbed6SerialC1E7PinNameS1_PKci>
 80009e6:	4c24      	ldr	r4, [pc, #144]	; (8000a78 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80009e8:	0022      	movs	r2, r4
 80009ea:	4924      	ldr	r1, [pc, #144]	; (8000a7c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009ec:	0028      	movs	r0, r5
 80009ee:	f001 fd93 	bl	8002518 <__aeabi_atexit>
AnalogIn milm35_1(A0);
 80009f2:	4e23      	ldr	r6, [pc, #140]	; (8000a80 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	0030      	movs	r0, r6
 80009f8:	f7ff ffc4 	bl	8000984 <_ZN4mbed8AnalogInC1E7PinName>
 80009fc:	4d21      	ldr	r5, [pc, #132]	; (8000a84 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80009fe:	0022      	movs	r2, r4
 8000a00:	0029      	movs	r1, r5
 8000a02:	0030      	movs	r0, r6
 8000a04:	f001 fd88 	bl	8002518 <__aeabi_atexit>
AnalogIn milm35_2(A1);
 8000a08:	4e1f      	ldr	r6, [pc, #124]	; (8000a88 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	0030      	movs	r0, r6
 8000a0e:	f7ff ffb9 	bl	8000984 <_ZN4mbed8AnalogInC1E7PinName>
 8000a12:	0022      	movs	r2, r4
 8000a14:	0029      	movs	r1, r5
 8000a16:	0030      	movs	r0, r6
 8000a18:	f001 fd7e 	bl	8002518 <__aeabi_atexit>
AnalogIn milm35_3(A2);
 8000a1c:	4e1b      	ldr	r6, [pc, #108]	; (8000a8c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8000a1e:	2104      	movs	r1, #4
 8000a20:	0030      	movs	r0, r6
 8000a22:	f7ff ffaf 	bl	8000984 <_ZN4mbed8AnalogInC1E7PinName>
 8000a26:	0022      	movs	r2, r4
 8000a28:	0029      	movs	r1, r5
 8000a2a:	0030      	movs	r0, r6
 8000a2c:	f001 fd74 	bl	8002518 <__aeabi_atexit>
AnalogIn milm35_4(A3);
 8000a30:	4e17      	ldr	r6, [pc, #92]	; (8000a90 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8000a32:	2110      	movs	r1, #16
 8000a34:	0030      	movs	r0, r6
 8000a36:	f7ff ffa5 	bl	8000984 <_ZN4mbed8AnalogInC1E7PinName>
 8000a3a:	0022      	movs	r2, r4
 8000a3c:	0029      	movs	r1, r5
 8000a3e:	0030      	movs	r0, r6
 8000a40:	f001 fd6a 	bl	8002518 <__aeabi_atexit>
    Ticker() : TimerEvent(), _function(0), _lock_deepsleep(true)
 8000a44:	4d13      	ldr	r5, [pc, #76]	; (8000a94 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8000a46:	0028      	movs	r0, r5
 8000a48:	f000 fb46 	bl	80010d8 <_ZN4mbed10TimerEventC1Ev>
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8000a4e:	602b      	str	r3, [r5, #0]
            memset(this, 0, sizeof(Callback));
 8000a50:	0028      	movs	r0, r5
 8000a52:	3028      	adds	r0, #40	; 0x28
 8000a54:	2210      	movs	r2, #16
 8000a56:	2100      	movs	r1, #0
 8000a58:	f004 fdbb 	bl	80055d2 <memset>
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2338      	movs	r3, #56	; 0x38
 8000a60:	54ea      	strb	r2, [r5, r3]
Ticker tiempo_visual_studio;
 8000a62:	0022      	movs	r2, r4
 8000a64:	490d      	ldr	r1, [pc, #52]	; (8000a9c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8000a66:	0028      	movs	r0, r5
 8000a68:	f001 fd56 	bl	8002518 <__aeabi_atexit>
}
 8000a6c:	e7ac      	b.n	80009c8 <_Z41__static_initialization_and_destruction_0ii+0x8>
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	0000ffff 	.word	0x0000ffff
 8000a74:	20000854 	.word	0x20000854
 8000a78:	200000c0 	.word	0x200000c0
 8000a7c:	08000835 	.word	0x08000835
 8000a80:	20000704 	.word	0x20000704
 8000a84:	080007b9 	.word	0x080007b9
 8000a88:	20000758 	.word	0x20000758
 8000a8c:	200007ac 	.word	0x200007ac
 8000a90:	20000800 	.word	0x20000800
 8000a94:	20000940 	.word	0x20000940
 8000a98:	08005f84 	.word	0x08005f84
 8000a9c:	0800080d 	.word	0x0800080d

08000aa0 <_ZN4mbed6TickerD0Ev>:
    virtual ~Ticker()
 8000aa0:	b510      	push	{r4, lr}
 8000aa2:	0004      	movs	r4, r0
    {
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <_ZN4mbed6TickerD0Ev+0x2c>)
 8000aa6:	6003      	str	r3, [r0, #0]
        detach();
 8000aa8:	f000 fac2 	bl	8001030 <_ZN4mbed6Ticker6detachEv>
    {
 8000aac:	0020      	movs	r0, r4
 8000aae:	3028      	adds	r0, #40	; 0x28
        if (_ops) {
 8000ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <_ZN4mbed6TickerD0Ev+0x1a>
            _ops->dtor(this);
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	4798      	blx	r3
 8000aba:	0020      	movs	r0, r4
 8000abc:	f000 fb36 	bl	800112c <_ZN4mbed10TimerEventD1Ev>
    }
 8000ac0:	0020      	movs	r0, r4
 8000ac2:	f001 fd75 	bl	80025b0 <_ZdlPv>
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	bd10      	pop	{r4, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	08005f84 	.word	0x08005f84

08000ad0 <main>:
{
 8000ad0:	b500      	push	{lr}
 8000ad2:	b08b      	sub	sp, #44	; 0x2c
        memset(this, 0, sizeof(Callback));
 8000ad4:	2210      	movs	r2, #16
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	a802      	add	r0, sp, #8
 8000ada:	f004 fd7a 	bl	80055d2 <memset>
        new (this) F(f);
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <main+0x94>)
 8000ae0:	9302      	str	r3, [sp, #8]
        _ops = &ops;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <main+0x98>)
 8000ae4:	9305      	str	r3, [sp, #20]
        if (func._ops) {
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <main+0x22>
            func._ops->move(this, &func);
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	a902      	add	r1, sp, #8
 8000aee:	a806      	add	r0, sp, #24
 8000af0:	4798      	blx	r3
        _ops = func._ops;
 8000af2:	9b05      	ldr	r3, [sp, #20]
 8000af4:	9309      	str	r3, [sp, #36]	; 0x24
        core_util_critical_section_enter();
 8000af6:	f001 f8b7 	bl	8001c68 <core_util_critical_section_enter>
        return _ops;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <main+0x9c>)
 8000afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (!_function && _lock_deepsleep) {
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d029      	beq.n	8000b56 <main+0x86>
 8000b02:	2300      	movs	r3, #0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d12a      	bne.n	8000b5e <main+0x8e>
        if (_ops) {
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <main+0x9c>)
 8000b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <main+0x48>
            _ops->dtor(this);
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	4816      	ldr	r0, [pc, #88]	; (8000b6c <main+0x9c>)
 8000b14:	3028      	adds	r0, #40	; 0x28
 8000b16:	4798      	blx	r3
        if (func._ops) {
 8000b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d004      	beq.n	8000b28 <main+0x58>
            func._ops->move(this, &func);
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	a906      	add	r1, sp, #24
 8000b22:	4812      	ldr	r0, [pc, #72]	; (8000b6c <main+0x9c>)
 8000b24:	3028      	adds	r0, #40	; 0x28
 8000b26:	4798      	blx	r3
        _ops = func._ops;
 8000b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	480f      	ldr	r0, [pc, #60]	; (8000b6c <main+0x9c>)
 8000b2e:	6343      	str	r3, [r0, #52]	; 0x34
        setup(t);
 8000b30:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <main+0xa0>)
 8000b32:	2300      	movs	r3, #0
 8000b34:	f000 fab2 	bl	800109c <_ZN4mbed6Ticker5setupEy>
        core_util_critical_section_exit();
 8000b38:	f001 f8a0 	bl	8001c7c <core_util_critical_section_exit>
        if (_ops) {
 8000b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <main+0x78>
            _ops->dtor(this);
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	a806      	add	r0, sp, #24
 8000b46:	4798      	blx	r3
        if (_ops) {
 8000b48:	9b05      	ldr	r3, [sp, #20]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d002      	beq.n	8000b54 <main+0x84>
            _ops->dtor(this);
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	a802      	add	r0, sp, #8
 8000b52:	4798      	blx	r3
 8000b54:	e7fe      	b.n	8000b54 <main+0x84>
        if (!_function && _lock_deepsleep) {
 8000b56:	3338      	adds	r3, #56	; 0x38
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <main+0x9c>)
 8000b5a:	5cd3      	ldrb	r3, [r2, r3]
 8000b5c:	e7d2      	b.n	8000b04 <main+0x34>
            sleep_manager_lock_deep_sleep();
 8000b5e:	f000 fbcd 	bl	80012fc <sleep_manager_lock_deep_sleep_internal>
 8000b62:	e7d1      	b.n	8000b08 <main+0x38>
 8000b64:	08000881 	.word	0x08000881
 8000b68:	08005ec8 	.word	0x08005ec8
 8000b6c:	20000940 	.word	0x20000940
 8000b70:	000f4240 	.word	0x000f4240

08000b74 <_ZN4mbed6SerialD0Ev>:
 8000b74:	b510      	push	{r4, lr}
 8000b76:	0004      	movs	r4, r0
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <_ZN4mbed6SerialD0Ev+0x2c>)
 8000b7a:	6003      	str	r3, [r0, #0]
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	3120      	adds	r1, #32
 8000b80:	22bc      	movs	r2, #188	; 0xbc
 8000b82:	5081      	str	r1, [r0, r2]
 8000b84:	3380      	adds	r3, #128	; 0x80
 8000b86:	3204      	adds	r2, #4
 8000b88:	5083      	str	r3, [r0, r2]
 8000b8a:	30bc      	adds	r0, #188	; 0xbc
 8000b8c:	f001 f804 	bl	8001b98 <_ZN4mbed6StreamD1Ev>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f000 f9e5 	bl	8000f60 <_ZN4mbed10SerialBaseD1Ev>
 8000b96:	0020      	movs	r0, r4
 8000b98:	f001 fd0a 	bl	80025b0 <_ZdlPv>
 8000b9c:	0020      	movs	r0, r4
 8000b9e:	bd10      	pop	{r4, pc}
 8000ba0:	08005edc 	.word	0x08005edc

08000ba4 <_ZThn188_N4mbed6SerialD0Ev>:
 8000ba4:	b408      	push	{r3}
 8000ba6:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <_ZThn188_N4mbed6SerialD0Ev+0xc>)
 8000ba8:	469c      	mov	ip, r3
 8000baa:	38bc      	subs	r0, #188	; 0xbc
 8000bac:	bc08      	pop	{r3}
 8000bae:	4760      	bx	ip
 8000bb0:	08000b75 	.word	0x08000b75

08000bb4 <_ZThn192_N4mbed6SerialD0Ev>:
 8000bb4:	b408      	push	{r3}
 8000bb6:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <_ZThn192_N4mbed6SerialD0Ev+0xc>)
 8000bb8:	469c      	mov	ip, r3
 8000bba:	38c0      	subs	r0, #192	; 0xc0
 8000bbc:	bc08      	pop	{r3}
 8000bbe:	4760      	bx	ip
 8000bc0:	08000b75 	.word	0x08000b75

08000bc4 <_GLOBAL__sub_I_pc>:
}
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	4902      	ldr	r1, [pc, #8]	; (8000bd0 <_GLOBAL__sub_I_pc+0xc>)
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f7ff fef9 	bl	80009c0 <_Z41__static_initialization_and_destruction_0ii>
 8000bce:	bd10      	pop	{r4, pc}
 8000bd0:	0000ffff 	.word	0x0000ffff

08000bd4 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev>:
            (BufferSize < (((uint64_t) 1) << (sizeof(CounterType) * 8))),
            "Invalid BufferSize for the CounterType"
        );
    }

    ~CircularBuffer()
 8000bd4:	b570      	push	{r4, r5, r6, lr}
 8000bd6:	0005      	movs	r5, r0
    {
    }
 8000bd8:	1e06      	subs	r6, r0, #0
 8000bda:	d00c      	beq.n	8000bf6 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev+0x22>
 8000bdc:	0004      	movs	r4, r0
 8000bde:	3458      	adds	r4, #88	; 0x58
 8000be0:	42b4      	cmp	r4, r6
 8000be2:	d008      	beq.n	8000bf6 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev+0x22>
 8000be4:	3c2c      	subs	r4, #44	; 0x2c
    void *rx_buffer;           /**< Rx buffer */
    size_t rx_length;          /**< Length of Rx buffer */
    uint32_t event;            /**< Event for a transaction */
    event_callback_t callback; /**< User's callback */
    uint8_t width;             /**< Buffer's word width (8, 16, 32, 64) */
} transaction_t;
 8000be6:	0020      	movs	r0, r4
 8000be8:	3018      	adds	r0, #24

    /** Destroy a callback
     */
    ~Callback()
    {
        if (_ops) {
 8000bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0f7      	beq.n	8000be0 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev+0xc>
            _ops->dtor(this);
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	4798      	blx	r3
 8000bf4:	e7f4      	b.n	8000be0 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev+0xc>
 8000bf6:	0028      	movs	r0, r5
 8000bf8:	bd70      	pop	{r4, r5, r6, pc}
	...

08000bfc <_Z41__static_initialization_and_destruction_0ii>:
#endif
}

#endif

} // namespace mbed
 8000bfc:	b570      	push	{r4, r5, r6, lr}
 8000bfe:	0004      	movs	r4, r0
 8000c00:	2801      	cmp	r0, #1
 8000c02:	d000      	beq.n	8000c06 <_Z41__static_initialization_and_destruction_0ii+0xa>
 8000c04:	bd70      	pop	{r4, r5, r6, pc}
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d1fb      	bne.n	8000c04 <_Z41__static_initialization_and_destruction_0ii+0x8>
    CircularBuffer() : _head(0), _tail(0), _full(false)
 8000c0c:	4d0f      	ldr	r5, [pc, #60]	; (8000c4c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000c0e:	2c00      	cmp	r4, #0
 8000c10:	db0f      	blt.n	8000c32 <_Z41__static_initialization_and_destruction_0ii+0x36>
public:
    Transaction(Class *tpointer, const transaction_t &transaction) : _obj(tpointer), _data(transaction)
    {
    }

    Transaction() : _obj(), _data()
 8000c12:	2600      	movs	r6, #0
 8000c14:	0028      	movs	r0, r5
 8000c16:	c040      	stmia	r0!, {r6}
 8000c18:	2228      	movs	r2, #40	; 0x28
 8000c1a:	0031      	movs	r1, r6
 8000c1c:	f004 fcd9 	bl	80055d2 <memset>
} transaction_t;
 8000c20:	0028      	movs	r0, r5
 8000c22:	3018      	adds	r0, #24
            memset(this, 0, sizeof(Callback));
 8000c24:	2210      	movs	r2, #16
 8000c26:	0031      	movs	r1, r6
 8000c28:	f004 fcd3 	bl	80055d2 <memset>
 8000c2c:	352c      	adds	r5, #44	; 0x2c
 8000c2e:	3c01      	subs	r4, #1
 8000c30:	e7ed      	b.n	8000c0e <_Z41__static_initialization_and_destruction_0ii+0x12>
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000c34:	2300      	movs	r3, #0
 8000c36:	6583      	str	r3, [r0, #88]	; 0x58
 8000c38:	65c3      	str	r3, [r0, #92]	; 0x5c
 8000c3a:	2260      	movs	r2, #96	; 0x60
 8000c3c:	5483      	strb	r3, [r0, r2]
CircularBuffer<Transaction<SPI>, TRANSACTION_QUEUE_SIZE_SPI> SPI::_transaction_buffer;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000c40:	4904      	ldr	r1, [pc, #16]	; (8000c54 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000c42:	f001 fc69 	bl	8002518 <__aeabi_atexit>
} // namespace mbed
 8000c46:	e7dd      	b.n	8000c04 <_Z41__static_initialization_and_destruction_0ii+0x8>
 8000c48:	0000ffff 	.word	0x0000ffff
 8000c4c:	20000988 	.word	0x20000988
 8000c50:	200000c0 	.word	0x200000c0
 8000c54:	08000bd5 	.word	0x08000bd5

08000c58 <_GLOBAL__sub_I__ZN4mbed3SPI19_transaction_bufferE>:
 8000c58:	b510      	push	{r4, lr}
 8000c5a:	4902      	ldr	r1, [pc, #8]	; (8000c64 <_GLOBAL__sub_I__ZN4mbed3SPI19_transaction_bufferE+0xc>)
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f7ff ffcd 	bl	8000bfc <_Z41__static_initialization_and_destruction_0ii>
 8000c62:	bd10      	pop	{r4, pc}
 8000c64:	0000ffff 	.word	0x0000ffff

08000c68 <_ZN4mbed10FileHandle5lseekEli>:
     *    -1 on failure or unsupported
     *  @deprecated Replaced by `off_t FileHandle::seek(off_t offset, int whence = SEEK_SET)'
     *
     */
    MBED_DEPRECATED_SINCE("mbed-os-5.4", "Replaced by FileHandle::seek")
    virtual off_t lseek(off_t offset, int whence)
 8000c68:	b510      	push	{r4, lr}
    {
        return seek(offset, whence);
 8000c6a:	6803      	ldr	r3, [r0, #0]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	4798      	blx	r3
    }
 8000c70:	bd10      	pop	{r4, pc}

08000c72 <_ZN4mbed10FileHandle5fsyncEv>:
     *    0 on success or un-needed,
     *   -1 on error
     *  @deprecated Replaced by `int FileHandle::sync()'
     */
    MBED_DEPRECATED_SINCE("mbed-os-5.4", "Replaced by FileHandle::sync")
    virtual int fsync()
 8000c72:	b510      	push	{r4, lr}
    {
        return sync();
 8000c74:	6803      	ldr	r3, [r0, #0]
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4798      	blx	r3
    }
 8000c7a:	bd10      	pop	{r4, pc}

08000c7c <_ZN4mbed10FileHandle4flenEv>:
     *  @returns
     *   Length of the file
     *  @deprecated Replaced by `off_t FileHandle::size()'
     */
    MBED_DEPRECATED_SINCE("mbed-os-5.4", "Replaced by FileHandle::size")
    virtual off_t flen()
 8000c7c:	b510      	push	{r4, lr}
    {
        return size();
 8000c7e:	6803      	ldr	r3, [r0, #0]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c82:	4798      	blx	r3
    }
 8000c84:	bd10      	pop	{r4, pc}

08000c86 <_ZN4mbed10FileHandle12set_blockingEb>:
     *  @return             0 on success
     *  @return             Negative error code on failure
     */
    virtual int set_blocking(bool blocking)
    {
        return blocking ? 0 : -ENOTTY;
 8000c86:	2900      	cmp	r1, #0
 8000c88:	d001      	beq.n	8000c8e <_ZN4mbed10FileHandle12set_blockingEb+0x8>
 8000c8a:	2000      	movs	r0, #0
    }
 8000c8c:	4770      	bx	lr
        return blocking ? 0 : -ENOTTY;
 8000c8e:	2019      	movs	r0, #25
 8000c90:	4240      	negs	r0, r0
 8000c92:	e7fb      	b.n	8000c8c <_ZN4mbed10FileHandle12set_blockingEb+0x6>

08000c94 <_ZNK4mbed10FileHandle11is_blockingEv>:
     *  @return             true for blocking mode, false for non-blocking mode.
     */
    virtual bool is_blocking() const
    {
        return true;
    }
 8000c94:	2001      	movs	r0, #1
 8000c96:	4770      	bx	lr

08000c98 <_ZNK4mbed10FileHandle4pollEs>:
     */
    virtual short poll(short events) const
    {
        // Possible default for real files
        return POLLIN | POLLOUT;
    }
 8000c98:	2011      	movs	r0, #17
 8000c9a:	4770      	bx	lr

08000c9c <_ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE>:
     *  @param func     Function to call on state change
     */
    virtual void sigio(Callback<void()> func)
    {
        //Default for real files. Do nothing for real files.
    }
 8000c9c:	4770      	bx	lr

08000c9e <_ZN4mbed6Serial4lockEv>:
}

void Serial::lock()
{
    _mutex.lock();
}
 8000c9e:	4770      	bx	lr

08000ca0 <_ZThn188_N4mbed6Serial4lockEv>:
    }

protected:
    virtual int _getc();
    virtual int _putc(int c);
    virtual void lock();
 8000ca0:	b408      	push	{r3}
 8000ca2:	4b02      	ldr	r3, [pc, #8]	; (8000cac <_ZThn188_N4mbed6Serial4lockEv+0xc>)
 8000ca4:	469c      	mov	ip, r3
 8000ca6:	38bc      	subs	r0, #188	; 0xbc
 8000ca8:	bc08      	pop	{r3}
 8000caa:	4760      	bx	ip
 8000cac:	08000c9f 	.word	0x08000c9f

08000cb0 <_ZN4mbed6Serial6unlockEv>:

void Serial::unlock()
{
    _mutex.unlock();
}
 8000cb0:	4770      	bx	lr
	...

08000cb4 <_ZThn188_N4mbed6Serial6unlockEv>:
    virtual void unlock();
 8000cb4:	b408      	push	{r3}
 8000cb6:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <_ZThn188_N4mbed6Serial6unlockEv+0xc>)
 8000cb8:	469c      	mov	ip, r3
 8000cba:	38bc      	subs	r0, #188	; 0xbc
 8000cbc:	bc08      	pop	{r3}
 8000cbe:	4760      	bx	ip
 8000cc0:	08000cb1 	.word	0x08000cb1

08000cc4 <_ZN4mbed6Serial5_getcEv>:
{
 8000cc4:	b510      	push	{r4, lr}
    return _base_getc();
 8000cc6:	f000 f994 	bl	8000ff2 <_ZN4mbed10SerialBase10_base_getcEv>
}
 8000cca:	bd10      	pop	{r4, pc}

08000ccc <_ZThn188_N4mbed6Serial5_getcEv>:
    virtual int _getc();
 8000ccc:	b408      	push	{r3}
 8000cce:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <_ZThn188_N4mbed6Serial5_getcEv+0xc>)
 8000cd0:	469c      	mov	ip, r3
 8000cd2:	38bc      	subs	r0, #188	; 0xbc
 8000cd4:	bc08      	pop	{r3}
 8000cd6:	4760      	bx	ip
 8000cd8:	08000cc5 	.word	0x08000cc5

08000cdc <_ZN4mbed6Serial5_putcEi>:
{
 8000cdc:	b510      	push	{r4, lr}
    return _base_putc(c);
 8000cde:	f000 f98d 	bl	8000ffc <_ZN4mbed10SerialBase10_base_putcEi>
}
 8000ce2:	bd10      	pop	{r4, pc}

08000ce4 <_ZThn188_N4mbed6Serial5_putcEi>:
    virtual int _putc(int c);
 8000ce4:	b408      	push	{r3}
 8000ce6:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <_ZThn188_N4mbed6Serial5_putcEi+0xc>)
 8000ce8:	469c      	mov	ip, r3
 8000cea:	38bc      	subs	r0, #188	; 0xbc
 8000cec:	bc08      	pop	{r3}
 8000cee:	4760      	bx	ip
 8000cf0:	08000cdd 	.word	0x08000cdd

08000cf4 <_ZN4mbed6SerialC1E7PinNameS1_PKci>:
Serial::Serial(PinName tx, PinName rx, const char *name, int baud) : SerialBase(tx, rx, baud), Stream(name)
 8000cf4:	b570      	push	{r4, r5, r6, lr}
 8000cf6:	0004      	movs	r4, r0
 8000cf8:	001d      	movs	r5, r3
 8000cfa:	9b04      	ldr	r3, [sp, #16]
 8000cfc:	f000 f838 	bl	8000d70 <_ZN4mbed10SerialBaseC1E7PinNameS1_i>
 8000d00:	0020      	movs	r0, r4
 8000d02:	30bc      	adds	r0, #188	; 0xbc
 8000d04:	0029      	movs	r1, r5
 8000d06:	f000 ff1b 	bl	8001b40 <_ZN4mbed6StreamC1EPKc>
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <_ZN4mbed6SerialC1E7PinNameS1_PKci+0x30>)
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	3208      	adds	r2, #8
 8000d10:	6022      	str	r2, [r4, #0]
 8000d12:	0019      	movs	r1, r3
 8000d14:	3128      	adds	r1, #40	; 0x28
 8000d16:	22bc      	movs	r2, #188	; 0xbc
 8000d18:	50a1      	str	r1, [r4, r2]
 8000d1a:	3388      	adds	r3, #136	; 0x88
 8000d1c:	3204      	adds	r2, #4
 8000d1e:	50a3      	str	r3, [r4, r2]
}
 8000d20:	0020      	movs	r0, r4
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
 8000d24:	08005ed4 	.word	0x08005ed4

08000d28 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq>:
    core_util_critical_section_exit();
    unlock();
}

void SerialBase::_irq_handler(uint32_t id, SerialIrq irq_type)
{
 8000d28:	b510      	push	{r4, lr}
        return _ops;
 8000d2a:	000b      	movs	r3, r1
 8000d2c:	330a      	adds	r3, #10
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	18c3      	adds	r3, r0, r3
 8000d32:	685b      	ldr	r3, [r3, #4]
    SerialBase *handler = (SerialBase *)id;
    if (handler->_irq[irq_type]) {
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d004      	beq.n	8000d42 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x1a>
        handler->_irq[irq_type]();
 8000d38:	0109      	lsls	r1, r1, #4
 8000d3a:	3198      	adds	r1, #152	; 0x98
 8000d3c:	1840      	adds	r0, r0, r1
        return _ops->call(this);
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4798      	blx	r3
    }
}
 8000d42:	bd10      	pop	{r4, pc}

08000d44 <_ZN4mbed10SerialBase4lockEv>:
}

void SerialBase::lock()
{
    // Stub
}
 8000d44:	4770      	bx	lr

08000d46 <_ZN4mbed10SerialBase6unlockEv>:

void SerialBase:: unlock()
{
    // Stub
}
 8000d46:	4770      	bx	lr

08000d48 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E>:
        volatile uint32_t callback;
        volatile uint32_t trampoline;
    } __attribute__((__packed__)) CThunkTrampoline;
#endif

    static void trampoline(T *instance, void *context, CCallback *callback)
 8000d48:	b510      	push	{r4, lr}
    {
        if (instance && *callback) {
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d00b      	beq.n	8000d66 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>
 8000d4e:	6814      	ldr	r4, [r2, #0]
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d009      	beq.n	8000d68 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x20>
            (static_cast<T *>(instance)->**callback)(context);
 8000d54:	6853      	ldr	r3, [r2, #4]
 8000d56:	07da      	lsls	r2, r3, #31
 8000d58:	d502      	bpl.n	8000d60 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
 8000d5a:	105a      	asrs	r2, r3, #1
 8000d5c:	5882      	ldr	r2, [r0, r2]
 8000d5e:	5914      	ldr	r4, [r2, r4]
 8000d60:	105b      	asrs	r3, r3, #1
 8000d62:	18c0      	adds	r0, r0, r3
 8000d64:	47a0      	blx	r4
        }
    }
 8000d66:	bd10      	pop	{r4, pc}
        if (instance && *callback) {
 8000d68:	6853      	ldr	r3, [r2, #4]
 8000d6a:	07db      	lsls	r3, r3, #31
 8000d6c:	d4f2      	bmi.n	8000d54 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0xc>
 8000d6e:	e7fa      	b.n	8000d66 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>

08000d70 <_ZN4mbed10SerialBaseC1E7PinNameS1_i>:
SerialBase::SerialBase(PinName tx, PinName rx, int baud) :
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d72:	b08b      	sub	sp, #44	; 0x2c
 8000d74:	0004      	movs	r4, r0
 8000d76:	9100      	str	r1, [sp, #0]
 8000d78:	9201      	str	r2, [sp, #4]
 8000d7a:	001e      	movs	r6, r3
    _serial(), _baud(baud)
 8000d7c:	4b3e      	ldr	r3, [pc, #248]	; (8000e78 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x108>)
 8000d7e:	3308      	adds	r3, #8
 8000d80:	6003      	str	r3, [r0, #0]
        init(instance, NULL, NULL);
 8000d82:	2500      	movs	r5, #0
 8000d84:	9508      	str	r5, [sp, #32]
 8000d86:	9509      	str	r5, [sp, #36]	; 0x24
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	a908      	add	r1, sp, #32
 8000d8e:	0038      	movs	r0, r7
 8000d90:	f004 fc16 	bl	80055c0 <memcpy>

    inline void init(T *instance, CCallback callback, void *context)
    {
        /* remember callback - need to add this level of redirection
           as pointer size for member functions differs between platforms */
        m_callback = callback;
 8000d94:	0022      	movs	r2, r4
 8000d96:	3208      	adds	r2, #8
 8000d98:	cf0a      	ldmia	r7!, {r1, r3}
 8000d9a:	c20a      	stmia	r2!, {r1, r3}

        /* populate thunking trampoline */
        CTHUNK_ASSIGMENT;
 8000d9c:	4b37      	ldr	r3, [pc, #220]	; (8000e7c <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x10c>)
 8000d9e:	6123      	str	r3, [r4, #16]
 8000da0:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x110>)
 8000da2:	6163      	str	r3, [r4, #20]
        m_thunk.context = (uint32_t)context;
 8000da4:	61e5      	str	r5, [r4, #28]
        m_thunk.instance = (uint32_t)instance;
 8000da6:	61a4      	str	r4, [r4, #24]
        m_thunk.callback = (uint32_t)&m_callback;
 8000da8:	0023      	movs	r3, r4
 8000daa:	3308      	adds	r3, #8
 8000dac:	6223      	str	r3, [r4, #32]
        m_thunk.trampoline = (uint32_t)&trampoline;
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x114>)
 8000db0:	6263      	str	r3, [r4, #36]	; 0x24
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000db2:	f3bf 8f6f 	isb	sy
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000db6:	f3bf 8f4f 	dsb	sy
 8000dba:	2328      	movs	r3, #40	; 0x28
 8000dbc:	54e5      	strb	r5, [r4, r3]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	54e5      	strb	r5, [r4, r3]
 8000dc2:	0020      	movs	r0, r4
 8000dc4:	302c      	adds	r0, #44	; 0x2c
            memset(this, 0, sizeof(Callback));
 8000dc6:	2210      	movs	r2, #16
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f004 fc02 	bl	80055d2 <memset>
 8000dce:	0020      	movs	r0, r4
 8000dd0:	303c      	adds	r0, #60	; 0x3c
 8000dd2:	2210      	movs	r2, #16
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f004 fbfc 	bl	80055d2 <memset>
 8000dda:	0020      	movs	r0, r4
 8000ddc:	304c      	adds	r0, #76	; 0x4c
 8000dde:	224c      	movs	r2, #76	; 0x4c
 8000de0:	2100      	movs	r1, #0
 8000de2:	f004 fbf6 	bl	80055d2 <memset>
 8000de6:	0027      	movs	r7, r4
 8000de8:	3798      	adds	r7, #152	; 0x98
 8000dea:	3501      	adds	r5, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	db07      	blt.n	8000e00 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x90>
            memset(this, 0, sizeof(Callback));
 8000df0:	2210      	movs	r2, #16
 8000df2:	2100      	movs	r1, #0
 8000df4:	0038      	movs	r0, r7
 8000df6:	f004 fbec 	bl	80055d2 <memset>
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	3d01      	subs	r5, #1
 8000dfe:	e7f5      	b.n	8000dec <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x7c>
 8000e00:	23b8      	movs	r3, #184	; 0xb8
 8000e02:	50e6      	str	r6, [r4, r3]
    for (size_t i = 0; i < sizeof _irq / sizeof _irq[0]; i++) {
 8000e04:	2600      	movs	r6, #0
 8000e06:	e008      	b.n	8000e1a <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0xaa>
        _ops = func._ops;
 8000e08:	9b07      	ldr	r3, [sp, #28]
 8000e0a:	60eb      	str	r3, [r5, #12]
        if (_ops) {
 8000e0c:	9b07      	ldr	r3, [sp, #28]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d002      	beq.n	8000e18 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0xa8>
            _ops->dtor(this);
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	a804      	add	r0, sp, #16
 8000e16:	4798      	blx	r3
 8000e18:	3601      	adds	r6, #1
 8000e1a:	2e01      	cmp	r6, #1
 8000e1c:	d818      	bhi.n	8000e50 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0xe0>
        _irq[i] = NULL;
 8000e1e:	0135      	lsls	r5, r6, #4
 8000e20:	3598      	adds	r5, #152	; 0x98
 8000e22:	1965      	adds	r5, r4, r5
            memset(this, 0, sizeof(Callback));
 8000e24:	af04      	add	r7, sp, #16
 8000e26:	2210      	movs	r2, #16
 8000e28:	2100      	movs	r1, #0
 8000e2a:	0038      	movs	r0, r7
 8000e2c:	f004 fbd1 	bl	80055d2 <memset>
        if (this != &that) {
 8000e30:	42bd      	cmp	r5, r7
 8000e32:	d0eb      	beq.n	8000e0c <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x9c>
        if (_ops) {
 8000e34:	68eb      	ldr	r3, [r5, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d002      	beq.n	8000e40 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0xd0>
            _ops->dtor(this);
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	0028      	movs	r0, r5
 8000e3e:	4798      	blx	r3
        if (func._ops) {
 8000e40:	9b07      	ldr	r3, [sp, #28]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0e0      	beq.n	8000e08 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x98>
            func._ops->move(this, &func);
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	a904      	add	r1, sp, #16
 8000e4a:	0028      	movs	r0, r5
 8000e4c:	4798      	blx	r3
 8000e4e:	e7db      	b.n	8000e08 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x98>
    serial_init(&_serial, tx, rx);
 8000e50:	0025      	movs	r5, r4
 8000e52:	354c      	adds	r5, #76	; 0x4c
 8000e54:	9a01      	ldr	r2, [sp, #4]
 8000e56:	9900      	ldr	r1, [sp, #0]
 8000e58:	0028      	movs	r0, r5
 8000e5a:	f003 f99f 	bl	800419c <serial_init>
    serial_baud(&_serial, _baud);
 8000e5e:	23b8      	movs	r3, #184	; 0xb8
 8000e60:	58e1      	ldr	r1, [r4, r3]
 8000e62:	0028      	movs	r0, r5
 8000e64:	f003 f974 	bl	8004150 <serial_baud>
    serial_irq_handler(&_serial, SerialBase::_irq_handler, (uint32_t)this);
 8000e68:	0022      	movs	r2, r4
 8000e6a:	4907      	ldr	r1, [pc, #28]	; (8000e88 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x118>)
 8000e6c:	0028      	movs	r0, r5
 8000e6e:	f002 fe8f 	bl	8003b90 <serial_irq_handler>
}
 8000e72:	0020      	movs	r0, r4
 8000e74:	b00b      	add	sp, #44	; 0x2c
 8000e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e78:	08005f64 	.word	0x08005f64
 8000e7c:	c80fa001 	.word	0xc80fa001
 8000e80:	00004718 	.word	0x00004718
 8000e84:	08000d49 	.word	0x08000d49
 8000e88:	08000d29 	.word	0x08000d29

08000e8c <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE>:
{
 8000e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	0004      	movs	r4, r0
 8000e92:	000e      	movs	r6, r1
 8000e94:	0017      	movs	r7, r2
    lock();
 8000e96:	6803      	ldr	r3, [r0, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4798      	blx	r3
    core_util_critical_section_enter();
 8000e9c:	f000 fee4 	bl	8001c68 <core_util_critical_section_enter>
    if (func) {
 8000ea0:	68f3      	ldr	r3, [r6, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d02b      	beq.n	8000efe <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x72>
        return _ops;
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	330a      	adds	r3, #10
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	18e3      	adds	r3, r4, r3
 8000eae:	685b      	ldr	r3, [r3, #4]
        if (!_irq[type]) {
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d021      	beq.n	8000ef8 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x6c>
        _irq[type] = func;
 8000eb4:	013d      	lsls	r5, r7, #4
 8000eb6:	3598      	adds	r5, #152	; 0x98
 8000eb8:	1965      	adds	r5, r4, r5
        if (this != &that) {
 8000eba:	42ae      	cmp	r6, r5
 8000ebc:	d00e      	beq.n	8000edc <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x50>
        if (_ops) {
 8000ebe:	68eb      	ldr	r3, [r5, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x3e>
            _ops->dtor(this);
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	0028      	movs	r0, r5
 8000ec8:	4798      	blx	r3
        if (func._ops) {
 8000eca:	68f3      	ldr	r3, [r6, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x4c>
            func._ops->move(this, &func);
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	0031      	movs	r1, r6
 8000ed4:	0028      	movs	r0, r5
 8000ed6:	4798      	blx	r3
        _ops = func._ops;
 8000ed8:	68f3      	ldr	r3, [r6, #12]
 8000eda:	60eb      	str	r3, [r5, #12]
        serial_irq_set(&_serial, (SerialIrq)type, 1);
 8000edc:	0020      	movs	r0, r4
 8000ede:	304c      	adds	r0, #76	; 0x4c
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	0039      	movs	r1, r7
 8000ee4:	f002 fe60 	bl	8003ba8 <serial_irq_set>
    core_util_critical_section_exit();
 8000ee8:	f000 fec8 	bl	8001c7c <core_util_critical_section_exit>
    unlock();
 8000eec:	6823      	ldr	r3, [r4, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	0020      	movs	r0, r4
 8000ef2:	4798      	blx	r3
}
 8000ef4:	b005      	add	sp, #20
 8000ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            sleep_manager_lock_deep_sleep();
 8000ef8:	f000 fa00 	bl	80012fc <sleep_manager_lock_deep_sleep_internal>
 8000efc:	e7da      	b.n	8000eb4 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x28>
        return _ops;
 8000efe:	003b      	movs	r3, r7
 8000f00:	330a      	adds	r3, #10
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	18e3      	adds	r3, r4, r3
 8000f06:	685b      	ldr	r3, [r3, #4]
        if (_irq[type]) {
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x84>
            sleep_manager_unlock_deep_sleep();
 8000f0c:	f000 fa18 	bl	8001340 <sleep_manager_unlock_deep_sleep_internal>
        _irq[type] = NULL;
 8000f10:	013d      	lsls	r5, r7, #4
 8000f12:	3598      	adds	r5, #152	; 0x98
 8000f14:	1965      	adds	r5, r4, r5
            memset(this, 0, sizeof(Callback));
 8000f16:	466e      	mov	r6, sp
 8000f18:	2210      	movs	r2, #16
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4668      	mov	r0, sp
 8000f1e:	f004 fb58 	bl	80055d2 <memset>
        if (this != &that) {
 8000f22:	42b5      	cmp	r5, r6
 8000f24:	d00e      	beq.n	8000f44 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0xb8>
        if (_ops) {
 8000f26:	68eb      	ldr	r3, [r5, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0xa6>
            _ops->dtor(this);
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	0028      	movs	r0, r5
 8000f30:	4798      	blx	r3
        if (func._ops) {
 8000f32:	9b03      	ldr	r3, [sp, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0xb4>
            func._ops->move(this, &func);
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4669      	mov	r1, sp
 8000f3c:	0028      	movs	r0, r5
 8000f3e:	4798      	blx	r3
        _ops = func._ops;
 8000f40:	9b03      	ldr	r3, [sp, #12]
 8000f42:	60eb      	str	r3, [r5, #12]
        if (_ops) {
 8000f44:	9b03      	ldr	r3, [sp, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0xc4>
            _ops->dtor(this);
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	4668      	mov	r0, sp
 8000f4e:	4798      	blx	r3
        serial_irq_set(&_serial, (SerialIrq)type, 0);
 8000f50:	0020      	movs	r0, r4
 8000f52:	304c      	adds	r0, #76	; 0x4c
 8000f54:	2200      	movs	r2, #0
 8000f56:	0039      	movs	r1, r7
 8000f58:	f002 fe26 	bl	8003ba8 <serial_irq_set>
 8000f5c:	e7c4      	b.n	8000ee8 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x5c>
	...

08000f60 <_ZN4mbed10SerialBaseD1Ev>:

SerialBase::~SerialBase()
 8000f60:	b570      	push	{r4, r5, r6, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	0006      	movs	r6, r0
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <_ZN4mbed10SerialBaseD1Ev+0x7c>)
 8000f68:	3308      	adds	r3, #8
 8000f6a:	6003      	str	r3, [r0, #0]
{
    // No lock needed in destructor

    // Detaching interrupts releases the sleep lock if it was locked
    for (int irq = 0; irq < IrqCnt; irq++) {
 8000f6c:	2400      	movs	r4, #0
 8000f6e:	e000      	b.n	8000f72 <_ZN4mbed10SerialBaseD1Ev+0x12>
 8000f70:	3401      	adds	r4, #1
 8000f72:	2c01      	cmp	r4, #1
 8000f74:	dc10      	bgt.n	8000f98 <_ZN4mbed10SerialBaseD1Ev+0x38>
            memset(this, 0, sizeof(Callback));
 8000f76:	2210      	movs	r2, #16
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4668      	mov	r0, sp
 8000f7c:	f004 fb29 	bl	80055d2 <memset>
        attach(NULL, (IrqType)irq);
 8000f80:	b2e2      	uxtb	r2, r4
 8000f82:	4669      	mov	r1, sp
 8000f84:	0030      	movs	r0, r6
 8000f86:	f7ff ff81 	bl	8000e8c <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE>
        if (_ops) {
 8000f8a:	9b03      	ldr	r3, [sp, #12]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0ef      	beq.n	8000f70 <_ZN4mbed10SerialBaseD1Ev+0x10>
            _ops->dtor(this);
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	4668      	mov	r0, sp
 8000f94:	4798      	blx	r3
 8000f96:	e7eb      	b.n	8000f70 <_ZN4mbed10SerialBaseD1Ev+0x10>
SerialBase::~SerialBase()
 8000f98:	0035      	movs	r5, r6
 8000f9a:	3598      	adds	r5, #152	; 0x98
 8000f9c:	2d00      	cmp	r5, #0
 8000f9e:	d00b      	beq.n	8000fb8 <_ZN4mbed10SerialBaseD1Ev+0x58>
 8000fa0:	0034      	movs	r4, r6
 8000fa2:	34b8      	adds	r4, #184	; 0xb8
 8000fa4:	42ac      	cmp	r4, r5
 8000fa6:	d007      	beq.n	8000fb8 <_ZN4mbed10SerialBaseD1Ev+0x58>
 8000fa8:	3c10      	subs	r4, #16
        if (_ops) {
 8000faa:	68e3      	ldr	r3, [r4, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f9      	beq.n	8000fa4 <_ZN4mbed10SerialBaseD1Ev+0x44>
            _ops->dtor(this);
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	0020      	movs	r0, r4
 8000fb4:	4798      	blx	r3
 8000fb6:	e7f5      	b.n	8000fa4 <_ZN4mbed10SerialBaseD1Ev+0x44>
 8000fb8:	0030      	movs	r0, r6
 8000fba:	303c      	adds	r0, #60	; 0x3c
        if (_ops) {
 8000fbc:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <_ZN4mbed10SerialBaseD1Ev+0x66>
            _ops->dtor(this);
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	4798      	blx	r3
 8000fc6:	0030      	movs	r0, r6
 8000fc8:	302c      	adds	r0, #44	; 0x2c
        if (_ops) {
 8000fca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <_ZN4mbed10SerialBaseD1Ev+0x74>
            _ops->dtor(this);
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	4798      	blx	r3
    }
}
 8000fd4:	0030      	movs	r0, r6
 8000fd6:	b004      	add	sp, #16
 8000fd8:	bd70      	pop	{r4, r5, r6, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	08005f64 	.word	0x08005f64

08000fe0 <_ZN4mbed10SerialBaseD0Ev>:
SerialBase::~SerialBase()
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	0004      	movs	r4, r0
}
 8000fe4:	f7ff ffbc 	bl	8000f60 <_ZN4mbed10SerialBaseD1Ev>
 8000fe8:	0020      	movs	r0, r4
 8000fea:	f001 fae1 	bl	80025b0 <_ZdlPv>
 8000fee:	0020      	movs	r0, r4
 8000ff0:	bd10      	pop	{r4, pc}

08000ff2 <_ZN4mbed10SerialBase10_base_getcEv>:
{
 8000ff2:	b510      	push	{r4, lr}
    return serial_getc(&_serial);
 8000ff4:	304c      	adds	r0, #76	; 0x4c
 8000ff6:	f002 fe5d 	bl	8003cb4 <serial_getc>
}
 8000ffa:	bd10      	pop	{r4, pc}

08000ffc <_ZN4mbed10SerialBase10_base_putcEi>:
{
 8000ffc:	b510      	push	{r4, lr}
 8000ffe:	000c      	movs	r4, r1
    serial_putc(&_serial, c);
 8001000:	304c      	adds	r0, #76	; 0x4c
 8001002:	f002 fe6b 	bl	8003cdc <serial_putc>
}
 8001006:	0020      	movs	r0, r4
 8001008:	bd10      	pop	{r4, pc}

0800100a <_ZN4mbed6Ticker7handlerEv>:
    insert_absolute(_delay + ticker_read_us(_ticker_data));
    core_util_critical_section_exit();
}

void Ticker::handler()
{
 800100a:	b510      	push	{r4, lr}
 800100c:	0004      	movs	r4, r0
    insert_absolute(event.timestamp + _delay);
 800100e:	6882      	ldr	r2, [r0, #8]
 8001010:	68c3      	ldr	r3, [r0, #12]
 8001012:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001014:	6a00      	ldr	r0, [r0, #32]
 8001016:	1812      	adds	r2, r2, r0
 8001018:	414b      	adcs	r3, r1
 800101a:	0020      	movs	r0, r4
 800101c:	f000 f874 	bl	8001108 <_ZN4mbed10TimerEvent15insert_absoluteEy>
        return _ops;
 8001020:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (_function) {
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <_ZN4mbed6Ticker7handlerEv+0x24>
        _function();
 8001026:	0020      	movs	r0, r4
 8001028:	3028      	adds	r0, #40	; 0x28
        return _ops->call(this);
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4798      	blx	r3
    }
}
 800102e:	bd10      	pop	{r4, pc}

08001030 <_ZN4mbed6Ticker6detachEv>:
{
 8001030:	b530      	push	{r4, r5, lr}
 8001032:	b085      	sub	sp, #20
 8001034:	0004      	movs	r4, r0
    core_util_critical_section_enter();
 8001036:	f000 fe17 	bl	8001c68 <core_util_critical_section_enter>
    remove();
 800103a:	0020      	movs	r0, r4
 800103c:	f000 f86f 	bl	800111e <_ZN4mbed10TimerEvent6removeEv>
    if (_function && _lock_deepsleep) {
 8001040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001042:	2b00      	cmp	r3, #0
 8001044:	d025      	beq.n	8001092 <_ZN4mbed6Ticker6detachEv+0x62>
 8001046:	2338      	movs	r3, #56	; 0x38
 8001048:	5ce3      	ldrb	r3, [r4, r3]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d123      	bne.n	8001096 <_ZN4mbed6Ticker6detachEv+0x66>
    _function = 0;
 800104e:	3428      	adds	r4, #40	; 0x28
            memset(this, 0, sizeof(Callback));
 8001050:	466d      	mov	r5, sp
 8001052:	2210      	movs	r2, #16
 8001054:	2100      	movs	r1, #0
 8001056:	4668      	mov	r0, sp
 8001058:	f004 fabb 	bl	80055d2 <memset>
        if (this != &that) {
 800105c:	42ac      	cmp	r4, r5
 800105e:	d00e      	beq.n	800107e <_ZN4mbed6Ticker6detachEv+0x4e>
        if (_ops) {
 8001060:	68e3      	ldr	r3, [r4, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <_ZN4mbed6Ticker6detachEv+0x3c>
            _ops->dtor(this);
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	0020      	movs	r0, r4
 800106a:	4798      	blx	r3
        if (func._ops) {
 800106c:	9b03      	ldr	r3, [sp, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <_ZN4mbed6Ticker6detachEv+0x4a>
            func._ops->move(this, &func);
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	4669      	mov	r1, sp
 8001076:	0020      	movs	r0, r4
 8001078:	4798      	blx	r3
        _ops = func._ops;
 800107a:	9b03      	ldr	r3, [sp, #12]
 800107c:	60e3      	str	r3, [r4, #12]
        if (_ops) {
 800107e:	9b03      	ldr	r3, [sp, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <_ZN4mbed6Ticker6detachEv+0x5a>
            _ops->dtor(this);
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	4668      	mov	r0, sp
 8001088:	4798      	blx	r3
    core_util_critical_section_exit();
 800108a:	f000 fdf7 	bl	8001c7c <core_util_critical_section_exit>
}
 800108e:	b005      	add	sp, #20
 8001090:	bd30      	pop	{r4, r5, pc}
    if (_function && _lock_deepsleep) {
 8001092:	2300      	movs	r3, #0
 8001094:	e7d9      	b.n	800104a <_ZN4mbed6Ticker6detachEv+0x1a>
        sleep_manager_unlock_deep_sleep();
 8001096:	f000 f953 	bl	8001340 <sleep_manager_unlock_deep_sleep_internal>
 800109a:	e7d8      	b.n	800104e <_ZN4mbed6Ticker6detachEv+0x1e>

0800109c <_ZN4mbed6Ticker5setupEy>:
{
 800109c:	b5d0      	push	{r4, r6, r7, lr}
 800109e:	0004      	movs	r4, r0
 80010a0:	0016      	movs	r6, r2
 80010a2:	001f      	movs	r7, r3
    core_util_critical_section_enter();
 80010a4:	f000 fde0 	bl	8001c68 <core_util_critical_section_enter>
    remove();
 80010a8:	0020      	movs	r0, r4
 80010aa:	f000 f838 	bl	800111e <_ZN4mbed10TimerEvent6removeEv>
    _delay = t;
 80010ae:	6226      	str	r6, [r4, #32]
 80010b0:	6267      	str	r7, [r4, #36]	; 0x24
    insert_absolute(_delay + ticker_read_us(_ticker_data));
 80010b2:	69a0      	ldr	r0, [r4, #24]
 80010b4:	f000 fbbb 	bl	800182e <ticker_read_us>
 80010b8:	0032      	movs	r2, r6
 80010ba:	003b      	movs	r3, r7
 80010bc:	1812      	adds	r2, r2, r0
 80010be:	414b      	adcs	r3, r1
 80010c0:	0020      	movs	r0, r4
 80010c2:	f000 f821 	bl	8001108 <_ZN4mbed10TimerEvent15insert_absoluteEy>
    core_util_critical_section_exit();
 80010c6:	f000 fdd9 	bl	8001c7c <core_util_critical_section_exit>
}
 80010ca:	bdd0      	pop	{r4, r6, r7, pc}

080010cc <_ZN4mbed10TimerEvent3irqEm>:
{
    ticker_set_handler(_ticker_data, (&TimerEvent::irq));
}

void TimerEvent::irq(uint32_t id)
{
 80010cc:	b510      	push	{r4, lr}
    TimerEvent *timer_event = (TimerEvent *)id;
    timer_event->handler();
 80010ce:	6803      	ldr	r3, [r0, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	4798      	blx	r3
}
 80010d4:	bd10      	pop	{r4, pc}
	...

080010d8 <_ZN4mbed10TimerEventC1Ev>:
TimerEvent::TimerEvent() : event(), _ticker_data(get_us_ticker_data())
 80010d8:	b510      	push	{r4, lr}
 80010da:	0004      	movs	r4, r0
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <_ZN4mbed10TimerEventC1Ev+0x28>)
 80010de:	3308      	adds	r3, #8
 80010e0:	6003      	str	r3, [r0, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	2300      	movs	r3, #0
 80010e6:	6082      	str	r2, [r0, #8]
 80010e8:	60c3      	str	r3, [r0, #12]
 80010ea:	2300      	movs	r3, #0
 80010ec:	6103      	str	r3, [r0, #16]
 80010ee:	6143      	str	r3, [r0, #20]
 80010f0:	f000 fbb0 	bl	8001854 <get_us_ticker_data>
 80010f4:	61a0      	str	r0, [r4, #24]
    ticker_set_handler(_ticker_data, (&TimerEvent::irq));
 80010f6:	4903      	ldr	r1, [pc, #12]	; (8001104 <_ZN4mbed10TimerEventC1Ev+0x2c>)
 80010f8:	f000 fb16 	bl	8001728 <ticker_set_handler>
}
 80010fc:	0020      	movs	r0, r4
 80010fe:	bd10      	pop	{r4, pc}
 8001100:	08005f90 	.word	0x08005f90
 8001104:	080010cd 	.word	0x080010cd

08001108 <_ZN4mbed10TimerEvent15insert_absoluteEy>:
{
    ticker_insert_event(_ticker_data, &event, timestamp, (uint32_t)this);
}

void TimerEvent::insert_absolute(us_timestamp_t timestamp)
{
 8001108:	b510      	push	{r4, lr}
 800110a:	b082      	sub	sp, #8
    ticker_insert_event_us(_ticker_data, &event, timestamp, (uint32_t)this);
 800110c:	6984      	ldr	r4, [r0, #24]
 800110e:	0001      	movs	r1, r0
 8001110:	3108      	adds	r1, #8
 8001112:	9000      	str	r0, [sp, #0]
 8001114:	0020      	movs	r0, r4
 8001116:	f000 fb45 	bl	80017a4 <ticker_insert_event_us>
}
 800111a:	b002      	add	sp, #8
 800111c:	bd10      	pop	{r4, pc}

0800111e <_ZN4mbed10TimerEvent6removeEv>:

void TimerEvent::remove()
{
 800111e:	b510      	push	{r4, lr}
 8001120:	0001      	movs	r1, r0
    ticker_remove_event(_ticker_data, &event);
 8001122:	6980      	ldr	r0, [r0, #24]
 8001124:	3108      	adds	r1, #8
 8001126:	f000 fb67 	bl	80017f8 <ticker_remove_event>
}
 800112a:	bd10      	pop	{r4, pc}

0800112c <_ZN4mbed10TimerEventD1Ev>:
TimerEvent::~TimerEvent()
 800112c:	b510      	push	{r4, lr}
 800112e:	0004      	movs	r4, r0
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <_ZN4mbed10TimerEventD1Ev+0x14>)
 8001132:	3308      	adds	r3, #8
 8001134:	6003      	str	r3, [r0, #0]
    remove();
 8001136:	f7ff fff2 	bl	800111e <_ZN4mbed10TimerEvent6removeEv>
}
 800113a:	0020      	movs	r0, r4
 800113c:	bd10      	pop	{r4, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	08005f90 	.word	0x08005f90

08001144 <_ZN4mbed10FileHandle4tellEv>:
    virtual off_t tell()
 8001144:	b510      	push	{r4, lr}
        return seek(0, SEEK_CUR);
 8001146:	6803      	ldr	r3, [r0, #0]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	2201      	movs	r2, #1
 800114c:	2100      	movs	r1, #0
 800114e:	4798      	blx	r3
    }
 8001150:	bd10      	pop	{r4, pc}

08001152 <_ZN4mbed10FileHandle6rewindEv>:
    virtual void rewind()
 8001152:	b510      	push	{r4, lr}
        seek(0, SEEK_SET);
 8001154:	6803      	ldr	r3, [r0, #0]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	4798      	blx	r3
    }
 800115e:	bd10      	pop	{r4, pc}

08001160 <are_interrupts_enabled>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001160:	f3ef 8310 	mrs	r3, PRIMASK
static bool are_interrupts_enabled(void)
{
#if defined(__CORTEX_A9)
    return ((__get_CPSR() & 0x80) == 0);
#else
    return ((__get_PRIMASK() & 0x1) == 0);
 8001164:	2001      	movs	r0, #1
 8001166:	4018      	ands	r0, r3
 8001168:	4243      	negs	r3, r0
 800116a:	4158      	adcs	r0, r3
 800116c:	b2c0      	uxtb	r0, r0
#endif
}
 800116e:	4770      	bx	lr

08001170 <hal_critical_section_enter>:


MBED_WEAK void hal_critical_section_enter(void)
{
 8001170:	b510      	push	{r4, lr}
    const bool interrupt_state = are_interrupts_enabled();
 8001172:	f7ff fff5 	bl	8001160 <are_interrupts_enabled>
  __ASM volatile ("cpsid i" : : : "memory");
 8001176:	b672      	cpsid	i

    __disable_irq();

    if (state_saved == true) {
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <hal_critical_section_enter+0x1c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d104      	bne.n	800118a <hal_critical_section_enter+0x1a>
        return;
    }

    critical_interrupts_enabled = interrupt_state;
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <hal_critical_section_enter+0x20>)
 8001182:	7018      	strb	r0, [r3, #0]
    state_saved = true;
 8001184:	2201      	movs	r2, #1
 8001186:	4b01      	ldr	r3, [pc, #4]	; (800118c <hal_critical_section_enter+0x1c>)
 8001188:	701a      	strb	r2, [r3, #0]
}
 800118a:	bd10      	pop	{r4, pc}
 800118c:	200009ed 	.word	0x200009ed
 8001190:	200009ec 	.word	0x200009ec

08001194 <hal_critical_section_exit>:
{
#ifndef FEATURE_UVISOR
    // Interrupts must be disabled on invoking an exit from a critical section
    MBED_ASSERT(!are_interrupts_enabled());
#endif
    state_saved = false;
 8001194:	2200      	movs	r2, #0
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <hal_critical_section_exit+0x14>)
 8001198:	701a      	strb	r2, [r3, #0]

    // Restore the IRQs to their state prior to entering the critical section
    if (critical_interrupts_enabled == true) {
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <hal_critical_section_exit+0x18>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d000      	beq.n	80011a4 <hal_critical_section_exit+0x10>
  __ASM volatile ("cpsie i" : : : "memory");
 80011a2:	b662      	cpsie	i
        __enable_irq();
    }
}
 80011a4:	4770      	bx	lr
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	200009ed 	.word	0x200009ed
 80011ac:	200009ec 	.word	0x200009ec

080011b0 <gpio_init_out_ex>:
{
    gpio_init_out_ex(gpio, pin, 0);
}

void gpio_init_out_ex(gpio_t *gpio, PinName pin, int value)
{
 80011b0:	b570      	push	{r4, r5, r6, lr}
 80011b2:	0004      	movs	r4, r0
 80011b4:	000d      	movs	r5, r1
 80011b6:	0016      	movs	r6, r2
    gpio_init(gpio, pin);
 80011b8:	f002 fe14 	bl	8003de4 <gpio_init>
    if (pin != NC) {
 80011bc:	1c6b      	adds	r3, r5, #1
 80011be:	d00c      	beq.n	80011da <gpio_init_out_ex+0x2a>
    uint32_t ll_pin;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    if (value) {
 80011c0:	2e00      	cmp	r6, #0
 80011c2:	d00b      	beq.n	80011dc <gpio_init_out_ex+0x2c>
        *obj->reg_set = obj->mask;
 80011c4:	68a3      	ldr	r3, [r4, #8]
 80011c6:	6822      	ldr	r2, [r4, #0]
 80011c8:	601a      	str	r2, [r3, #0]
        gpio_dir(gpio, PIN_OUTPUT);
 80011ca:	2101      	movs	r1, #1
 80011cc:	0020      	movs	r0, r4
 80011ce:	f002 fe31 	bl	8003e34 <gpio_dir>
        gpio_mode(gpio, mode);
 80011d2:	2100      	movs	r1, #0
 80011d4:	0020      	movs	r0, r4
 80011d6:	f002 fe27 	bl	8003e28 <gpio_mode>
    _gpio_init_out(gpio, pin, PullNone, value);
}
 80011da:	bd70      	pop	{r4, r5, r6, pc}
    } else {
#ifdef GPIO_IP_WITHOUT_BRR
        *obj->reg_clr = obj->mask << 16;
#else
        *obj->reg_clr = obj->mask;
 80011dc:	68e3      	ldr	r3, [r4, #12]
 80011de:	6822      	ldr	r2, [r4, #0]
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e7f2      	b.n	80011ca <gpio_init_out_ex+0x1a>

080011e4 <gpio_init_out>:
{
 80011e4:	b510      	push	{r4, lr}
    gpio_init_out_ex(gpio, pin, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f7ff ffe2 	bl	80011b0 <gpio_init_out_ex>
}
 80011ec:	bd10      	pop	{r4, pc}
	...

080011f0 <pinmap_pinout>:
 */
#include "hal/pinmap.h"
#include "platform/mbed_error.h"

void pinmap_pinout(PinName pin, const PinMap *map)
{
 80011f0:	b510      	push	{r4, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	0004      	movs	r4, r0
    if (pin == NC) {
 80011f6:	1c43      	adds	r3, r0, #1
 80011f8:	d017      	beq.n	800122a <pinmap_pinout+0x3a>
        return;
    }

    while (map->pin != NC) {
 80011fa:	2200      	movs	r2, #0
 80011fc:	5e8b      	ldrsh	r3, [r1, r2]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	d00c      	beq.n	800121c <pinmap_pinout+0x2c>
        if (map->pin == pin) {
 8001202:	429c      	cmp	r4, r3
 8001204:	d001      	beq.n	800120a <pinmap_pinout+0x1a>
            pin_function(pin, map->function);

            pin_mode(pin, PullNone);
            return;
        }
        map++;
 8001206:	310c      	adds	r1, #12
 8001208:	e7f7      	b.n	80011fa <pinmap_pinout+0xa>
            pin_function(pin, map->function);
 800120a:	6889      	ldr	r1, [r1, #8]
 800120c:	0020      	movs	r0, r4
 800120e:	f002 fe69 	bl	8003ee4 <pin_function>
            pin_mode(pin, PullNone);
 8001212:	2100      	movs	r1, #0
 8001214:	0020      	movs	r0, r4
 8001216:	f002 feef 	bl	8003ff8 <pin_mode>
            return;
 800121a:	e006      	b.n	800122a <pinmap_pinout+0x3a>
    }
    MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "could not pinout", pin);
 800121c:	2300      	movs	r3, #0
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	0022      	movs	r2, r4
 8001222:	2100      	movs	r1, #0
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <pinmap_pinout+0x40>)
 8001226:	f000 fdbf 	bl	8001da8 <mbed_error>
}
 800122a:	b002      	add	sp, #8
 800122c:	bd10      	pop	{r4, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	80010130 	.word	0x80010130

08001234 <pinmap_merge>:

uint32_t pinmap_merge(uint32_t a, uint32_t b)
{
 8001234:	b500      	push	{lr}
 8001236:	b083      	sub	sp, #12
    // both are the same (inc both NC)
    if (a == b) {
 8001238:	4288      	cmp	r0, r1
 800123a:	d00c      	beq.n	8001256 <pinmap_merge+0x22>
        return a;
    }

    // one (or both) is not connected
    if (a == (uint32_t)NC) {
 800123c:	1c43      	adds	r3, r0, #1
 800123e:	d00c      	beq.n	800125a <pinmap_merge+0x26>
        return b;
    }
    if (b == (uint32_t)NC) {
 8001240:	1c4b      	adds	r3, r1, #1
 8001242:	d008      	beq.n	8001256 <pinmap_merge+0x22>
        return a;
    }

    // mis-match error case
    MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "pinmap mis-match", a);
 8001244:	2300      	movs	r3, #0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	0002      	movs	r2, r0
 800124a:	2100      	movs	r1, #0
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <pinmap_merge+0x2c>)
 800124e:	f000 fdab 	bl	8001da8 <mbed_error>
    return (uint32_t)NC;
 8001252:	2001      	movs	r0, #1
 8001254:	4240      	negs	r0, r0
}
 8001256:	b003      	add	sp, #12
 8001258:	bd00      	pop	{pc}
        return b;
 800125a:	0008      	movs	r0, r1
 800125c:	e7fb      	b.n	8001256 <pinmap_merge+0x22>
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	80010130 	.word	0x80010130

08001264 <pinmap_find_peripheral>:

uint32_t pinmap_find_peripheral(PinName pin, const PinMap *map)
{
    while (map->pin != NC) {
 8001264:	2200      	movs	r2, #0
 8001266:	5e8b      	ldrsh	r3, [r1, r2]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	d005      	beq.n	8001278 <pinmap_find_peripheral+0x14>
        if (map->pin == pin) {
 800126c:	4283      	cmp	r3, r0
 800126e:	d001      	beq.n	8001274 <pinmap_find_peripheral+0x10>
            return map->peripheral;
        }
        map++;
 8001270:	310c      	adds	r1, #12
 8001272:	e7f7      	b.n	8001264 <pinmap_find_peripheral>
            return map->peripheral;
 8001274:	6848      	ldr	r0, [r1, #4]
 8001276:	e001      	b.n	800127c <pinmap_find_peripheral+0x18>
    }
    return (uint32_t)NC;
 8001278:	2001      	movs	r0, #1
 800127a:	4240      	negs	r0, r0
}
 800127c:	4770      	bx	lr
	...

08001280 <pinmap_peripheral>:

uint32_t pinmap_peripheral(PinName pin, const PinMap *map)
{
 8001280:	b510      	push	{r4, lr}
 8001282:	b082      	sub	sp, #8
    uint32_t peripheral = (uint32_t)NC;

    if (pin == (PinName)NC) {
 8001284:	1c43      	adds	r3, r0, #1
 8001286:	d104      	bne.n	8001292 <pinmap_peripheral+0x12>
        return (uint32_t)NC;
 8001288:	2401      	movs	r4, #1
 800128a:	4264      	negs	r4, r4
    peripheral = pinmap_find_peripheral(pin, map);
    if ((uint32_t)NC == peripheral) { // no mapping available
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "pinmap not found for peripheral", peripheral);
    }
    return peripheral;
}
 800128c:	0020      	movs	r0, r4
 800128e:	b002      	add	sp, #8
 8001290:	bd10      	pop	{r4, pc}
    peripheral = pinmap_find_peripheral(pin, map);
 8001292:	f7ff ffe7 	bl	8001264 <pinmap_find_peripheral>
 8001296:	0004      	movs	r4, r0
    if ((uint32_t)NC == peripheral) { // no mapping available
 8001298:	1c43      	adds	r3, r0, #1
 800129a:	d1f7      	bne.n	800128c <pinmap_peripheral+0xc>
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "pinmap not found for peripheral", peripheral);
 800129c:	2300      	movs	r3, #0
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	0002      	movs	r2, r0
 80012a2:	2100      	movs	r1, #0
 80012a4:	4801      	ldr	r0, [pc, #4]	; (80012ac <pinmap_peripheral+0x2c>)
 80012a6:	f000 fd7f 	bl	8001da8 <mbed_error>
 80012aa:	e7ef      	b.n	800128c <pinmap_peripheral+0xc>
 80012ac:	80010130 	.word	0x80010130

080012b0 <pinmap_find_function>:

uint32_t pinmap_find_function(PinName pin, const PinMap *map)
{
    while (map->pin != NC) {
 80012b0:	2200      	movs	r2, #0
 80012b2:	5e8b      	ldrsh	r3, [r1, r2]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	d005      	beq.n	80012c4 <pinmap_find_function+0x14>
        if (map->pin == pin) {
 80012b8:	4283      	cmp	r3, r0
 80012ba:	d001      	beq.n	80012c0 <pinmap_find_function+0x10>
            return map->function;
        }
        map++;
 80012bc:	310c      	adds	r1, #12
 80012be:	e7f7      	b.n	80012b0 <pinmap_find_function>
            return map->function;
 80012c0:	6888      	ldr	r0, [r1, #8]
 80012c2:	e001      	b.n	80012c8 <pinmap_find_function+0x18>
    }
    return (uint32_t)NC;
 80012c4:	2001      	movs	r0, #1
 80012c6:	4240      	negs	r0, r0
}
 80012c8:	4770      	bx	lr
	...

080012cc <pinmap_function>:

uint32_t pinmap_function(PinName pin, const PinMap *map)
{
 80012cc:	b510      	push	{r4, lr}
 80012ce:	b082      	sub	sp, #8
    uint32_t function = (uint32_t)NC;

    if (pin == (PinName)NC) {
 80012d0:	1c43      	adds	r3, r0, #1
 80012d2:	d104      	bne.n	80012de <pinmap_function+0x12>
        return (uint32_t)NC;
 80012d4:	2401      	movs	r4, #1
 80012d6:	4264      	negs	r4, r4
    function = pinmap_find_function(pin, map);
    if ((uint32_t)NC == function) { // no mapping available
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "pinmap not found for function", function);
    }
    return function;
}
 80012d8:	0020      	movs	r0, r4
 80012da:	b002      	add	sp, #8
 80012dc:	bd10      	pop	{r4, pc}
    function = pinmap_find_function(pin, map);
 80012de:	f7ff ffe7 	bl	80012b0 <pinmap_find_function>
 80012e2:	0004      	movs	r4, r0
    if ((uint32_t)NC == function) { // no mapping available
 80012e4:	1c43      	adds	r3, r0, #1
 80012e6:	d1f7      	bne.n	80012d8 <pinmap_function+0xc>
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "pinmap not found for function", function);
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	0002      	movs	r2, r0
 80012ee:	2100      	movs	r1, #0
 80012f0:	4801      	ldr	r0, [pc, #4]	; (80012f8 <pinmap_function+0x2c>)
 80012f2:	f000 fd59 	bl	8001da8 <mbed_error>
 80012f6:	e7ef      	b.n	80012d8 <pinmap_function+0xc>
 80012f8:	80010130 	.word	0x80010130

080012fc <sleep_manager_lock_deep_sleep_internal>:
}

#endif // MBED_SLEEP_TRACING_ENABLED

void sleep_manager_lock_deep_sleep_internal(void)
{
 80012fc:	b500      	push	{lr}
 80012fe:	b083      	sub	sp, #12
    core_util_critical_section_enter();
 8001300:	f000 fcb2 	bl	8001c68 <core_util_critical_section_enter>
    if (deep_sleep_lock == USHRT_MAX) {
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <sleep_manager_lock_deep_sleep_internal+0x38>)
 8001306:	881a      	ldrh	r2, [r3, #0]
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <sleep_manager_lock_deep_sleep_internal+0x3c>)
 800130a:	429a      	cmp	r2, r3
 800130c:	d007      	beq.n	800131e <sleep_manager_lock_deep_sleep_internal+0x22>
        core_util_critical_section_exit();
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_HAL, MBED_ERROR_CODE_OVERFLOW), "DeepSleepLock overflow (> USHRT_MAX)", deep_sleep_lock);
    }
    core_util_atomic_incr_u16(&deep_sleep_lock, 1);
 800130e:	2101      	movs	r1, #1
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <sleep_manager_lock_deep_sleep_internal+0x38>)
 8001312:	f000 fcc5 	bl	8001ca0 <core_util_atomic_incr_u16>
    core_util_critical_section_exit();
 8001316:	f000 fcb1 	bl	8001c7c <core_util_critical_section_exit>
}
 800131a:	b003      	add	sp, #12
 800131c:	bd00      	pop	{pc}
        core_util_critical_section_exit();
 800131e:	f000 fcad 	bl	8001c7c <core_util_critical_section_exit>
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_HAL, MBED_ERROR_CODE_OVERFLOW), "DeepSleepLock overflow (> USHRT_MAX)", deep_sleep_lock);
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <sleep_manager_lock_deep_sleep_internal+0x38>)
 8001324:	881a      	ldrh	r2, [r3, #0]
 8001326:	2300      	movs	r3, #0
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2100      	movs	r1, #0
 800132c:	4803      	ldr	r0, [pc, #12]	; (800133c <sleep_manager_lock_deep_sleep_internal+0x40>)
 800132e:	f000 fd3b 	bl	8001da8 <mbed_error>
 8001332:	e7ec      	b.n	800130e <sleep_manager_lock_deep_sleep_internal+0x12>
 8001334:	200009ee 	.word	0x200009ee
 8001338:	0000ffff 	.word	0x0000ffff
 800133c:	80040123 	.word	0x80040123

08001340 <sleep_manager_unlock_deep_sleep_internal>:

void sleep_manager_unlock_deep_sleep_internal(void)
{
 8001340:	b500      	push	{lr}
 8001342:	b083      	sub	sp, #12
    core_util_critical_section_enter();
 8001344:	f000 fc90 	bl	8001c68 <core_util_critical_section_enter>
    if (deep_sleep_lock == 0) {
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <sleep_manager_unlock_deep_sleep_internal+0x38>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d007      	beq.n	8001360 <sleep_manager_unlock_deep_sleep_internal+0x20>
        core_util_critical_section_exit();
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_HAL, MBED_ERROR_CODE_UNDERFLOW), "DeepSleepLock underflow (< 0)", deep_sleep_lock);
    }
    core_util_atomic_decr_u16(&deep_sleep_lock, 1);
 8001350:	2101      	movs	r1, #1
 8001352:	4809      	ldr	r0, [pc, #36]	; (8001378 <sleep_manager_unlock_deep_sleep_internal+0x38>)
 8001354:	f000 fcb1 	bl	8001cba <core_util_atomic_decr_u16>
    core_util_critical_section_exit();
 8001358:	f000 fc90 	bl	8001c7c <core_util_critical_section_exit>
}
 800135c:	b003      	add	sp, #12
 800135e:	bd00      	pop	{pc}
        core_util_critical_section_exit();
 8001360:	f000 fc8c 	bl	8001c7c <core_util_critical_section_exit>
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_HAL, MBED_ERROR_CODE_UNDERFLOW), "DeepSleepLock underflow (< 0)", deep_sleep_lock);
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <sleep_manager_unlock_deep_sleep_internal+0x38>)
 8001366:	881a      	ldrh	r2, [r3, #0]
 8001368:	2300      	movs	r3, #0
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2100      	movs	r1, #0
 800136e:	4803      	ldr	r0, [pc, #12]	; (800137c <sleep_manager_unlock_deep_sleep_internal+0x3c>)
 8001370:	f000 fd1a 	bl	8001da8 <mbed_error>
 8001374:	e7ec      	b.n	8001350 <sleep_manager_unlock_deep_sleep_internal+0x10>
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	200009ee 	.word	0x200009ee
 800137c:	80040124 	.word	0x80040124

08001380 <set_handler>:
/**
 * Set the event handler function of a ticker instance.
 */
static void set_handler(const ticker_data_t *const ticker, ticker_event_handler handler)
{
    ticker->queue->event_handler = handler;
 8001380:	6843      	ldr	r3, [r0, #4]
 8001382:	6019      	str	r1, [r3, #0]
}
 8001384:	4770      	bx	lr
	...

08001388 <update_present_time>:

/**
 * Update the present timestamp value of a ticker.
 */
static void update_present_time(const ticker_data_t *const ticker)
{
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	46c6      	mov	lr, r8
 800138c:	b500      	push	{lr}
 800138e:	b084      	sub	sp, #16
 8001390:	0004      	movs	r4, r0
    ticker_event_queue_t *queue = ticker->queue;
 8001392:	6846      	ldr	r6, [r0, #4]
    uint32_t ticker_time = ticker->interface->read();
 8001394:	6803      	ldr	r3, [r0, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4798      	blx	r3
    if (ticker_time == ticker->queue->tick_last_read) {
 800139a:	6863      	ldr	r3, [r4, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	4298      	cmp	r0, r3
 80013a0:	d050      	beq.n	8001444 <update_present_time+0xbc>
        // No work to do
        return;
    }

    uint64_t elapsed_ticks = (ticker_time - queue->tick_last_read) & queue->bitmask;
 80013a2:	6a33      	ldr	r3, [r6, #32]
 80013a4:	1ac3      	subs	r3, r0, r3
 80013a6:	68f2      	ldr	r2, [r6, #12]
 80013a8:	401a      	ands	r2, r3
 80013aa:	0014      	movs	r4, r2
 80013ac:	2500      	movs	r5, #0
    queue->tick_last_read = ticker_time;
 80013ae:	6230      	str	r0, [r6, #32]

    uint64_t elapsed_us;
    if (1000000 == queue->frequency) {
 80013b0:	68b3      	ldr	r3, [r6, #8]
 80013b2:	4698      	mov	r8, r3
 80013b4:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <update_present_time+0x158>)
 80013b6:	4598      	cmp	r8, r3
 80013b8:	d03e      	beq.n	8001438 <update_present_time+0xb0>
        // Optimized for 1MHz

        elapsed_us = elapsed_ticks;
    } else if (0 != queue->frequency_shifts) {
 80013ba:	233a      	movs	r3, #58	; 0x3a
 80013bc:	5cf7      	ldrb	r7, [r6, r3]
 80013be:	2f00      	cmp	r7, #0
 80013c0:	d05b      	beq.n	800147a <update_present_time+0xf2>
        // Optimized for frequencies divisible by 2
        uint64_t us_x_ticks = elapsed_ticks * 1000000;
 80013c2:	4a47      	ldr	r2, [pc, #284]	; (80014e0 <update_present_time+0x158>)
 80013c4:	2300      	movs	r3, #0
 80013c6:	0020      	movs	r0, r4
 80013c8:	0029      	movs	r1, r5
 80013ca:	f7fe ff5b 	bl	8000284 <__aeabi_lmul>
 80013ce:	9000      	str	r0, [sp, #0]
 80013d0:	9101      	str	r1, [sp, #4]
        elapsed_us = us_x_ticks >> queue->frequency_shifts;
 80013d2:	2320      	movs	r3, #32
 80013d4:	425b      	negs	r3, r3
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	d438      	bmi.n	800144c <update_present_time+0xc4>
 80013da:	000a      	movs	r2, r1
 80013dc:	40da      	lsrs	r2, r3
 80013de:	0014      	movs	r4, r2
 80013e0:	9b01      	ldr	r3, [sp, #4]
 80013e2:	40fb      	lsrs	r3, r7
 80013e4:	001d      	movs	r5, r3

        // Update remainder
        queue->tick_remainder += us_x_ticks - (elapsed_us << queue->frequency_shifts);
 80013e6:	003b      	movs	r3, r7
 80013e8:	3b20      	subs	r3, #32
 80013ea:	469c      	mov	ip, r3
 80013ec:	d43a      	bmi.n	8001464 <update_present_time+0xdc>
 80013ee:	0021      	movs	r1, r4
 80013f0:	4660      	mov	r0, ip
 80013f2:	4081      	lsls	r1, r0
 80013f4:	000b      	movs	r3, r1
 80013f6:	0021      	movs	r1, r4
 80013f8:	40b9      	lsls	r1, r7
 80013fa:	000a      	movs	r2, r1
 80013fc:	9800      	ldr	r0, [sp, #0]
 80013fe:	9901      	ldr	r1, [sp, #4]
 8001400:	1a80      	subs	r0, r0, r2
 8001402:	4199      	sbcs	r1, r3
 8001404:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8001406:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001408:	1880      	adds	r0, r0, r2
 800140a:	4159      	adcs	r1, r3
 800140c:	9000      	str	r0, [sp, #0]
 800140e:	9101      	str	r1, [sp, #4]
 8001410:	0002      	movs	r2, r0
 8001412:	000b      	movs	r3, r1
 8001414:	62b2      	str	r2, [r6, #40]	; 0x28
 8001416:	62f3      	str	r3, [r6, #44]	; 0x2c
        if (queue->tick_remainder >= queue->frequency) {
 8001418:	4642      	mov	r2, r8
 800141a:	2300      	movs	r3, #0
 800141c:	428b      	cmp	r3, r1
 800141e:	d101      	bne.n	8001424 <update_present_time+0x9c>
 8001420:	4282      	cmp	r2, r0
 8001422:	d809      	bhi.n	8001438 <update_present_time+0xb0>
            elapsed_us += 1;
 8001424:	2001      	movs	r0, #1
 8001426:	2100      	movs	r1, #0
 8001428:	1824      	adds	r4, r4, r0
 800142a:	414d      	adcs	r5, r1
            queue->tick_remainder -= queue->frequency;
 800142c:	9800      	ldr	r0, [sp, #0]
 800142e:	9901      	ldr	r1, [sp, #4]
 8001430:	1a80      	subs	r0, r0, r2
 8001432:	4199      	sbcs	r1, r3
 8001434:	62b0      	str	r0, [r6, #40]	; 0x28
 8001436:	62f1      	str	r1, [r6, #44]	; 0x2c
            queue->tick_remainder -= queue->frequency;
        }
    }

    // Update current time
    queue->present_time += elapsed_us;
 8001438:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800143a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800143c:	18a4      	adds	r4, r4, r2
 800143e:	415d      	adcs	r5, r3
 8001440:	6334      	str	r4, [r6, #48]	; 0x30
 8001442:	6375      	str	r5, [r6, #52]	; 0x34
}
 8001444:	b004      	add	sp, #16
 8001446:	bc04      	pop	{r2}
 8001448:	4690      	mov	r8, r2
 800144a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        elapsed_us = us_x_ticks >> queue->frequency_shifts;
 800144c:	2320      	movs	r3, #32
 800144e:	1bdb      	subs	r3, r3, r7
 8001450:	9800      	ldr	r0, [sp, #0]
 8001452:	9901      	ldr	r1, [sp, #4]
 8001454:	000a      	movs	r2, r1
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	0002      	movs	r2, r0
 800145c:	40fa      	lsrs	r2, r7
 800145e:	0014      	movs	r4, r2
 8001460:	431c      	orrs	r4, r3
 8001462:	e7bd      	b.n	80013e0 <update_present_time+0x58>
        queue->tick_remainder += us_x_ticks - (elapsed_us << queue->frequency_shifts);
 8001464:	2320      	movs	r3, #32
 8001466:	1bdb      	subs	r3, r3, r7
 8001468:	0022      	movs	r2, r4
 800146a:	40da      	lsrs	r2, r3
 800146c:	4694      	mov	ip, r2
 800146e:	0029      	movs	r1, r5
 8001470:	40b9      	lsls	r1, r7
 8001472:	000b      	movs	r3, r1
 8001474:	4661      	mov	r1, ip
 8001476:	430b      	orrs	r3, r1
 8001478:	e7bd      	b.n	80013f6 <update_present_time+0x6e>
        uint64_t us_x_ticks = elapsed_ticks * 1000000;
 800147a:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <update_present_time+0x158>)
 800147c:	2300      	movs	r3, #0
 800147e:	0020      	movs	r0, r4
 8001480:	0029      	movs	r1, r5
 8001482:	f7fe feff 	bl	8000284 <__aeabi_lmul>
        elapsed_us = us_x_ticks / queue->frequency;
 8001486:	4643      	mov	r3, r8
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2300      	movs	r3, #0
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	9a00      	ldr	r2, [sp, #0]
 8001490:	9b01      	ldr	r3, [sp, #4]
 8001492:	9002      	str	r0, [sp, #8]
 8001494:	9103      	str	r1, [sp, #12]
 8001496:	f7fe fed5 	bl	8000244 <__aeabi_uldivmod>
 800149a:	0004      	movs	r4, r0
 800149c:	000d      	movs	r5, r1
        queue->tick_remainder += us_x_ticks - elapsed_us * queue->frequency;
 800149e:	0002      	movs	r2, r0
 80014a0:	000b      	movs	r3, r1
 80014a2:	9800      	ldr	r0, [sp, #0]
 80014a4:	9901      	ldr	r1, [sp, #4]
 80014a6:	f7fe feed 	bl	8000284 <__aeabi_lmul>
 80014aa:	9a02      	ldr	r2, [sp, #8]
 80014ac:	9b03      	ldr	r3, [sp, #12]
 80014ae:	1a12      	subs	r2, r2, r0
 80014b0:	418b      	sbcs	r3, r1
 80014b2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80014b4:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80014b6:	1812      	adds	r2, r2, r0
 80014b8:	414b      	adcs	r3, r1
 80014ba:	62b2      	str	r2, [r6, #40]	; 0x28
 80014bc:	62f3      	str	r3, [r6, #44]	; 0x2c
        if (queue->tick_remainder >= queue->frequency) {
 80014be:	9800      	ldr	r0, [sp, #0]
 80014c0:	9901      	ldr	r1, [sp, #4]
 80014c2:	4299      	cmp	r1, r3
 80014c4:	d101      	bne.n	80014ca <update_present_time+0x142>
 80014c6:	4290      	cmp	r0, r2
 80014c8:	d8b6      	bhi.n	8001438 <update_present_time+0xb0>
            elapsed_us += 1;
 80014ca:	2001      	movs	r0, #1
 80014cc:	2100      	movs	r1, #0
 80014ce:	1824      	adds	r4, r4, r0
 80014d0:	414d      	adcs	r5, r1
            queue->tick_remainder -= queue->frequency;
 80014d2:	9800      	ldr	r0, [sp, #0]
 80014d4:	9901      	ldr	r1, [sp, #4]
 80014d6:	1a12      	subs	r2, r2, r0
 80014d8:	418b      	sbcs	r3, r1
 80014da:	62b2      	str	r2, [r6, #40]	; 0x28
 80014dc:	62f3      	str	r3, [r6, #44]	; 0x2c
 80014de:	e7ab      	b.n	8001438 <update_present_time+0xb0>
 80014e0:	000f4240 	.word	0x000f4240

080014e4 <compute_tick>:

/**
 * Given the absolute timestamp compute the hal tick timestamp.
 */
static timestamp_t compute_tick(const ticker_data_t *const ticker, us_timestamp_t timestamp)
{
 80014e4:	b570      	push	{r4, r5, r6, lr}
    ticker_event_queue_t *queue = ticker->queue;
 80014e6:	6844      	ldr	r4, [r0, #4]
    us_timestamp_t delta_us = timestamp - queue->present_time;
 80014e8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80014ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014ec:	1a12      	subs	r2, r2, r0
 80014ee:	418b      	sbcs	r3, r1
 80014f0:	0010      	movs	r0, r2
 80014f2:	0019      	movs	r1, r3

    timestamp_t delta = ticker->queue->max_delta;
 80014f4:	6925      	ldr	r5, [r4, #16]
    if (delta_us <=  ticker->queue->max_delta_us) {
 80014f6:	69a2      	ldr	r2, [r4, #24]
 80014f8:	69e3      	ldr	r3, [r4, #28]
 80014fa:	4299      	cmp	r1, r3
 80014fc:	d831      	bhi.n	8001562 <compute_tick+0x7e>
 80014fe:	d017      	beq.n	8001530 <compute_tick+0x4c>
        // Checking max_delta_us ensures the operation will not overflow

        if (1000000 == queue->frequency) {
 8001500:	68a2      	ldr	r2, [r4, #8]
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <compute_tick+0x90>)
 8001504:	429a      	cmp	r2, r3
 8001506:	d016      	beq.n	8001536 <compute_tick+0x52>

            delta = delta_us;
            if (delta > ticker->queue->max_delta) {
                delta = ticker->queue->max_delta;
            }
        } else if (0 != queue->frequency_shifts) {
 8001508:	233a      	movs	r3, #58	; 0x3a
 800150a:	5ce3      	ldrb	r3, [r4, r3]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d01f      	beq.n	8001550 <compute_tick+0x6c>
            // Optimized frequencies divisible by 2

            delta = (delta_us << ticker->queue->frequency_shifts) / 1000000;
 8001510:	2220      	movs	r2, #32
 8001512:	4252      	negs	r2, r2
 8001514:	189a      	adds	r2, r3, r2
 8001516:	d412      	bmi.n	800153e <compute_tick+0x5a>
 8001518:	0006      	movs	r6, r0
 800151a:	4096      	lsls	r6, r2
 800151c:	4098      	lsls	r0, r3
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <compute_tick+0x90>)
 8001520:	2300      	movs	r3, #0
 8001522:	0031      	movs	r1, r6
 8001524:	f7fe fe8e 	bl	8000244 <__aeabi_uldivmod>
            if (delta > ticker->queue->max_delta) {
 8001528:	4285      	cmp	r5, r0
 800152a:	d31a      	bcc.n	8001562 <compute_tick+0x7e>
            delta = (delta_us << ticker->queue->frequency_shifts) / 1000000;
 800152c:	0005      	movs	r5, r0
 800152e:	e018      	b.n	8001562 <compute_tick+0x7e>
    if (delta_us <=  ticker->queue->max_delta_us) {
 8001530:	4290      	cmp	r0, r2
 8001532:	d9e5      	bls.n	8001500 <compute_tick+0x1c>
 8001534:	e015      	b.n	8001562 <compute_tick+0x7e>
            if (delta > ticker->queue->max_delta) {
 8001536:	4285      	cmp	r5, r0
 8001538:	d313      	bcc.n	8001562 <compute_tick+0x7e>
            delta = delta_us;
 800153a:	0005      	movs	r5, r0
 800153c:	e011      	b.n	8001562 <compute_tick+0x7e>
            delta = (delta_us << ticker->queue->frequency_shifts) / 1000000;
 800153e:	2220      	movs	r2, #32
 8001540:	1ad2      	subs	r2, r2, r3
 8001542:	0006      	movs	r6, r0
 8001544:	40d6      	lsrs	r6, r2
 8001546:	0032      	movs	r2, r6
 8001548:	000e      	movs	r6, r1
 800154a:	409e      	lsls	r6, r3
 800154c:	4316      	orrs	r6, r2
 800154e:	e7e5      	b.n	800151c <compute_tick+0x38>
                delta = ticker->queue->max_delta;
            }
        } else {
            // General case

            delta = delta_us * queue->frequency / 1000000;
 8001550:	2300      	movs	r3, #0
 8001552:	f7fe fe97 	bl	8000284 <__aeabi_lmul>
 8001556:	4a07      	ldr	r2, [pc, #28]	; (8001574 <compute_tick+0x90>)
 8001558:	2300      	movs	r3, #0
 800155a:	f7fe fe73 	bl	8000244 <__aeabi_uldivmod>
            if (delta > ticker->queue->max_delta) {
 800155e:	4285      	cmp	r5, r0
 8001560:	d205      	bcs.n	800156e <compute_tick+0x8a>
                delta = ticker->queue->max_delta;
            }
        }
    }
    return (queue->tick_last_read + delta) & queue->bitmask;
 8001562:	6a23      	ldr	r3, [r4, #32]
 8001564:	469c      	mov	ip, r3
 8001566:	4465      	add	r5, ip
 8001568:	68e0      	ldr	r0, [r4, #12]
 800156a:	4028      	ands	r0, r5
}
 800156c:	bd70      	pop	{r4, r5, r6, pc}
            delta = delta_us * queue->frequency / 1000000;
 800156e:	0005      	movs	r5, r0
 8001570:	e7f7      	b.n	8001562 <compute_tick+0x7e>
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	000f4240 	.word	0x000f4240

08001578 <_ticker_match_interval_passed>:
/**
 * Return 1 if the tick has incremented to or past match_tick, otherwise 0.
 */
int _ticker_match_interval_passed(timestamp_t prev_tick, timestamp_t cur_tick, timestamp_t match_tick)
{
    if (match_tick > prev_tick) {
 8001578:	4282      	cmp	r2, r0
 800157a:	d905      	bls.n	8001588 <_ticker_match_interval_passed+0x10>
        return (cur_tick >= match_tick) || (cur_tick < prev_tick);
 800157c:	428a      	cmp	r2, r1
 800157e:	d909      	bls.n	8001594 <_ticker_match_interval_passed+0x1c>
 8001580:	4288      	cmp	r0, r1
 8001582:	d909      	bls.n	8001598 <_ticker_match_interval_passed+0x20>
 8001584:	2001      	movs	r0, #1
 8001586:	e00a      	b.n	800159e <_ticker_match_interval_passed+0x26>
    } else {
        return (cur_tick < prev_tick) && (cur_tick >= match_tick);
 8001588:	4288      	cmp	r0, r1
 800158a:	d907      	bls.n	800159c <_ticker_match_interval_passed+0x24>
 800158c:	428a      	cmp	r2, r1
 800158e:	d907      	bls.n	80015a0 <_ticker_match_interval_passed+0x28>
 8001590:	2000      	movs	r0, #0
 8001592:	e004      	b.n	800159e <_ticker_match_interval_passed+0x26>
        return (cur_tick >= match_tick) || (cur_tick < prev_tick);
 8001594:	2001      	movs	r0, #1
 8001596:	e002      	b.n	800159e <_ticker_match_interval_passed+0x26>
 8001598:	2000      	movs	r0, #0
 800159a:	e000      	b.n	800159e <_ticker_match_interval_passed+0x26>
        return (cur_tick < prev_tick) && (cur_tick >= match_tick);
 800159c:	2000      	movs	r0, #0
    }
}
 800159e:	4770      	bx	lr
        return (cur_tick < prev_tick) && (cur_tick >= match_tick);
 80015a0:	2001      	movs	r0, #1
 80015a2:	e7fc      	b.n	800159e <_ticker_match_interval_passed+0x26>

080015a4 <schedule_interrupt>:
 * @note If there is no event in the queue then the interrupt is scheduled to
 * in ticker.queue.max_delta. This is necessary to keep track
 * of the timer overflow.
 */
static void schedule_interrupt(const ticker_data_t *const ticker)
{
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	0004      	movs	r4, r0
    ticker_event_queue_t *queue = ticker->queue;
 80015a8:	6845      	ldr	r5, [r0, #4]
    if (ticker->queue->dispatching) {
 80015aa:	2339      	movs	r3, #57	; 0x39
 80015ac:	5ceb      	ldrb	r3, [r5, r3]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d000      	beq.n	80015b4 <schedule_interrupt+0x10>
    } else {
        uint32_t match_tick =
            (queue->tick_last_read + queue->max_delta) & queue->bitmask;
        ticker->interface->set_interrupt(match_tick);
    }
}
 80015b2:	bd70      	pop	{r4, r5, r6, pc}
    update_present_time(ticker);
 80015b4:	f7ff fee8 	bl	8001388 <update_present_time>
    if (ticker->queue->head) {
 80015b8:	6862      	ldr	r2, [r4, #4]
 80015ba:	6853      	ldr	r3, [r2, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d029      	beq.n	8001614 <schedule_interrupt+0x70>
        us_timestamp_t present = ticker->queue->present_time;
 80015c0:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80015c2:	6b51      	ldr	r1, [r2, #52]	; 0x34
        us_timestamp_t match_time = ticker->queue->head->timestamp;
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
        if (match_time <= present) {
 80015c8:	428b      	cmp	r3, r1
 80015ca:	d917      	bls.n	80015fc <schedule_interrupt+0x58>
        timestamp_t match_tick = compute_tick(ticker, match_time);
 80015cc:	0020      	movs	r0, r4
 80015ce:	f7ff ff89 	bl	80014e4 <compute_tick>
 80015d2:	0006      	movs	r6, r0
        if (match_tick == queue->tick_last_read) {
 80015d4:	6a2b      	ldr	r3, [r5, #32]
 80015d6:	4298      	cmp	r0, r3
 80015d8:	d018      	beq.n	800160c <schedule_interrupt+0x68>
        ticker->interface->set_interrupt(match_tick);
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	4798      	blx	r3
        timestamp_t cur_tick = ticker->interface->read();
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4798      	blx	r3
 80015e6:	0001      	movs	r1, r0
        if (_ticker_match_interval_passed(queue->tick_last_read, cur_tick, match_tick)) {
 80015e8:	6a28      	ldr	r0, [r5, #32]
 80015ea:	0032      	movs	r2, r6
 80015ec:	f7ff ffc4 	bl	8001578 <_ticker_match_interval_passed>
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d0de      	beq.n	80015b2 <schedule_interrupt+0xe>
            ticker->interface->fire_interrupt();
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	4798      	blx	r3
 80015fa:	e7da      	b.n	80015b2 <schedule_interrupt+0xe>
        if (match_time <= present) {
 80015fc:	428b      	cmp	r3, r1
 80015fe:	d101      	bne.n	8001604 <schedule_interrupt+0x60>
 8001600:	4282      	cmp	r2, r0
 8001602:	d8e3      	bhi.n	80015cc <schedule_interrupt+0x28>
            ticker->interface->fire_interrupt();
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	4798      	blx	r3
            return;
 800160a:	e7d2      	b.n	80015b2 <schedule_interrupt+0xe>
            ticker->interface->fire_interrupt();
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	4798      	blx	r3
            return;
 8001612:	e7ce      	b.n	80015b2 <schedule_interrupt+0xe>
            (queue->tick_last_read + queue->max_delta) & queue->bitmask;
 8001614:	6a2b      	ldr	r3, [r5, #32]
 8001616:	692a      	ldr	r2, [r5, #16]
 8001618:	4694      	mov	ip, r2
 800161a:	4463      	add	r3, ip
 800161c:	68e8      	ldr	r0, [r5, #12]
        uint32_t match_tick =
 800161e:	4018      	ands	r0, r3
        ticker->interface->set_interrupt(match_tick);
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	4798      	blx	r3
 8001626:	e7c4      	b.n	80015b2 <schedule_interrupt+0xe>

08001628 <initialize>:
{
 8001628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162a:	46ce      	mov	lr, r9
 800162c:	4647      	mov	r7, r8
 800162e:	b580      	push	{r7, lr}
 8001630:	b083      	sub	sp, #12
 8001632:	0005      	movs	r5, r0
    if (ticker->queue->initialized) {
 8001634:	2338      	movs	r3, #56	; 0x38
 8001636:	6842      	ldr	r2, [r0, #4]
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d004      	beq.n	8001648 <initialize+0x20>
}
 800163e:	b003      	add	sp, #12
 8001640:	bc0c      	pop	{r2, r3}
 8001642:	4690      	mov	r8, r2
 8001644:	4699      	mov	r9, r3
 8001646:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ticker->interface->init();
 8001648:	6803      	ldr	r3, [r0, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4798      	blx	r3
    const ticker_info_t *info = ticker->interface->get_info();
 800164e:	682b      	ldr	r3, [r5, #0]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	4798      	blx	r3
    uint32_t frequency = info->frequency;
 8001654:	6806      	ldr	r6, [r0, #0]
    if (info->frequency == 0) {
 8001656:	2e00      	cmp	r6, #0
 8001658:	d100      	bne.n	800165c <initialize+0x34>
        frequency = 1000000;
 800165a:	4e32      	ldr	r6, [pc, #200]	; (8001724 <initialize+0xfc>)
    for (uint8_t i = 31; i > 0; --i) {
 800165c:	241f      	movs	r4, #31
 800165e:	2c00      	cmp	r4, #0
 8001660:	d006      	beq.n	8001670 <initialize+0x48>
        if ((1 << i) == frequency) {
 8001662:	2301      	movs	r3, #1
 8001664:	40a3      	lsls	r3, r4
 8001666:	429e      	cmp	r6, r3
 8001668:	d002      	beq.n	8001670 <initialize+0x48>
    for (uint8_t i = 31; i > 0; --i) {
 800166a:	3c01      	subs	r4, #1
 800166c:	b2e4      	uxtb	r4, r4
 800166e:	e7f6      	b.n	800165e <initialize+0x36>
    uint32_t bits = info->bits;
 8001670:	6847      	ldr	r7, [r0, #4]
    if ((info->bits > 32) || (info->bits < 4)) {
 8001672:	1f3b      	subs	r3, r7, #4
 8001674:	2b1c      	cmp	r3, #28
 8001676:	d900      	bls.n	800167a <initialize+0x52>
        bits = 32;
 8001678:	2720      	movs	r7, #32
    uint32_t max_delta = 0x7 << (bits - 4); // 7/16th
 800167a:	1f3b      	subs	r3, r7, #4
 800167c:	2207      	movs	r2, #7
 800167e:	409a      	lsls	r2, r3
 8001680:	4691      	mov	r9, r2
        ((uint64_t)max_delta * 1000000 + frequency - 1) / frequency;
 8001682:	2300      	movs	r3, #0
 8001684:	4698      	mov	r8, r3
 8001686:	4a27      	ldr	r2, [pc, #156]	; (8001724 <initialize+0xfc>)
 8001688:	2300      	movs	r3, #0
 800168a:	4648      	mov	r0, r9
 800168c:	2100      	movs	r1, #0
 800168e:	f7fe fdf9 	bl	8000284 <__aeabi_lmul>
 8001692:	9600      	str	r6, [sp, #0]
 8001694:	2300      	movs	r3, #0
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	9a00      	ldr	r2, [sp, #0]
 800169a:	9b01      	ldr	r3, [sp, #4]
 800169c:	1880      	adds	r0, r0, r2
 800169e:	4159      	adcs	r1, r3
 80016a0:	2201      	movs	r2, #1
 80016a2:	4252      	negs	r2, r2
 80016a4:	17d3      	asrs	r3, r2, #31
 80016a6:	1880      	adds	r0, r0, r2
 80016a8:	4159      	adcs	r1, r3
    uint64_t max_delta_us =
 80016aa:	9a00      	ldr	r2, [sp, #0]
 80016ac:	9b01      	ldr	r3, [sp, #4]
 80016ae:	f7fe fdc9 	bl	8000244 <__aeabi_uldivmod>
 80016b2:	9000      	str	r0, [sp, #0]
 80016b4:	9101      	str	r1, [sp, #4]
    ticker->queue->event_handler = NULL;
 80016b6:	686b      	ldr	r3, [r5, #4]
 80016b8:	4642      	mov	r2, r8
 80016ba:	601a      	str	r2, [r3, #0]
    ticker->queue->head = NULL;
 80016bc:	686b      	ldr	r3, [r5, #4]
 80016be:	605a      	str	r2, [r3, #4]
    ticker->queue->tick_last_read = ticker->interface->read();
 80016c0:	686b      	ldr	r3, [r5, #4]
 80016c2:	4698      	mov	r8, r3
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4798      	blx	r3
 80016ca:	4643      	mov	r3, r8
 80016cc:	6218      	str	r0, [r3, #32]
    ticker->queue->tick_remainder = 0;
 80016ce:	686b      	ldr	r3, [r5, #4]
 80016d0:	2000      	movs	r0, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	6298      	str	r0, [r3, #40]	; 0x28
 80016d6:	62d9      	str	r1, [r3, #44]	; 0x2c
    ticker->queue->frequency = frequency;
 80016d8:	686b      	ldr	r3, [r5, #4]
 80016da:	609e      	str	r6, [r3, #8]
    ticker->queue->frequency_shifts = frequency_shifts;
 80016dc:	233a      	movs	r3, #58	; 0x3a
 80016de:	686a      	ldr	r2, [r5, #4]
 80016e0:	54d4      	strb	r4, [r2, r3]
    ticker->queue->bitmask = ((uint64_t)1 << bits) - 1;
 80016e2:	6869      	ldr	r1, [r5, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	0013      	movs	r3, r2
 80016e8:	40bb      	lsls	r3, r7
 80016ea:	3b01      	subs	r3, #1
 80016ec:	60cb      	str	r3, [r1, #12]
    ticker->queue->max_delta = max_delta;
 80016ee:	686b      	ldr	r3, [r5, #4]
 80016f0:	4649      	mov	r1, r9
 80016f2:	6119      	str	r1, [r3, #16]
    ticker->queue->max_delta_us = max_delta_us;
 80016f4:	686b      	ldr	r3, [r5, #4]
 80016f6:	9800      	ldr	r0, [sp, #0]
 80016f8:	9901      	ldr	r1, [sp, #4]
 80016fa:	6198      	str	r0, [r3, #24]
 80016fc:	61d9      	str	r1, [r3, #28]
    ticker->queue->present_time = 0;
 80016fe:	686b      	ldr	r3, [r5, #4]
 8001700:	2000      	movs	r0, #0
 8001702:	2100      	movs	r1, #0
 8001704:	6318      	str	r0, [r3, #48]	; 0x30
 8001706:	6359      	str	r1, [r3, #52]	; 0x34
    ticker->queue->dispatching = false;
 8001708:	2100      	movs	r1, #0
 800170a:	2339      	movs	r3, #57	; 0x39
 800170c:	6868      	ldr	r0, [r5, #4]
 800170e:	54c1      	strb	r1, [r0, r3]
    ticker->queue->initialized = true;
 8001710:	3b01      	subs	r3, #1
 8001712:	6869      	ldr	r1, [r5, #4]
 8001714:	54ca      	strb	r2, [r1, r3]
    update_present_time(ticker);
 8001716:	0028      	movs	r0, r5
 8001718:	f7ff fe36 	bl	8001388 <update_present_time>
    schedule_interrupt(ticker);
 800171c:	0028      	movs	r0, r5
 800171e:	f7ff ff41 	bl	80015a4 <schedule_interrupt>
 8001722:	e78c      	b.n	800163e <initialize+0x16>
 8001724:	000f4240 	.word	0x000f4240

08001728 <ticker_set_handler>:

void ticker_set_handler(const ticker_data_t *const ticker, ticker_event_handler handler)
{
 8001728:	b570      	push	{r4, r5, r6, lr}
 800172a:	0004      	movs	r4, r0
 800172c:	000d      	movs	r5, r1
    initialize(ticker);
 800172e:	f7ff ff7b 	bl	8001628 <initialize>

    core_util_critical_section_enter();
 8001732:	f000 fa99 	bl	8001c68 <core_util_critical_section_enter>
    set_handler(ticker, handler);
 8001736:	0029      	movs	r1, r5
 8001738:	0020      	movs	r0, r4
 800173a:	f7ff fe21 	bl	8001380 <set_handler>
    core_util_critical_section_exit();
 800173e:	f000 fa9d 	bl	8001c7c <core_util_critical_section_exit>
}
 8001742:	bd70      	pop	{r4, r5, r6, pc}

08001744 <ticker_irq_handler>:

void ticker_irq_handler(const ticker_data_t *const ticker)
{
 8001744:	b570      	push	{r4, r5, r6, lr}
 8001746:	0004      	movs	r4, r0
    core_util_critical_section_enter();
 8001748:	f000 fa8e 	bl	8001c68 <core_util_critical_section_enter>

    ticker->interface->clear_interrupt();
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4798      	blx	r3

    /* Go through all the pending TimerEvents */
    ticker->queue->dispatching = true;
 8001752:	2201      	movs	r2, #1
 8001754:	2339      	movs	r3, #57	; 0x39
 8001756:	6861      	ldr	r1, [r4, #4]
 8001758:	54ca      	strb	r2, [r1, r3]
    while (1) {
        if (ticker->queue->head == NULL) {
 800175a:	6863      	ldr	r3, [r4, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d016      	beq.n	8001790 <ticker_irq_handler+0x4c>
            break;
        }

        // update the current timestamp used by the queue
        update_present_time(ticker);
 8001762:	0020      	movs	r0, r4
 8001764:	f7ff fe10 	bl	8001388 <update_present_time>

        if (ticker->queue->head->timestamp <= ticker->queue->present_time) {
 8001768:	6863      	ldr	r3, [r4, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	6816      	ldr	r6, [r2, #0]
 800176e:	6850      	ldr	r0, [r2, #4]
 8001770:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001772:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001774:	4288      	cmp	r0, r1
 8001776:	d80b      	bhi.n	8001790 <ticker_irq_handler+0x4c>
 8001778:	d008      	beq.n	800178c <ticker_irq_handler+0x48>
            // This event was in the past:
            //      point to the following one and execute its handler
            ticker_event_t *p = ticker->queue->head;
            ticker->queue->head = ticker->queue->head->next;
 800177a:	68d1      	ldr	r1, [r2, #12]
 800177c:	6059      	str	r1, [r3, #4]
            if (ticker->queue->event_handler != NULL) {
 800177e:	6863      	ldr	r3, [r4, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0e9      	beq.n	800175a <ticker_irq_handler+0x16>
                (*ticker->queue->event_handler)(p->id); // NOTE: the handler can set new events
 8001786:	6890      	ldr	r0, [r2, #8]
 8001788:	4798      	blx	r3
 800178a:	e7e6      	b.n	800175a <ticker_irq_handler+0x16>
        if (ticker->queue->head->timestamp <= ticker->queue->present_time) {
 800178c:	42ae      	cmp	r6, r5
 800178e:	d9f4      	bls.n	800177a <ticker_irq_handler+0x36>
             * event handler may have altered the chain of pending events. */
        } else {
            break;
        }
    }
    ticker->queue->dispatching = false;
 8001790:	2200      	movs	r2, #0
 8001792:	2339      	movs	r3, #57	; 0x39
 8001794:	6861      	ldr	r1, [r4, #4]
 8001796:	54ca      	strb	r2, [r1, r3]

    schedule_interrupt(ticker);
 8001798:	0020      	movs	r0, r4
 800179a:	f7ff ff03 	bl	80015a4 <schedule_interrupt>

    core_util_critical_section_exit();
 800179e:	f000 fa6d 	bl	8001c7c <core_util_critical_section_exit>
}
 80017a2:	bd70      	pop	{r4, r5, r6, pc}

080017a4 <ticker_insert_event_us>:

    core_util_critical_section_exit();
}

void ticker_insert_event_us(const ticker_data_t *const ticker, ticker_event_t *obj, us_timestamp_t timestamp, uint32_t id)
{
 80017a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a6:	0006      	movs	r6, r0
 80017a8:	000d      	movs	r5, r1
 80017aa:	0017      	movs	r7, r2
 80017ac:	001c      	movs	r4, r3
    core_util_critical_section_enter();
 80017ae:	f000 fa5b 	bl	8001c68 <core_util_critical_section_enter>

    // update the current timestamp
    update_present_time(ticker);
 80017b2:	0030      	movs	r0, r6
 80017b4:	f7ff fde8 	bl	8001388 <update_present_time>

    // initialise our data
    obj->timestamp = timestamp;
 80017b8:	602f      	str	r7, [r5, #0]
 80017ba:	606c      	str	r4, [r5, #4]
    obj->id = id;
 80017bc:	9b06      	ldr	r3, [sp, #24]
 80017be:	60ab      	str	r3, [r5, #8]

    /* Go through the list until we either reach the end, or find
       an element this should come before (which is possibly the
       head). */
    ticker_event_t *prev = NULL, *p = ticker->queue->head;
 80017c0:	6873      	ldr	r3, [r6, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2100      	movs	r1, #0
    while (p != NULL) {
 80017c6:	e001      	b.n	80017cc <ticker_insert_event_us+0x28>
        /* check if we come before p */
        if (timestamp < p->timestamp) {
            break;
        }
        /* go to the next element */
        prev = p;
 80017c8:	0019      	movs	r1, r3
        p = p->next;
 80017ca:	68db      	ldr	r3, [r3, #12]
    while (p != NULL) {
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <ticker_insert_event_us+0x3a>
        if (timestamp < p->timestamp) {
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	42a2      	cmp	r2, r4
 80017d6:	d802      	bhi.n	80017de <ticker_insert_event_us+0x3a>
 80017d8:	d1f6      	bne.n	80017c8 <ticker_insert_event_us+0x24>
 80017da:	42b8      	cmp	r0, r7
 80017dc:	d9f4      	bls.n	80017c8 <ticker_insert_event_us+0x24>
    }

    /* if we're at the end p will be NULL, which is correct */
    obj->next = p;
 80017de:	60eb      	str	r3, [r5, #12]

    /* if prev is NULL we're at the head */
    if (prev == NULL) {
 80017e0:	2900      	cmp	r1, #0
 80017e2:	d003      	beq.n	80017ec <ticker_insert_event_us+0x48>
        ticker->queue->head = obj;
        schedule_interrupt(ticker);
    } else {
        prev->next = obj;
 80017e4:	60cd      	str	r5, [r1, #12]
    }

    core_util_critical_section_exit();
 80017e6:	f000 fa49 	bl	8001c7c <core_util_critical_section_exit>
}
 80017ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ticker->queue->head = obj;
 80017ec:	6873      	ldr	r3, [r6, #4]
 80017ee:	605d      	str	r5, [r3, #4]
        schedule_interrupt(ticker);
 80017f0:	0030      	movs	r0, r6
 80017f2:	f7ff fed7 	bl	80015a4 <schedule_interrupt>
 80017f6:	e7f6      	b.n	80017e6 <ticker_insert_event_us+0x42>

080017f8 <ticker_remove_event>:

void ticker_remove_event(const ticker_data_t *const ticker, ticker_event_t *obj)
{
 80017f8:	b570      	push	{r4, r5, r6, lr}
 80017fa:	0005      	movs	r5, r0
 80017fc:	000c      	movs	r4, r1
    core_util_critical_section_enter();
 80017fe:	f000 fa33 	bl	8001c68 <core_util_critical_section_enter>

    // remove this object from the list
    if (ticker->queue->head == obj) {
 8001802:	686a      	ldr	r2, [r5, #4]
 8001804:	6853      	ldr	r3, [r2, #4]
 8001806:	42a3      	cmp	r3, r4
 8001808:	d006      	beq.n	8001818 <ticker_remove_event+0x20>
        ticker->queue->head = obj->next;
        schedule_interrupt(ticker);
    } else {
        // find the object before me, then drop me
        ticker_event_t *p = ticker->queue->head;
        while (p != NULL) {
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00c      	beq.n	8001828 <ticker_remove_event+0x30>
            if (p->next == obj) {
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	4294      	cmp	r4, r2
 8001812:	d007      	beq.n	8001824 <ticker_remove_event+0x2c>
                p->next = obj->next;
                break;
            }
            p = p->next;
 8001814:	0013      	movs	r3, r2
 8001816:	e7f8      	b.n	800180a <ticker_remove_event+0x12>
        ticker->queue->head = obj->next;
 8001818:	68e3      	ldr	r3, [r4, #12]
 800181a:	6053      	str	r3, [r2, #4]
        schedule_interrupt(ticker);
 800181c:	0028      	movs	r0, r5
 800181e:	f7ff fec1 	bl	80015a4 <schedule_interrupt>
 8001822:	e001      	b.n	8001828 <ticker_remove_event+0x30>
                p->next = obj->next;
 8001824:	68e2      	ldr	r2, [r4, #12]
 8001826:	60da      	str	r2, [r3, #12]
        }
    }

    core_util_critical_section_exit();
 8001828:	f000 fa28 	bl	8001c7c <core_util_critical_section_exit>
}
 800182c:	bd70      	pop	{r4, r5, r6, pc}

0800182e <ticker_read_us>:
{
    return ticker_read_us(ticker);
}

us_timestamp_t ticker_read_us(const ticker_data_t *const ticker)
{
 800182e:	b510      	push	{r4, lr}
 8001830:	0004      	movs	r4, r0
    initialize(ticker);
 8001832:	f7ff fef9 	bl	8001628 <initialize>

    core_util_critical_section_enter();
 8001836:	f000 fa17 	bl	8001c68 <core_util_critical_section_enter>
    update_present_time(ticker);
 800183a:	0020      	movs	r0, r4
 800183c:	f7ff fda4 	bl	8001388 <update_present_time>
    core_util_critical_section_exit();
 8001840:	f000 fa1c 	bl	8001c7c <core_util_critical_section_exit>

    return ticker->queue->present_time;
 8001844:	6863      	ldr	r3, [r4, #4]
 8001846:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001848:	6b59      	ldr	r1, [r3, #52]	; 0x34
}
 800184a:	bd10      	pop	{r4, pc}

0800184c <ticker_read>:
{
 800184c:	b510      	push	{r4, lr}
    return ticker_read_us(ticker);
 800184e:	f7ff ffee 	bl	800182e <ticker_read_us>
}
 8001852:	bd10      	pop	{r4, pc}

08001854 <get_us_ticker_data>:
};

const ticker_data_t *get_us_ticker_data(void)
{
    return &us_data;
}
 8001854:	4800      	ldr	r0, [pc, #0]	; (8001858 <get_us_ticker_data+0x4>)
 8001856:	4770      	bx	lr
 8001858:	08005fa4 	.word	0x08005fa4

0800185c <us_ticker_irq_handler>:

    return prev_irq_handler;
}

void us_ticker_irq_handler(void)
{
 800185c:	b510      	push	{r4, lr}
    if (irq_handler) {
 800185e:	4b03      	ldr	r3, [pc, #12]	; (800186c <us_ticker_irq_handler+0x10>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <us_ticker_irq_handler+0xe>
        irq_handler(&us_data);
 8001866:	4802      	ldr	r0, [pc, #8]	; (8001870 <us_ticker_irq_handler+0x14>)
 8001868:	4798      	blx	r3
    }
}
 800186a:	bd10      	pop	{r4, pc}
 800186c:	200000c4 	.word	0x200000c4
 8001870:	08005fa4 	.word	0x08005fa4

08001874 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>:
FileBase *FileBase::_head = NULL;
SingletonPtr<PlatformMutex> FileBase::_mutex;

FileBase::FileBase(const char *name, PathType t) : _next(NULL),
    _name(name),
    _path_type(t)
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x3c>)
 8001876:	3308      	adds	r3, #8
 8001878:	6003      	str	r3, [r0, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	6043      	str	r3, [r0, #4]
 800187e:	6081      	str	r1, [r0, #8]
 8001880:	7302      	strb	r2, [r0, #12]
        if (NULL == _ptr) {
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x40>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00a      	beq.n	80018a0 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x2c>
{
    _mutex->lock();
    if (name != NULL) {
 800188a:	2900      	cmp	r1, #0
 800188c:	d003      	beq.n	8001896 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x22>
        // put this object at head of the list
        _next = _head;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x44>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	6042      	str	r2, [r0, #4]
        _head = this;
 8001894:	6018      	str	r0, [r3, #0]
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x40>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d004      	beq.n	80018a8 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x34>
    } else {
        _next = NULL;
    }
    _mutex->unlock();
}
 800189e:	4770      	bx	lr
                _ptr = new (_data) T();
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x40>)
 80018a2:	1d1a      	adds	r2, r3, #4
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e7f0      	b.n	800188a <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x16>
 80018a8:	4b02      	ldr	r3, [pc, #8]	; (80018b4 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x40>)
 80018aa:	1d1a      	adds	r2, r3, #4
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	e7f6      	b.n	800189e <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x2a>
 80018b0:	08005fc8 	.word	0x08005fc8
 80018b4:	20000a34 	.word	0x20000a34
 80018b8:	20000a30 	.word	0x20000a30

080018bc <_ZN4mbed8FileBase6lookupEPKcj>:
        remove_filehandle(static_cast<FileHandle *>(static_cast<FileLike *>(this)));
    }
}

FileBase *FileBase::lookup(const char *name, unsigned int len)
{
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018be:	46c6      	mov	lr, r8
 80018c0:	b500      	push	{lr}
 80018c2:	0007      	movs	r7, r0
 80018c4:	000e      	movs	r6, r1
        if (NULL == _ptr) {
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <_ZN4mbed8FileBase6lookupEPKcj+0x70>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <_ZN4mbed8FileBase6lookupEPKcj+0x1e>
            singleton_unlock();
        }
        // _ptr was not zero initialized or was
        // corrupted if this assert is hit
        MBED_ASSERT(_ptr == (T *)&_data);
        return _ptr;
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <_ZN4mbed8FileBase6lookupEPKcj+0x70>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4698      	mov	r8, r3
    _mutex->lock();
    FileBase *p = _head;
 80018d4:	4b16      	ldr	r3, [pc, #88]	; (8001930 <_ZN4mbed8FileBase6lookupEPKcj+0x74>)
 80018d6:	681c      	ldr	r4, [r3, #0]
 80018d8:	e004      	b.n	80018e4 <_ZN4mbed8FileBase6lookupEPKcj+0x28>
                _ptr = new (_data) T();
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <_ZN4mbed8FileBase6lookupEPKcj+0x70>)
 80018dc:	1d1a      	adds	r2, r3, #4
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e7f5      	b.n	80018ce <_ZN4mbed8FileBase6lookupEPKcj+0x12>
        /* Check that p->_name matches name and is the correct length */
        if (p->_name != NULL && std::strncmp(p->_name, name, len) == 0 && std::strlen(p->_name) == len) {
            _mutex->unlock();
            return p;
        }
        p = p->_next;
 80018e2:	6864      	ldr	r4, [r4, #4]
    while (p != NULL) {
 80018e4:	2c00      	cmp	r4, #0
 80018e6:	d015      	beq.n	8001914 <_ZN4mbed8FileBase6lookupEPKcj+0x58>
        if (p->_name != NULL && std::strncmp(p->_name, name, len) == 0 && std::strlen(p->_name) == len) {
 80018e8:	68a5      	ldr	r5, [r4, #8]
 80018ea:	2d00      	cmp	r5, #0
 80018ec:	d0f9      	beq.n	80018e2 <_ZN4mbed8FileBase6lookupEPKcj+0x26>
 80018ee:	0032      	movs	r2, r6
 80018f0:	0039      	movs	r1, r7
 80018f2:	0028      	movs	r0, r5
 80018f4:	f004 f8b4 	bl	8005a60 <strncmp>
 80018f8:	2800      	cmp	r0, #0
 80018fa:	d1f2      	bne.n	80018e2 <_ZN4mbed8FileBase6lookupEPKcj+0x26>
 80018fc:	0028      	movs	r0, r5
 80018fe:	f7fe fc0d 	bl	800011c <strlen>
 8001902:	4286      	cmp	r6, r0
 8001904:	d1ed      	bne.n	80018e2 <_ZN4mbed8FileBase6lookupEPKcj+0x26>
        if (NULL == _ptr) {
 8001906:	4643      	mov	r3, r8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d106      	bne.n	800191a <_ZN4mbed8FileBase6lookupEPKcj+0x5e>
                _ptr = new (_data) T();
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <_ZN4mbed8FileBase6lookupEPKcj+0x70>)
 800190e:	1d1a      	adds	r2, r3, #4
 8001910:	601a      	str	r2, [r3, #0]
            return p;
 8001912:	e002      	b.n	800191a <_ZN4mbed8FileBase6lookupEPKcj+0x5e>
        if (NULL == _ptr) {
 8001914:	4643      	mov	r3, r8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <_ZN4mbed8FileBase6lookupEPKcj+0x66>
    }
    _mutex->unlock();
    return NULL;
}
 800191a:	0020      	movs	r0, r4
 800191c:	bc04      	pop	{r2}
 800191e:	4690      	mov	r8, r2
 8001920:	bdf0      	pop	{r4, r5, r6, r7, pc}
                _ptr = new (_data) T();
 8001922:	4b02      	ldr	r3, [pc, #8]	; (800192c <_ZN4mbed8FileBase6lookupEPKcj+0x70>)
 8001924:	1d1a      	adds	r2, r3, #4
 8001926:	601a      	str	r2, [r3, #0]
    return NULL;
 8001928:	e7f7      	b.n	800191a <_ZN4mbed8FileBase6lookupEPKcj+0x5e>
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	20000a34 	.word	0x20000a34
 8001930:	20000a30 	.word	0x20000a30

08001934 <_ZN4mbed8FileBase11getPathTypeEv>:
}

PathType FileBase::getPathType(void)
{
    // Constant read so no lock needed
    return _path_type;
 8001934:	7b00      	ldrb	r0, [r0, #12]
}
 8001936:	4770      	bx	lr

08001938 <_ZN4mbed8FileBaseD1Ev>:
FileBase::~FileBase()
 8001938:	b510      	push	{r4, lr}
 800193a:	0004      	movs	r4, r0
 800193c:	4b16      	ldr	r3, [pc, #88]	; (8001998 <_ZN4mbed8FileBaseD1Ev+0x60>)
 800193e:	3308      	adds	r3, #8
 8001940:	6003      	str	r3, [r0, #0]
        if (NULL == _ptr) {
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <_ZN4mbed8FileBaseD1Ev+0x64>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <_ZN4mbed8FileBaseD1Ev+0x2a>
        return _ptr;
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <_ZN4mbed8FileBaseD1Ev+0x64>)
 800194c:	6819      	ldr	r1, [r3, #0]
    if (_name != NULL) {
 800194e:	68a3      	ldr	r3, [r4, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d010      	beq.n	8001976 <_ZN4mbed8FileBaseD1Ev+0x3e>
        if (_head == this) { // first in the list, so just drop me
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <_ZN4mbed8FileBaseD1Ev+0x68>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4294      	cmp	r4, r2
 800195a:	d107      	bne.n	800196c <_ZN4mbed8FileBaseD1Ev+0x34>
            _head = _next;
 800195c:	6862      	ldr	r2, [r4, #4]
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e009      	b.n	8001976 <_ZN4mbed8FileBaseD1Ev+0x3e>
                _ptr = new (_data) T();
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <_ZN4mbed8FileBaseD1Ev+0x64>)
 8001964:	1d1a      	adds	r2, r3, #4
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e7ef      	b.n	800194a <_ZN4mbed8FileBaseD1Ev+0x12>
                p = p->_next;
 800196a:	001a      	movs	r2, r3
            while (p->_next != this) {
 800196c:	6853      	ldr	r3, [r2, #4]
 800196e:	429c      	cmp	r4, r3
 8001970:	d1fb      	bne.n	800196a <_ZN4mbed8FileBaseD1Ev+0x32>
            p->_next = _next;
 8001972:	6863      	ldr	r3, [r4, #4]
 8001974:	6053      	str	r3, [r2, #4]
        if (NULL == _ptr) {
 8001976:	2900      	cmp	r1, #0
 8001978:	d006      	beq.n	8001988 <_ZN4mbed8FileBaseD1Ev+0x50>
    if (getPathType() == FilePathType) {
 800197a:	0020      	movs	r0, r4
 800197c:	f7ff ffda 	bl	8001934 <_ZN4mbed8FileBase11getPathTypeEv>
 8001980:	2800      	cmp	r0, #0
 8001982:	d005      	beq.n	8001990 <_ZN4mbed8FileBaseD1Ev+0x58>
}
 8001984:	0020      	movs	r0, r4
 8001986:	bd10      	pop	{r4, pc}
                _ptr = new (_data) T();
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <_ZN4mbed8FileBaseD1Ev+0x64>)
 800198a:	1d1a      	adds	r2, r3, #4
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e7f4      	b.n	800197a <_ZN4mbed8FileBaseD1Ev+0x42>
        remove_filehandle(static_cast<FileHandle *>(static_cast<FileLike *>(this)));
 8001990:	1f20      	subs	r0, r4, #4
 8001992:	f000 facb 	bl	8001f2c <_ZN4mbed17remove_filehandleEPNS_10FileHandleE>
 8001996:	e7f5      	b.n	8001984 <_ZN4mbed8FileBaseD1Ev+0x4c>
 8001998:	08005fc8 	.word	0x08005fc8
 800199c:	20000a34 	.word	0x20000a34
 80019a0:	20000a30 	.word	0x20000a30

080019a4 <_ZN4mbed8FileBaseD0Ev>:
FileBase::~FileBase()
 80019a4:	b510      	push	{r4, lr}
 80019a6:	0004      	movs	r4, r0
}
 80019a8:	f7ff ffc6 	bl	8001938 <_ZN4mbed8FileBaseD1Ev>
 80019ac:	0020      	movs	r0, r4
 80019ae:	f000 fdff 	bl	80025b0 <_ZdlPv>
 80019b2:	0020      	movs	r0, r4
 80019b4:	bd10      	pop	{r4, pc}

080019b6 <_ZN4mbed10FileHandle4syncEv>:
    }
 80019b6:	2000      	movs	r0, #0
 80019b8:	4770      	bx	lr

080019ba <_ZN4mbed10FileHandle6isattyEv>:
    }
 80019ba:	2000      	movs	r0, #0
 80019bc:	4770      	bx	lr

080019be <_ZN4mbed10FileHandle4sizeEv>:
#include "platform/mbed_critical.h"

namespace mbed {

off_t FileHandle::size()
{
 80019be:	b570      	push	{r4, r5, r6, lr}
 80019c0:	0004      	movs	r4, r0
    /* remember our current position */
    off_t off = seek(0, SEEK_CUR);
 80019c2:	6803      	ldr	r3, [r0, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	2201      	movs	r2, #1
 80019c8:	2100      	movs	r1, #0
 80019ca:	4798      	blx	r3
 80019cc:	1e05      	subs	r5, r0, #0
    if (off < 0) {
 80019ce:	db0d      	blt.n	80019ec <_ZN4mbed10FileHandle4sizeEv+0x2e>
        return off;
    }
    /* seek to the end to get the file length */
    off_t size = seek(0, SEEK_END);
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	2202      	movs	r2, #2
 80019d6:	2100      	movs	r1, #0
 80019d8:	0020      	movs	r0, r4
 80019da:	4798      	blx	r3
 80019dc:	0006      	movs	r6, r0
    /* return to our old position */
    seek(off, SEEK_SET);
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	2200      	movs	r2, #0
 80019e4:	0029      	movs	r1, r5
 80019e6:	0020      	movs	r0, r4
 80019e8:	4798      	blx	r3
    return size;
 80019ea:	0035      	movs	r5, r6
}
 80019ec:	0028      	movs	r0, r5
 80019ee:	bd70      	pop	{r4, r5, r6, pc}

080019f0 <_ZN4mbed8FilePathC1EPKc>:
 */
#include "platform/FilePath.h"

namespace mbed {

FilePath::FilePath(const char *file_path) : file_name(NULL), fb(NULL)
 80019f0:	b570      	push	{r4, r5, r6, lr}
 80019f2:	0004      	movs	r4, r0
 80019f4:	000d      	movs	r5, r1
 80019f6:	2300      	movs	r3, #0
 80019f8:	6003      	str	r3, [r0, #0]
 80019fa:	6043      	str	r3, [r0, #4]
{
    // skip slashes
    file_path += strspn(file_path, "/");
 80019fc:	490b      	ldr	r1, [pc, #44]	; (8001a2c <_ZN4mbed8FilePathC1EPKc+0x3c>)
 80019fe:	0028      	movs	r0, r5
 8001a00:	f004 f83f 	bl	8005a82 <strspn>
 8001a04:	1828      	adds	r0, r5, r0

    const char *file_system = file_path;
    file_name = file_system;
 8001a06:	6020      	str	r0, [r4, #0]
    int len = 0;
 8001a08:	2100      	movs	r1, #0
    while (true) {
        char c = *file_name;
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	781a      	ldrb	r2, [r3, #0]
        if (c == '/') { // end of object name
 8001a0e:	2a2f      	cmp	r2, #47	; 0x2f
 8001a10:	d005      	beq.n	8001a1e <_ZN4mbed8FilePathC1EPKc+0x2e>
            file_name++; // point to one char after the '/'
            break;
        }
        if (c == 0) { // end of object name, with no filename
 8001a12:	2a00      	cmp	r2, #0
 8001a14:	d005      	beq.n	8001a22 <_ZN4mbed8FilePathC1EPKc+0x32>
            break;
        }
        len++;
 8001a16:	3101      	adds	r1, #1
        file_name++;
 8001a18:	3301      	adds	r3, #1
 8001a1a:	6023      	str	r3, [r4, #0]
    }
 8001a1c:	e7f5      	b.n	8001a0a <_ZN4mbed8FilePathC1EPKc+0x1a>
            file_name++; // point to one char after the '/'
 8001a1e:	3301      	adds	r3, #1
 8001a20:	6023      	str	r3, [r4, #0]

    MBED_ASSERT(len != 0);
    fb = FileBase::lookup(file_system, len);
 8001a22:	f7ff ff4b 	bl	80018bc <_ZN4mbed8FileBase6lookupEPKcj>
 8001a26:	6060      	str	r0, [r4, #4]
}
 8001a28:	0020      	movs	r0, r4
 8001a2a:	bd70      	pop	{r4, r5, r6, pc}
 8001a2c:	08006028 	.word	0x08006028

08001a30 <_ZN4mbed8FilePath8fileNameEv>:

const char *FilePath::fileName(void)
{
    return file_name;
 8001a30:	6800      	ldr	r0, [r0, #0]
}
 8001a32:	4770      	bx	lr

08001a34 <_ZN4mbed8FilePath12isFileSystemEv>:

bool FilePath::isFileSystem(void)
{
 8001a34:	b510      	push	{r4, lr}
    if (NULL == fb) {
 8001a36:	6840      	ldr	r0, [r0, #4]
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d006      	beq.n	8001a4a <_ZN4mbed8FilePath12isFileSystemEv+0x16>
        return false;
    }
    return (fb->getPathType() == FileSystemPathType);
 8001a3c:	f7ff ff7a 	bl	8001934 <_ZN4mbed8FileBase11getPathTypeEv>
 8001a40:	3801      	subs	r0, #1
 8001a42:	4243      	negs	r3, r0
 8001a44:	4158      	adcs	r0, r3
 8001a46:	b2c0      	uxtb	r0, r0
}
 8001a48:	bd10      	pop	{r4, pc}
        return false;
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	e7fc      	b.n	8001a48 <_ZN4mbed8FilePath12isFileSystemEv+0x14>

08001a4e <_ZN4mbed8FilePath10fileSystemEv>:

FileSystemLike *FilePath::fileSystem(void)
{
 8001a4e:	b510      	push	{r4, lr}
 8001a50:	0004      	movs	r4, r0
    if (isFileSystem()) {
 8001a52:	f7ff ffef 	bl	8001a34 <_ZN4mbed8FilePath12isFileSystemEv>
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d004      	beq.n	8001a64 <_ZN4mbed8FilePath10fileSystemEv+0x16>
        return static_cast<FileSystemLike *>(fb);
 8001a5a:	6860      	ldr	r0, [r4, #4]
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d003      	beq.n	8001a68 <_ZN4mbed8FilePath10fileSystemEv+0x1a>
 8001a60:	3804      	subs	r0, #4
    }
    return NULL;
}
 8001a62:	bd10      	pop	{r4, pc}
    return NULL;
 8001a64:	2000      	movs	r0, #0
 8001a66:	e7fc      	b.n	8001a62 <_ZN4mbed8FilePath10fileSystemEv+0x14>
        return static_cast<FileSystemLike *>(fb);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	e7fa      	b.n	8001a62 <_ZN4mbed8FilePath10fileSystemEv+0x14>

08001a6c <_ZN4mbed8FilePath6isFileEv>:

bool FilePath::isFile(void)
{
 8001a6c:	b510      	push	{r4, lr}
    if (NULL == fb) {
 8001a6e:	6840      	ldr	r0, [r0, #4]
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d005      	beq.n	8001a80 <_ZN4mbed8FilePath6isFileEv+0x14>
        return false;
    }
    return (fb->getPathType() == FilePathType);
 8001a74:	f7ff ff5e 	bl	8001934 <_ZN4mbed8FileBase11getPathTypeEv>
 8001a78:	4243      	negs	r3, r0
 8001a7a:	4158      	adcs	r0, r3
 8001a7c:	b2c0      	uxtb	r0, r0
}
 8001a7e:	bd10      	pop	{r4, pc}
        return false;
 8001a80:	2000      	movs	r0, #0
 8001a82:	e7fc      	b.n	8001a7e <_ZN4mbed8FilePath6isFileEv+0x12>

08001a84 <_ZN4mbed8FilePath4fileEv>:

FileLike *FilePath::file(void)
{
 8001a84:	b510      	push	{r4, lr}
 8001a86:	0004      	movs	r4, r0
    if (isFile()) {
 8001a88:	f7ff fff0 	bl	8001a6c <_ZN4mbed8FilePath6isFileEv>
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	d004      	beq.n	8001a9a <_ZN4mbed8FilePath4fileEv+0x16>
        return (FileLike *)fb;
 8001a90:	6860      	ldr	r0, [r4, #4]
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d003      	beq.n	8001a9e <_ZN4mbed8FilePath4fileEv+0x1a>
 8001a96:	3804      	subs	r0, #4
    }
    return NULL;
}
 8001a98:	bd10      	pop	{r4, pc}
    return NULL;
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	e7fc      	b.n	8001a98 <_ZN4mbed8FilePath4fileEv+0x14>
        return (FileLike *)fb;
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	e7fa      	b.n	8001a98 <_ZN4mbed8FilePath4fileEv+0x14>

08001aa2 <_ZN4mbed8FilePath6existsEv>:

bool FilePath::exists(void)
{
    return fb != NULL;
 8001aa2:	6840      	ldr	r0, [r0, #4]
 8001aa4:	1e43      	subs	r3, r0, #1
 8001aa6:	4198      	sbcs	r0, r3
 8001aa8:	b2c0      	uxtb	r0, r0
}
 8001aaa:	4770      	bx	lr

08001aac <_ZN4mbed6Stream4lockEv>:
    /** Acquire exclusive access to this object.
     */
    virtual void lock()
    {
        // Stub
    }
 8001aac:	4770      	bx	lr

08001aae <_ZN4mbed6Stream6unlockEv>:
    /** Release exclusive access to this object.
     */
    virtual void unlock()
    {
        // Stub
    }
 8001aae:	4770      	bx	lr

08001ab0 <_ZN4mbed6Stream5closeEv>:
}

int Stream::close()
{
    return 0;
}
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	4770      	bx	lr

08001ab4 <_ZN4mbed6Stream5writeEPKvj>:

ssize_t Stream::write(const void *buffer, size_t length)
{
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	46c6      	mov	lr, r8
 8001ab8:	b500      	push	{lr}
 8001aba:	0005      	movs	r5, r0
 8001abc:	4688      	mov	r8, r1
    const char *ptr = (const char *)buffer;
    const char *end = ptr + length;
 8001abe:	4442      	add	r2, r8
 8001ac0:	0017      	movs	r7, r2

    lock();
 8001ac2:	6803      	ldr	r3, [r0, #0]
 8001ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac6:	4798      	blx	r3
    const char *ptr = (const char *)buffer;
 8001ac8:	4644      	mov	r4, r8
 8001aca:	e000      	b.n	8001ace <_ZN4mbed6Stream5writeEPKvj+0x1a>
    while (ptr != end) {
        if (_putc(*ptr++) == EOF) {
 8001acc:	0034      	movs	r4, r6
    while (ptr != end) {
 8001ace:	42bc      	cmp	r4, r7
 8001ad0:	d008      	beq.n	8001ae4 <_ZN4mbed6Stream5writeEPKvj+0x30>
        if (_putc(*ptr++) == EOF) {
 8001ad2:	682b      	ldr	r3, [r5, #0]
 8001ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad6:	1c66      	adds	r6, r4, #1
 8001ad8:	7821      	ldrb	r1, [r4, #0]
 8001ada:	0028      	movs	r0, r5
 8001adc:	4798      	blx	r3
 8001ade:	1c43      	adds	r3, r0, #1
 8001ae0:	d1f4      	bne.n	8001acc <_ZN4mbed6Stream5writeEPKvj+0x18>
 8001ae2:	0034      	movs	r4, r6
            break;
        }
    }
    unlock();
 8001ae4:	682b      	ldr	r3, [r5, #0]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae8:	0028      	movs	r0, r5
 8001aea:	4798      	blx	r3

    return ptr - (const char *)buffer;
 8001aec:	4643      	mov	r3, r8
 8001aee:	1ae0      	subs	r0, r4, r3
}
 8001af0:	bc04      	pop	{r2}
 8001af2:	4690      	mov	r8, r2
 8001af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001af6 <_ZN4mbed6Stream4readEPvj>:

ssize_t Stream::read(void *buffer, size_t length)
{
 8001af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af8:	0005      	movs	r5, r0
 8001afa:	000f      	movs	r7, r1
    char *ptr = (char *)buffer;
    char *end = ptr + length;
 8001afc:	188e      	adds	r6, r1, r2

    lock();
 8001afe:	6803      	ldr	r3, [r0, #0]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b02:	4798      	blx	r3
    char *ptr = (char *)buffer;
 8001b04:	003c      	movs	r4, r7
    while (ptr != end) {
 8001b06:	42b4      	cmp	r4, r6
 8001b08:	d008      	beq.n	8001b1c <_ZN4mbed6Stream4readEPvj+0x26>
        int c = _getc();
 8001b0a:	682b      	ldr	r3, [r5, #0]
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	0028      	movs	r0, r5
 8001b10:	4798      	blx	r3
        if (c == EOF) {
 8001b12:	1c43      	adds	r3, r0, #1
 8001b14:	d002      	beq.n	8001b1c <_ZN4mbed6Stream4readEPvj+0x26>
            break;
        }
        *ptr++ = c;
 8001b16:	7020      	strb	r0, [r4, #0]
 8001b18:	3401      	adds	r4, #1
    while (ptr != end) {
 8001b1a:	e7f4      	b.n	8001b06 <_ZN4mbed6Stream4readEPvj+0x10>
    }
    unlock();
 8001b1c:	682b      	ldr	r3, [r5, #0]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	0028      	movs	r0, r5
 8001b22:	4798      	blx	r3

    return ptr - (const char *)buffer;
 8001b24:	1be0      	subs	r0, r4, r7
}
 8001b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b28 <_ZN4mbed6Stream4seekEli>:

off_t Stream::seek(off_t offset, int whence)
{
    return 0;
}
 8001b28:	2000      	movs	r0, #0
 8001b2a:	4770      	bx	lr

08001b2c <_ZN4mbed6Stream4tellEv>:

off_t Stream::tell()
{
    return 0;
}
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	4770      	bx	lr

08001b30 <_ZN4mbed6Stream6rewindEv>:

void Stream::rewind()
{
}
 8001b30:	4770      	bx	lr

08001b32 <_ZN4mbed6Stream6isattyEv>:

int Stream::isatty()
{
    return 0;
}
 8001b32:	2000      	movs	r0, #0
 8001b34:	4770      	bx	lr

08001b36 <_ZN4mbed6Stream4syncEv>:

int Stream::sync()
{
    return 0;
}
 8001b36:	2000      	movs	r0, #0
 8001b38:	4770      	bx	lr

08001b3a <_ZN4mbed6Stream4sizeEv>:

off_t Stream::size()
{
    return 0;
}
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	4770      	bx	lr
	...

08001b40 <_ZN4mbed6StreamC1EPKc>:
Stream::Stream(const char *name) : FileLike(name), _file(NULL)
 8001b40:	b510      	push	{r4, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	0004      	movs	r4, r0
class FileHandle : private NonCopyable<FileHandle> {
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <_ZN4mbed6StreamC1EPKc+0x48>)
 8001b48:	c008      	stmia	r0!, {r3}
public:
    /** Constructor FileLike
     *
     *  @param name     The name to use to open the file.
     */
    FileLike(const char *name = NULL) : FileBase(name, FilePathType) {}
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f7ff fe92 	bl	8001874 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <_ZN4mbed6StreamC1EPKc+0x4c>)
 8001b52:	001a      	movs	r2, r3
 8001b54:	3208      	adds	r2, #8
 8001b56:	6022      	str	r2, [r4, #0]
 8001b58:	3368      	adds	r3, #104	; 0x68
 8001b5a:	6063      	str	r3, [r4, #4]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	6163      	str	r3, [r4, #20]
    _file = fdopen(this, "w+");
 8001b60:	490b      	ldr	r1, [pc, #44]	; (8001b90 <_ZN4mbed6StreamC1EPKc+0x50>)
 8001b62:	0020      	movs	r0, r4
 8001b64:	f000 fd05 	bl	8002572 <_ZN4mbed6fdopenEPNS_10FileHandleEPKc>
 8001b68:	6160      	str	r0, [r4, #20]
    if (_file) {
 8001b6a:	2800      	cmp	r0, #0
 8001b6c:	d004      	beq.n	8001b78 <_ZN4mbed6StreamC1EPKc+0x38>
        mbed_set_unbuffered_stream(_file);
 8001b6e:	f000 fcd5 	bl	800251c <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>
}
 8001b72:	0020      	movs	r0, r4
 8001b74:	b002      	add	sp, #8
 8001b76:	bd10      	pop	{r4, pc}
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_OPEN_FAILED), "Stream obj failure", _file);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4804      	ldr	r0, [pc, #16]	; (8001b94 <_ZN4mbed6StreamC1EPKc+0x54>)
 8001b82:	f000 f911 	bl	8001da8 <mbed_error>
 8001b86:	e7f4      	b.n	8001b72 <_ZN4mbed6StreamC1EPKc+0x32>
 8001b88:	08005fe0 	.word	0x08005fe0
 8001b8c:	08006090 	.word	0x08006090
 8001b90:	0800608c 	.word	0x0800608c
 8001b94:	80010119 	.word	0x80010119

08001b98 <_ZN4mbed6StreamD1Ev>:
Stream::~Stream()
 8001b98:	b510      	push	{r4, lr}
 8001b9a:	0004      	movs	r4, r0
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <_ZN4mbed6StreamD1Ev+0x28>)
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	6002      	str	r2, [r0, #0]
 8001ba4:	3368      	adds	r3, #104	; 0x68
 8001ba6:	6043      	str	r3, [r0, #4]
    fclose(_file);
 8001ba8:	6940      	ldr	r0, [r0, #20]
 8001baa:	f002 fd01 	bl	80045b0 <fclose>
    virtual ~FileLike() {}
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <_ZN4mbed6StreamD1Ev+0x2c>)
 8001bb0:	6023      	str	r3, [r4, #0]
 8001bb2:	3350      	adds	r3, #80	; 0x50
 8001bb4:	6063      	str	r3, [r4, #4]
 8001bb6:	1d20      	adds	r0, r4, #4
 8001bb8:	f7ff febe 	bl	8001938 <_ZN4mbed8FileBaseD1Ev>
}
 8001bbc:	0020      	movs	r0, r4
 8001bbe:	bd10      	pop	{r4, pc}
 8001bc0:	08006090 	.word	0x08006090
 8001bc4:	08006034 	.word	0x08006034

08001bc8 <_ZN4mbed6Stream4putcEi>:
{
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	0004      	movs	r4, r0
 8001bcc:	000d      	movs	r5, r1
    lock();
 8001bce:	6803      	ldr	r3, [r0, #0]
 8001bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd2:	4798      	blx	r3
    fflush(_file);
 8001bd4:	6960      	ldr	r0, [r4, #20]
 8001bd6:	f002 fdcd 	bl	8004774 <fflush>
    int ret = std::fputc(c, _file);
 8001bda:	6961      	ldr	r1, [r4, #20]
 8001bdc:	0028      	movs	r0, r5
 8001bde:	f002 ff57 	bl	8004a90 <fputc>
 8001be2:	0005      	movs	r5, r0
    unlock();
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be8:	0020      	movs	r0, r4
 8001bea:	4798      	blx	r3
}
 8001bec:	0028      	movs	r0, r5
 8001bee:	bd70      	pop	{r4, r5, r6, pc}

08001bf0 <mbed_die>:
extern int stdio_uart_inited;
extern serial_t stdio_uart;
#endif

WEAK void mbed_die(void)
{
 8001bf0:	b530      	push	{r4, r5, lr}
 8001bf2:	b089      	sub	sp, #36	; 0x24
#if !defined (NRF51_H) && !defined(TARGET_EFM32)
    core_util_critical_section_enter();
 8001bf4:	f000 f838 	bl	8001c68 <core_util_critical_section_enter>
#endif
    gpio_t led_err;
    gpio_init_out(&led_err, LED1);
 8001bf8:	2105      	movs	r1, #5
 8001bfa:	a801      	add	r0, sp, #4
 8001bfc:	f7ff faf2 	bl	80011e4 <gpio_init_out>
 8001c00:	e021      	b.n	8001c46 <mbed_die+0x56>
        *obj->reg_set = obj->mask;
 8001c02:	9b03      	ldr	r3, [sp, #12]
 8001c04:	9a01      	ldr	r2, [sp, #4]
 8001c06:	601a      	str	r2, [r3, #0]

    while (1) {
        for (int i = 0; i < 4; ++i) {
            gpio_write(&led_err, 1);
            wait_ms(150);
 8001c08:	2096      	movs	r0, #150	; 0x96
 8001c0a:	f000 fcf1 	bl	80025f0 <wait_ms>
        *obj->reg_clr = obj->mask;
 8001c0e:	9b04      	ldr	r3, [sp, #16]
 8001c10:	9a01      	ldr	r2, [sp, #4]
 8001c12:	601a      	str	r2, [r3, #0]
            gpio_write(&led_err, 0);
            wait_ms(150);
 8001c14:	2096      	movs	r0, #150	; 0x96
 8001c16:	f000 fceb 	bl	80025f0 <wait_ms>
        for (int i = 0; i < 4; ++i) {
 8001c1a:	3401      	adds	r4, #1
 8001c1c:	2c03      	cmp	r4, #3
 8001c1e:	ddf0      	ble.n	8001c02 <mbed_die+0x12>
 8001c20:	2400      	movs	r4, #0
 8001c22:	e00e      	b.n	8001c42 <mbed_die+0x52>
        *obj->reg_set = obj->mask;
 8001c24:	9b03      	ldr	r3, [sp, #12]
 8001c26:	9a01      	ldr	r2, [sp, #4]
 8001c28:	601a      	str	r2, [r3, #0]
        }

        for (int i = 0; i < 4; ++i) {
            gpio_write(&led_err, 1);
            wait_ms(400);
 8001c2a:	25c8      	movs	r5, #200	; 0xc8
 8001c2c:	006d      	lsls	r5, r5, #1
 8001c2e:	0028      	movs	r0, r5
 8001c30:	f000 fcde 	bl	80025f0 <wait_ms>
        *obj->reg_clr = obj->mask;
 8001c34:	9b04      	ldr	r3, [sp, #16]
 8001c36:	9a01      	ldr	r2, [sp, #4]
 8001c38:	601a      	str	r2, [r3, #0]
            gpio_write(&led_err, 0);
            wait_ms(400);
 8001c3a:	0028      	movs	r0, r5
 8001c3c:	f000 fcd8 	bl	80025f0 <wait_ms>
        for (int i = 0; i < 4; ++i) {
 8001c40:	3401      	adds	r4, #1
 8001c42:	2c03      	cmp	r4, #3
 8001c44:	ddee      	ble.n	8001c24 <mbed_die+0x34>
        for (int i = 0; i < 4; ++i) {
 8001c46:	2400      	movs	r4, #0
 8001c48:	e7e8      	b.n	8001c1c <mbed_die+0x2c>

08001c4a <core_util_are_interrupts_enabled>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c4a:	f3ef 8310 	mrs	r3, PRIMASK
bool core_util_are_interrupts_enabled(void)
{
#if defined(__CORTEX_A9)
    return ((__get_CPSR() & 0x80) == 0);
#else
    return ((__get_PRIMASK() & 0x1) == 0);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	4018      	ands	r0, r3
 8001c52:	4243      	negs	r3, r0
 8001c54:	4158      	adcs	r0, r3
 8001c56:	b2c0      	uxtb	r0, r0
#endif
}
 8001c58:	4770      	bx	lr

08001c5a <core_util_is_isr_active>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c5a:	f3ef 8005 	mrs	r0, IPSR
        case CPSR_M_SVC:
        default:
            return true;
    }
#else
    return (__get_IPSR() != 0U);
 8001c5e:	1e43      	subs	r3, r0, #1
 8001c60:	4198      	sbcs	r0, r3
 8001c62:	b2c0      	uxtb	r0, r0
#endif
}
 8001c64:	4770      	bx	lr
	...

08001c68 <core_util_critical_section_enter>:
{
    return hal_in_critical_section();
}

void core_util_critical_section_enter(void)
{
 8001c68:	b510      	push	{r4, lr}
#else
    // If the reentrancy counter overflows something has gone badly wrong.
    MBED_ASSERT(critical_section_reentrancy_counter < UINT32_MAX);
#endif /* FEATURE_UVISOR */

    hal_critical_section_enter();
 8001c6a:	f7ff fa81 	bl	8001170 <hal_critical_section_enter>

    ++critical_section_reentrancy_counter;
 8001c6e:	4a02      	ldr	r2, [pc, #8]	; (8001c78 <core_util_critical_section_enter+0x10>)
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	6013      	str	r3, [r2, #0]
}
 8001c76:	bd10      	pop	{r4, pc}
 8001c78:	20000a3c 	.word	0x20000a3c

08001c7c <core_util_critical_section_exit>:

void core_util_critical_section_exit(void)
{
 8001c7c:	b510      	push	{r4, lr}
#ifdef FEATURE_UVISOR
#warning "core_util_critical_section_exit needs fixing to work from unprivileged code"
#endif /* FEATURE_UVISOR */

    // If critical_section_enter has not previously been called, do nothing
    if (critical_section_reentrancy_counter == 0) {
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <core_util_critical_section_exit+0x20>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <core_util_critical_section_exit+0x18>
        return;
    }

    --critical_section_reentrancy_counter;
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <core_util_critical_section_exit+0x20>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	3a01      	subs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

    if (critical_section_reentrancy_counter == 0) {
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d000      	beq.n	8001c96 <core_util_critical_section_exit+0x1a>
        hal_critical_section_exit();
    }
}
 8001c94:	bd10      	pop	{r4, pc}
        hal_critical_section_exit();
 8001c96:	f7ff fa7d 	bl	8001194 <hal_critical_section_exit>
 8001c9a:	e7fb      	b.n	8001c94 <core_util_critical_section_exit+0x18>
 8001c9c:	20000a3c 	.word	0x20000a3c

08001ca0 <core_util_atomic_incr_u16>:
    core_util_critical_section_exit();
    return newValue;
}

uint16_t core_util_atomic_incr_u16(volatile uint16_t *valuePtr, uint16_t delta)
{
 8001ca0:	b570      	push	{r4, r5, r6, lr}
 8001ca2:	0005      	movs	r5, r0
 8001ca4:	000c      	movs	r4, r1
    uint16_t newValue;
    core_util_critical_section_enter();
 8001ca6:	f7ff ffdf 	bl	8001c68 <core_util_critical_section_enter>
    newValue = *valuePtr + delta;
 8001caa:	8829      	ldrh	r1, [r5, #0]
 8001cac:	190c      	adds	r4, r1, r4
 8001cae:	b2a4      	uxth	r4, r4
    *valuePtr = newValue;
 8001cb0:	802c      	strh	r4, [r5, #0]
    core_util_critical_section_exit();
 8001cb2:	f7ff ffe3 	bl	8001c7c <core_util_critical_section_exit>
    return newValue;
}
 8001cb6:	0020      	movs	r0, r4
 8001cb8:	bd70      	pop	{r4, r5, r6, pc}

08001cba <core_util_atomic_decr_u16>:
    core_util_critical_section_exit();
    return newValue;
}

uint16_t core_util_atomic_decr_u16(volatile uint16_t *valuePtr, uint16_t delta)
{
 8001cba:	b570      	push	{r4, r5, r6, lr}
 8001cbc:	0005      	movs	r5, r0
 8001cbe:	000e      	movs	r6, r1
    uint16_t newValue;
    core_util_critical_section_enter();
 8001cc0:	f7ff ffd2 	bl	8001c68 <core_util_critical_section_enter>
    newValue = *valuePtr - delta;
 8001cc4:	882c      	ldrh	r4, [r5, #0]
 8001cc6:	1ba4      	subs	r4, r4, r6
 8001cc8:	b2a4      	uxth	r4, r4
    *valuePtr = newValue;
 8001cca:	802c      	strh	r4, [r5, #0]
    core_util_critical_section_exit();
 8001ccc:	f7ff ffd6 	bl	8001c7c <core_util_critical_section_exit>
    return newValue;
}
 8001cd0:	0020      	movs	r0, r4
 8001cd2:	bd70      	pop	{r4, r5, r6, pc}

08001cd4 <handle_error>:
    exit(1);
}

//Set an error status with the error handling system
static mbed_error_status_t handle_error(mbed_error_status_t error_status, unsigned int error_value, const char *filename, int line_number, void *caller)
{
 8001cd4:	b530      	push	{r4, r5, lr}
 8001cd6:	b08f      	sub	sp, #60	; 0x3c
 8001cd8:	0004      	movs	r4, r0
 8001cda:	000d      	movs	r5, r1
    mbed_error_ctx current_error_ctx;

    //Error status should always be < 0
    if (error_status >= 0) {
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	db00      	blt.n	8001ce2 <handle_error+0xe>
        //This is a weird situation, someone called mbed_error with invalid error code.
        //We will still handle the situation but change the error code to ERROR_INVALID_ARGUMENT, atleast the context will have info on who called it
        error_status = MBED_ERROR_INVALID_ARGUMENT;
 8001ce0:	4c16      	ldr	r4, [pc, #88]	; (8001d3c <handle_error+0x68>)
    }

    //Prevent corruption by holding out other callers
    //and we also need this until we remove the "error" call completely
    while (error_in_progress == 1);
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <handle_error+0x6c>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d0fb      	beq.n	8001ce2 <handle_error+0xe>

    //Use critsect here, as we don't want inadvertant modification of this global variable
    core_util_critical_section_enter();
 8001cea:	f7ff ffbd 	bl	8001c68 <core_util_critical_section_enter>
    error_in_progress = 1;
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <handle_error+0x6c>)
 8001cf2:	701a      	strb	r2, [r3, #0]
    core_util_critical_section_exit();
 8001cf4:	f7ff ffc2 	bl	8001c7c <core_util_critical_section_exit>

    //Increment error count
    error_count++;
 8001cf8:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <handle_error+0x70>)
 8001cfa:	6813      	ldr	r3, [r2, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	6013      	str	r3, [r2, #0]

    //Clear the context capturing buffer
    memset(&current_error_ctx, sizeof(mbed_error_ctx), 0);
    //Capture error information
    current_error_ctx.error_status = error_status;
 8001d00:	9401      	str	r4, [sp, #4]
    current_error_ctx.error_address = (uint32_t)caller;
 8001d02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001d04:	9202      	str	r2, [sp, #8]
    current_error_ctx.error_value = error_value;
 8001d06:	9503      	str	r5, [sp, #12]
    strncpy(current_error_ctx.error_filename, filename, MBED_CONF_PLATFORM_MAX_ERROR_FILENAME_LEN);
    current_error_ctx.error_line_number = line_number;
#endif

    //Capture the fist system error and store it
    if (error_count == 1) { //first error
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d010      	beq.n	8001d2e <handle_error+0x5a>
        memcpy(&first_error_ctx, &current_error_ctx, sizeof(mbed_error_ctx));
    }

    //copy this error to last error
    memcpy(&last_error_ctx, &current_error_ctx, sizeof(mbed_error_ctx));
 8001d0c:	2234      	movs	r2, #52	; 0x34
 8001d0e:	a901      	add	r1, sp, #4
 8001d10:	480d      	ldr	r0, [pc, #52]	; (8001d48 <handle_error+0x74>)
 8001d12:	f003 fc55 	bl	80055c0 <memcpy>
    //Log the error with error log
    mbed_error_hist_put(&current_error_ctx);
#endif

    //Call the error hook if available
    if (error_hook != NULL) {
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <handle_error+0x78>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <handle_error+0x4e>
        error_hook(&last_error_ctx);
 8001d1e:	480a      	ldr	r0, [pc, #40]	; (8001d48 <handle_error+0x74>)
 8001d20:	4798      	blx	r3
    }

    error_in_progress = 0;
 8001d22:	2200      	movs	r2, #0
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <handle_error+0x6c>)
 8001d26:	701a      	strb	r2, [r3, #0]

    return MBED_SUCCESS;
}
 8001d28:	2000      	movs	r0, #0
 8001d2a:	b00f      	add	sp, #60	; 0x3c
 8001d2c:	bd30      	pop	{r4, r5, pc}
        memcpy(&first_error_ctx, &current_error_ctx, sizeof(mbed_error_ctx));
 8001d2e:	2234      	movs	r2, #52	; 0x34
 8001d30:	a901      	add	r1, sp, #4
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <handle_error+0x7c>)
 8001d34:	f003 fc44 	bl	80055c0 <memcpy>
 8001d38:	e7e8      	b.n	8001d0c <handle_error+0x38>
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	80ff0101 	.word	0x80ff0101
 8001d40:	20000a48 	.word	0x20000a48
 8001d44:	20000a40 	.word	0x20000a40
 8001d48:	20000a80 	.word	0x20000a80
 8001d4c:	20000a44 	.word	0x20000a44
 8001d50:	20000a4c 	.word	0x20000a4c

08001d54 <mbed_halt_system>:
{
 8001d54:	b510      	push	{r4, lr}
    if (core_util_is_isr_active() || !core_util_are_interrupts_enabled()) {
 8001d56:	f7ff ff80 	bl	8001c5a <core_util_is_isr_active>
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	d103      	bne.n	8001d66 <mbed_halt_system+0x12>
 8001d5e:	f7ff ff74 	bl	8001c4a <core_util_are_interrupts_enabled>
 8001d62:	2800      	cmp	r0, #0
 8001d64:	d101      	bne.n	8001d6a <mbed_halt_system+0x16>
            __WFI();
 8001d66:	bf30      	wfi
 8001d68:	e7fd      	b.n	8001d66 <mbed_halt_system+0x12>
        exit(1);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f002 fb9e 	bl	80044ac <exit>

08001d70 <error>:
{
 8001d70:	b40f      	push	{r0, r1, r2, r3}
 8001d72:	b500      	push	{lr}
 8001d74:	b083      	sub	sp, #12
 8001d76:	4672      	mov	r2, lr
    if (error_in_progress) {
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <error+0x30>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <error+0x18>
}
 8001d80:	b003      	add	sp, #12
 8001d82:	bc08      	pop	{r3}
 8001d84:	b004      	add	sp, #16
 8001d86:	4718      	bx	r3
    handle_error(MBED_ERROR_UNKNOWN, 0, NULL, 0, MBED_CALLER_ADDR());
 8001d88:	2100      	movs	r1, #0
 8001d8a:	9200      	str	r2, [sp, #0]
 8001d8c:	000b      	movs	r3, r1
 8001d8e:	000a      	movs	r2, r1
 8001d90:	4804      	ldr	r0, [pc, #16]	; (8001da4 <error+0x34>)
 8001d92:	f7ff ff9f 	bl	8001cd4 <handle_error>
    error_in_progress = 1;
 8001d96:	2001      	movs	r0, #1
 8001d98:	4b01      	ldr	r3, [pc, #4]	; (8001da0 <error+0x30>)
 8001d9a:	7018      	strb	r0, [r3, #0]
    exit(1);
 8001d9c:	f002 fb86 	bl	80044ac <exit>
 8001da0:	20000a48 	.word	0x20000a48
 8001da4:	80ff0100 	.word	0x80ff0100

08001da8 <mbed_error>:
    return handle_error(error_status, error_value, filename, line_number, MBED_CALLER_ADDR());
}

//Sets a fatal error, this function is marked WEAK to be able to override this for some tests
WEAK mbed_error_status_t mbed_error(mbed_error_status_t error_status, const char *error_msg, unsigned int error_value, const char *filename, int line_number)
{
 8001da8:	b500      	push	{lr}
 8001daa:	b083      	sub	sp, #12
 8001dac:	0011      	movs	r1, r2
 8001dae:	001a      	movs	r2, r3
    //set the error reported and then halt the system
    if (MBED_SUCCESS != handle_error(error_status, error_value, filename, line_number, MBED_CALLER_ADDR())) {
 8001db0:	4673      	mov	r3, lr
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	9b04      	ldr	r3, [sp, #16]
 8001db6:	f7ff ff8d 	bl	8001cd4 <handle_error>
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	d002      	beq.n	8001dc4 <mbed_error+0x1c>
    //On fatal errors print the error context/report
    ERROR_REPORT(&last_error_ctx, error_msg);
    mbed_halt_system();

    return MBED_ERROR_FAILED_OPERATION;
}
 8001dbe:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <mbed_error+0x20>)
 8001dc0:	b003      	add	sp, #12
 8001dc2:	bd00      	pop	{pc}
    mbed_halt_system();
 8001dc4:	f7ff ffc6 	bl	8001d54 <mbed_halt_system>
 8001dc8:	80ff010f 	.word	0x80ff010f

08001dcc <_ZN12DirectSerial4seekEli>:
    virtual ssize_t write(const void *buffer, size_t size);
    virtual ssize_t read(void *buffer, size_t size);
    virtual off_t seek(off_t offset, int whence = SEEK_SET)
    {
        return -ESPIPE;
    }
 8001dcc:	201d      	movs	r0, #29
 8001dce:	4240      	negs	r0, r0
 8001dd0:	4770      	bx	lr

08001dd2 <_ZN12DirectSerial4sizeEv>:
    virtual off_t size()
    {
        return -EINVAL;
    }
 8001dd2:	2016      	movs	r0, #22
 8001dd4:	4240      	negs	r0, r0
 8001dd6:	4770      	bx	lr

08001dd8 <_ZN12DirectSerial6isattyEv>:
    virtual int isatty()
    {
        return true;
    }
 8001dd8:	2001      	movs	r0, #1
 8001dda:	4770      	bx	lr

08001ddc <_ZN12DirectSerial5closeEv>:
    virtual int close()
    {
        return 0;
    }
 8001ddc:	2000      	movs	r0, #0
 8001dde:	4770      	bx	lr

08001de0 <_ZL12convert_crlfi>:
#elif MBED_CONF_PLATFORM_STDIO_CONVERT_NEWLINES
    return fd < 3 && isatty(fd);
#else
    return false;
#endif
}
 8001de0:	2000      	movs	r0, #0
 8001de2:	4770      	bx	lr

08001de4 <_ZN12DirectSerialD1Ev>:
class DirectSerial : public FileHandle {
 8001de4:	4770      	bx	lr
	...

08001de8 <_ZN12DirectSerial5writeEPKvj>:
{
 8001de8:	b570      	push	{r4, r5, r6, lr}
 8001dea:	000e      	movs	r6, r1
 8001dec:	0015      	movs	r5, r2
    for (size_t i = 0; i < size; i++) {
 8001dee:	2400      	movs	r4, #0
 8001df0:	42ac      	cmp	r4, r5
 8001df2:	d205      	bcs.n	8001e00 <_ZN12DirectSerial5writeEPKvj+0x18>
        serial_putc(&stdio_uart, buf[i]);
 8001df4:	5d31      	ldrb	r1, [r6, r4]
 8001df6:	4803      	ldr	r0, [pc, #12]	; (8001e04 <_ZN12DirectSerial5writeEPKvj+0x1c>)
 8001df8:	f001 ff70 	bl	8003cdc <serial_putc>
    for (size_t i = 0; i < size; i++) {
 8001dfc:	3401      	adds	r4, #1
 8001dfe:	e7f7      	b.n	8001df0 <_ZN12DirectSerial5writeEPKvj+0x8>
}
 8001e00:	0028      	movs	r0, r5
 8001e02:	bd70      	pop	{r4, r5, r6, pc}
 8001e04:	20000d64 	.word	0x20000d64

08001e08 <_ZN12DirectSerial4readEPvj>:
{
 8001e08:	b510      	push	{r4, lr}
 8001e0a:	000c      	movs	r4, r1
    if (size == 0) {
 8001e0c:	2a00      	cmp	r2, #0
 8001e0e:	d101      	bne.n	8001e14 <_ZN12DirectSerial4readEPvj+0xc>
        return 0;
 8001e10:	2000      	movs	r0, #0
}
 8001e12:	bd10      	pop	{r4, pc}
    buf[0] = serial_getc(&stdio_uart);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <_ZN12DirectSerial4readEPvj+0x18>)
 8001e16:	f001 ff4d 	bl	8003cb4 <serial_getc>
 8001e1a:	7020      	strb	r0, [r4, #0]
    return 1;
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	e7f8      	b.n	8001e12 <_ZN12DirectSerial4readEPvj+0xa>
 8001e20:	20000d64 	.word	0x20000d64

08001e24 <_ZNK12DirectSerial4pollEs>:
{
 8001e24:	b570      	push	{r4, r5, r6, lr}
    if ((events & POLLIN) && serial_readable(&stdio_uart)) {
 8001e26:	b28c      	uxth	r4, r1
 8001e28:	07e3      	lsls	r3, r4, #31
 8001e2a:	d40d      	bmi.n	8001e48 <_ZNK12DirectSerial4pollEs+0x24>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d113      	bne.n	8001e5a <_ZNK12DirectSerial4pollEs+0x36>
    short revents = 0;
 8001e32:	2500      	movs	r5, #0
    if ((events & POLLOUT) && serial_writable(&stdio_uart)) {
 8001e34:	06e3      	lsls	r3, r4, #27
 8001e36:	d412      	bmi.n	8001e5e <_ZNK12DirectSerial4pollEs+0x3a>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <_ZNK12DirectSerial4pollEs+0x20>
        revents |= POLLOUT;
 8001e3e:	2310      	movs	r3, #16
 8001e40:	431d      	orrs	r5, r3
 8001e42:	b22d      	sxth	r5, r5
}
 8001e44:	0028      	movs	r0, r5
 8001e46:	bd70      	pop	{r4, r5, r6, pc}
    if ((events & POLLIN) && serial_readable(&stdio_uart)) {
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <_ZNK12DirectSerial4pollEs+0x4c>)
 8001e4a:	f002 f91b 	bl	8004084 <serial_readable>
 8001e4e:	2800      	cmp	r0, #0
 8001e50:	d001      	beq.n	8001e56 <_ZNK12DirectSerial4pollEs+0x32>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e7eb      	b.n	8001e2e <_ZNK12DirectSerial4pollEs+0xa>
 8001e56:	2300      	movs	r3, #0
 8001e58:	e7e9      	b.n	8001e2e <_ZNK12DirectSerial4pollEs+0xa>
        revents |= POLLIN;
 8001e5a:	2501      	movs	r5, #1
 8001e5c:	e7ea      	b.n	8001e34 <_ZNK12DirectSerial4pollEs+0x10>
    if ((events & POLLOUT) && serial_writable(&stdio_uart)) {
 8001e5e:	4804      	ldr	r0, [pc, #16]	; (8001e70 <_ZNK12DirectSerial4pollEs+0x4c>)
 8001e60:	f002 f928 	bl	80040b4 <serial_writable>
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d001      	beq.n	8001e6c <_ZNK12DirectSerial4pollEs+0x48>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e7e6      	b.n	8001e3a <_ZNK12DirectSerial4pollEs+0x16>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e7e4      	b.n	8001e3a <_ZNK12DirectSerial4pollEs+0x16>
 8001e70:	20000d64 	.word	0x20000d64

08001e74 <_ZL14unbind_from_fdiPN4mbed10FileHandleE>:
{
 8001e74:	b510      	push	{r4, lr}
    if (filehandles[fd] == fh) {
 8001e76:	0082      	lsls	r2, r0, #2
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_ZL14unbind_from_fdiPN4mbed10FileHandleE+0x28>)
 8001e7a:	58d3      	ldr	r3, [r2, r3]
 8001e7c:	428b      	cmp	r3, r1
 8001e7e:	d105      	bne.n	8001e8c <_ZL14unbind_from_fdiPN4mbed10FileHandleE+0x18>
        filehandles[fd] = NULL;
 8001e80:	0010      	movs	r0, r2
 8001e82:	2200      	movs	r2, #0
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <_ZL14unbind_from_fdiPN4mbed10FileHandleE+0x28>)
 8001e86:	50c2      	str	r2, [r0, r3]
        return 0;
 8001e88:	2000      	movs	r0, #0
}
 8001e8a:	bd10      	pop	{r4, pc}
        errno = EBADF;
 8001e8c:	f002 fb08 	bl	80044a0 <__errno>
 8001e90:	2309      	movs	r3, #9
 8001e92:	6003      	str	r3, [r0, #0]
        return -1;
 8001e94:	2001      	movs	r0, #1
 8001e96:	4240      	negs	r0, r0
 8001e98:	e7f7      	b.n	8001e8a <_ZL14unbind_from_fdiPN4mbed10FileHandleE+0x16>
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	200000c8 	.word	0x200000c8

08001ea0 <_ZL18handle_open_errorsij>:
{
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	0005      	movs	r5, r0
 8001ea4:	000c      	movs	r4, r1
    errno = -error;
 8001ea6:	f002 fafb 	bl	80044a0 <__errno>
 8001eaa:	426d      	negs	r5, r5
 8001eac:	6005      	str	r5, [r0, #0]
    filehandles[filehandle_idx] = NULL;
 8001eae:	00a4      	lsls	r4, r4, #2
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <_ZL18handle_open_errorsij+0x1c>)
 8001eb4:	50e2      	str	r2, [r4, r3]
}
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	4240      	negs	r0, r0
 8001eba:	bd70      	pop	{r4, r5, r6, pc}
 8001ebc:	200000c8 	.word	0x200000c8

08001ec0 <_ZL18reserve_filehandlev>:
{
 8001ec0:	b510      	push	{r4, lr}
        if (NULL == _ptr) {
 8001ec2:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <_ZL18reserve_filehandlev+0x64>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00b      	beq.n	8001ee2 <_ZL18reserve_filehandlev+0x22>
        return _ptr;
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <_ZL18reserve_filehandlev+0x64>)
 8001ecc:	6819      	ldr	r1, [r3, #0]
    for (fh_i = 3; fh_i < OPEN_MAX; fh_i++) {
 8001ece:	2003      	movs	r0, #3
 8001ed0:	283f      	cmp	r0, #63	; 0x3f
 8001ed2:	dc0a      	bgt.n	8001eea <_ZL18reserve_filehandlev+0x2a>
        if (filehandles[fh_i] == NULL) {
 8001ed4:	0083      	lsls	r3, r0, #2
 8001ed6:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <_ZL18reserve_filehandlev+0x68>)
 8001ed8:	589b      	ldr	r3, [r3, r2]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <_ZL18reserve_filehandlev+0x2a>
    for (fh_i = 3; fh_i < OPEN_MAX; fh_i++) {
 8001ede:	3001      	adds	r0, #1
 8001ee0:	e7f6      	b.n	8001ed0 <_ZL18reserve_filehandlev+0x10>
                _ptr = new (_data) T();
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <_ZL18reserve_filehandlev+0x64>)
 8001ee4:	1d1a      	adds	r2, r3, #4
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e7ef      	b.n	8001eca <_ZL18reserve_filehandlev+0xa>
    if (fh_i >= OPEN_MAX) {
 8001eea:	283f      	cmp	r0, #63	; 0x3f
 8001eec:	dc07      	bgt.n	8001efe <_ZL18reserve_filehandlev+0x3e>
    filehandles[fh_i] = FILE_HANDLE_RESERVED;
 8001eee:	0083      	lsls	r3, r0, #2
 8001ef0:	2401      	movs	r4, #1
 8001ef2:	4264      	negs	r4, r4
 8001ef4:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <_ZL18reserve_filehandlev+0x68>)
 8001ef6:	509c      	str	r4, [r3, r2]
        if (NULL == _ptr) {
 8001ef8:	2900      	cmp	r1, #0
 8001efa:	d00f      	beq.n	8001f1c <_ZL18reserve_filehandlev+0x5c>
}
 8001efc:	bd10      	pop	{r4, pc}
        errno = EMFILE;
 8001efe:	f002 facf 	bl	80044a0 <__errno>
 8001f02:	2318      	movs	r3, #24
 8001f04:	6003      	str	r3, [r0, #0]
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <_ZL18reserve_filehandlev+0x64>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <_ZL18reserve_filehandlev+0x54>
        return -1;
 8001f0e:	2001      	movs	r0, #1
 8001f10:	4240      	negs	r0, r0
 8001f12:	e7f3      	b.n	8001efc <_ZL18reserve_filehandlev+0x3c>
                _ptr = new (_data) T();
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <_ZL18reserve_filehandlev+0x64>)
 8001f16:	1d1a      	adds	r2, r3, #4
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e7f8      	b.n	8001f0e <_ZL18reserve_filehandlev+0x4e>
 8001f1c:	4b01      	ldr	r3, [pc, #4]	; (8001f24 <_ZL18reserve_filehandlev+0x64>)
 8001f1e:	1d1a      	adds	r2, r3, #4
 8001f20:	601a      	str	r2, [r3, #0]
    return fh_i;
 8001f22:	e7eb      	b.n	8001efc <_ZL18reserve_filehandlev+0x3c>
 8001f24:	20000b38 	.word	0x20000b38
 8001f28:	200000c8 	.word	0x200000c8

08001f2c <_ZN4mbed17remove_filehandleEPNS_10FileHandleE>:
{
 8001f2c:	b530      	push	{r4, r5, lr}
        if (NULL == _ptr) {
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x40>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x12>
        return _ptr;
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x40>)
 8001f38:	681d      	ldr	r5, [r3, #0]
    for (unsigned int fh_i = 0; fh_i < sizeof(filehandles) / sizeof(*filehandles); fh_i++) {
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e004      	b.n	8001f48 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x1c>
                _ptr = new (_data) T();
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x40>)
 8001f40:	1d1a      	adds	r2, r3, #4
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e7f7      	b.n	8001f36 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0xa>
 8001f46:	3301      	adds	r3, #1
 8001f48:	2b3f      	cmp	r3, #63	; 0x3f
 8001f4a:	d808      	bhi.n	8001f5e <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x32>
        if (filehandles[fh_i] == file) {
 8001f4c:	009a      	lsls	r2, r3, #2
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x44>)
 8001f50:	5852      	ldr	r2, [r2, r1]
 8001f52:	4282      	cmp	r2, r0
 8001f54:	d1f7      	bne.n	8001f46 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x1a>
            filehandles[fh_i] = NULL;
 8001f56:	009a      	lsls	r2, r3, #2
 8001f58:	2400      	movs	r4, #0
 8001f5a:	5054      	str	r4, [r2, r1]
 8001f5c:	e7f3      	b.n	8001f46 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x1a>
        if (NULL == _ptr) {
 8001f5e:	2d00      	cmp	r5, #0
 8001f60:	d000      	beq.n	8001f64 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x38>
}
 8001f62:	bd30      	pop	{r4, r5, pc}
                _ptr = new (_data) T();
 8001f64:	4b01      	ldr	r3, [pc, #4]	; (8001f6c <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x40>)
 8001f66:	1d1a      	adds	r2, r3, #4
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e7fa      	b.n	8001f62 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x36>
 8001f6c:	20000b38 	.word	0x20000b38
 8001f70:	200000c8 	.word	0x200000c8

08001f74 <_ZN12DirectSerialC1E7PinNameS0_i>:
DirectSerial::DirectSerial(PinName tx, PinName rx, int baud)
 8001f74:	b570      	push	{r4, r5, r6, lr}
 8001f76:	0004      	movs	r4, r0
 8001f78:	001d      	movs	r5, r3
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <_ZN12DirectSerialC1E7PinNameS0_i+0x2c>)
 8001f7c:	3308      	adds	r3, #8
 8001f7e:	6003      	str	r3, [r0, #0]
    if (stdio_uart_inited) {
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <_ZN12DirectSerialC1E7PinNameS0_i+0x30>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <_ZN12DirectSerialC1E7PinNameS0_i+0x18>
}
 8001f88:	0020      	movs	r0, r4
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}
    serial_init(&stdio_uart, tx, rx);
 8001f8c:	4e06      	ldr	r6, [pc, #24]	; (8001fa8 <_ZN12DirectSerialC1E7PinNameS0_i+0x34>)
 8001f8e:	0030      	movs	r0, r6
 8001f90:	f002 f904 	bl	800419c <serial_init>
    serial_baud(&stdio_uart, baud);
 8001f94:	0029      	movs	r1, r5
 8001f96:	0030      	movs	r0, r6
 8001f98:	f002 f8da 	bl	8004150 <serial_baud>
 8001f9c:	e7f4      	b.n	8001f88 <_ZN12DirectSerialC1E7PinNameS0_i+0x14>
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	08006100 	.word	0x08006100
 8001fa4:	20000b6c 	.word	0x20000b6c
 8001fa8:	20000d64 	.word	0x20000d64

08001fac <_ZL15default_consolev>:
{
 8001fac:	b510      	push	{r4, lr}
    static DirectSerial console(STDIO_UART_TX, STDIO_UART_RX, MBED_CONF_PLATFORM_STDIO_BAUD_RATE);
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <_ZL15default_consolev+0x30>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	07db      	lsls	r3, r3, #31
 8001fb4:	d501      	bpl.n	8001fba <_ZL15default_consolev+0xe>
}
 8001fb6:	480a      	ldr	r0, [pc, #40]	; (8001fe0 <_ZL15default_consolev+0x34>)
 8001fb8:	bd10      	pop	{r4, pc}
    static DirectSerial console(STDIO_UART_TX, STDIO_UART_RX, MBED_CONF_PLATFORM_STDIO_BAUD_RATE);
 8001fba:	4c09      	ldr	r4, [pc, #36]	; (8001fe0 <_ZL15default_consolev+0x34>)
 8001fbc:	2396      	movs	r3, #150	; 0x96
 8001fbe:	019b      	lsls	r3, r3, #6
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	0020      	movs	r0, r4
 8001fc6:	f7ff ffd5 	bl	8001f74 <_ZN12DirectSerialC1E7PinNameS0_i>
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <_ZL15default_consolev+0x30>)
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <_ZL15default_consolev+0x38>)
 8001fd2:	4905      	ldr	r1, [pc, #20]	; (8001fe8 <_ZL15default_consolev+0x3c>)
 8001fd4:	0020      	movs	r0, r4
 8001fd6:	f000 fa9f 	bl	8002518 <__aeabi_atexit>
 8001fda:	e7ec      	b.n	8001fb6 <_ZL15default_consolev+0xa>
 8001fdc:	20000ab4 	.word	0x20000ab4
 8001fe0:	20000b40 	.word	0x20000b40
 8001fe4:	200000c0 	.word	0x200000c0
 8001fe8:	08001de5 	.word	0x08001de5

08001fec <_ZN4mbed28mbed_target_override_consoleEi>:
}
 8001fec:	2000      	movs	r0, #0
 8001fee:	4770      	bx	lr

08001ff0 <_ZN4mbed21mbed_override_consoleEi>:
}
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	4770      	bx	lr

08001ff4 <_ZL11get_consolei>:
{
 8001ff4:	b510      	push	{r4, lr}
 8001ff6:	0004      	movs	r4, r0
    FileHandle *fh = mbed_override_console(fd);
 8001ff8:	f7ff fffa 	bl	8001ff0 <_ZN4mbed21mbed_override_consoleEi>
    if (fh) {
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d000      	beq.n	8002002 <_ZL11get_consolei+0xe>
}
 8002000:	bd10      	pop	{r4, pc}
    fh = mbed_target_override_console(fd);
 8002002:	0020      	movs	r0, r4
 8002004:	f7ff fff2 	bl	8001fec <_ZN4mbed28mbed_target_override_consoleEi>
    if (fh) {
 8002008:	2800      	cmp	r0, #0
 800200a:	d1f9      	bne.n	8002000 <_ZL11get_consolei+0xc>
    return default_console();
 800200c:	f7ff ffce 	bl	8001fac <_ZL15default_consolev>
 8002010:	e7f6      	b.n	8002000 <_ZL11get_consolei+0xc>
	...

08002014 <_ZL7get_fhci>:
{
 8002014:	b510      	push	{r4, lr}
 8002016:	0004      	movs	r4, r0
    if (fd >= OPEN_MAX) {
 8002018:	283f      	cmp	r0, #63	; 0x3f
 800201a:	dc0e      	bgt.n	800203a <_ZL7get_fhci+0x26>
    FileHandle *fh = filehandles[fd];
 800201c:	0083      	lsls	r3, r0, #2
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <_ZL7get_fhci+0x2c>)
 8002020:	5898      	ldr	r0, [r3, r2]
    if (fh == FILE_HANDLE_RESERVED && fd < 3) {
 8002022:	1c43      	adds	r3, r0, #1
 8002024:	d000      	beq.n	8002028 <_ZL7get_fhci+0x14>
}
 8002026:	bd10      	pop	{r4, pc}
    if (fh == FILE_HANDLE_RESERVED && fd < 3) {
 8002028:	2c02      	cmp	r4, #2
 800202a:	dcfc      	bgt.n	8002026 <_ZL7get_fhci+0x12>
        filehandles[fd] = fh = get_console(fd);
 800202c:	0020      	movs	r0, r4
 800202e:	f7ff ffe1 	bl	8001ff4 <_ZL11get_consolei>
 8002032:	00a4      	lsls	r4, r4, #2
 8002034:	4b02      	ldr	r3, [pc, #8]	; (8002040 <_ZL7get_fhci+0x2c>)
 8002036:	50e0      	str	r0, [r4, r3]
 8002038:	e7f5      	b.n	8002026 <_ZL7get_fhci+0x12>
        return NULL;
 800203a:	2000      	movs	r0, #0
 800203c:	e7f3      	b.n	8002026 <_ZL7get_fhci+0x12>
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	200000c8 	.word	0x200000c8

08002044 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE>:
{
 8002044:	b510      	push	{r4, lr}
 8002046:	0004      	movs	r4, r0
    int fildes = reserve_filehandle();
 8002048:	f7ff ff3a 	bl	8001ec0 <_ZL18reserve_filehandlev>
    if (fildes < 0) {
 800204c:	2800      	cmp	r0, #0
 800204e:	db07      	blt.n	8002060 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE+0x1c>
    filehandles[fildes] = fh;
 8002050:	0083      	lsls	r3, r0, #2
 8002052:	4a04      	ldr	r2, [pc, #16]	; (8002064 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE+0x20>)
 8002054:	509c      	str	r4, [r3, r2]
    stdio_in_prev[fildes] = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	4a03      	ldr	r2, [pc, #12]	; (8002068 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE+0x24>)
 800205a:	5413      	strb	r3, [r2, r0]
    stdio_out_prev[fildes] = 0;
 800205c:	4a03      	ldr	r2, [pc, #12]	; (800206c <_ZN4mbed10bind_to_fdEPNS_10FileHandleE+0x28>)
 800205e:	5413      	strb	r3, [r2, r0]
}
 8002060:	bd10      	pop	{r4, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	200000c8 	.word	0x200000c8
 8002068:	20000ab8 	.word	0x20000ab8
 800206c:	20000af8 	.word	0x20000af8

08002070 <open>:
{
 8002070:	b40e      	push	{r1, r2, r3}
 8002072:	b570      	push	{r4, r5, r6, lr}
 8002074:	b085      	sub	sp, #20
 8002076:	0005      	movs	r5, r0
    int fildes = reserve_filehandle();
 8002078:	f7ff ff22 	bl	8001ec0 <_ZL18reserve_filehandlev>
 800207c:	1e04      	subs	r4, r0, #0
    if (fildes < 0) {
 800207e:	db1c      	blt.n	80020ba <open+0x4a>
    FileHandle *res = NULL;
 8002080:	2300      	movs	r3, #0
 8002082:	9303      	str	r3, [sp, #12]
    FilePath path(name);
 8002084:	0029      	movs	r1, r5
 8002086:	a801      	add	r0, sp, #4
 8002088:	f7ff fcb2 	bl	80019f0 <_ZN4mbed8FilePathC1EPKc>
    if (!path.exists()) {
 800208c:	a801      	add	r0, sp, #4
 800208e:	f7ff fd08 	bl	8001aa2 <_ZN4mbed8FilePath6existsEv>
 8002092:	2800      	cmp	r0, #0
 8002094:	d017      	beq.n	80020c6 <open+0x56>
    if (path.isFile()) {
 8002096:	a801      	add	r0, sp, #4
 8002098:	f7ff fce8 	bl	8001a6c <_ZN4mbed8FilePath6isFileEv>
 800209c:	2800      	cmp	r0, #0
 800209e:	d018      	beq.n	80020d2 <open+0x62>
        res = path.file();
 80020a0:	a801      	add	r0, sp, #4
 80020a2:	f7ff fcef 	bl	8001a84 <_ZN4mbed8FilePath4fileEv>
 80020a6:	9003      	str	r0, [sp, #12]
    filehandles[fildes] = res;
 80020a8:	00a3      	lsls	r3, r4, #2
 80020aa:	4a18      	ldr	r2, [pc, #96]	; (800210c <open+0x9c>)
 80020ac:	9903      	ldr	r1, [sp, #12]
 80020ae:	5099      	str	r1, [r3, r2]
    stdio_in_prev[fildes] = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	4a17      	ldr	r2, [pc, #92]	; (8002110 <open+0xa0>)
 80020b4:	5513      	strb	r3, [r2, r4]
    stdio_out_prev[fildes] = 0;
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <open+0xa4>)
 80020b8:	5513      	strb	r3, [r2, r4]
}
 80020ba:	0020      	movs	r0, r4
 80020bc:	b005      	add	sp, #20
 80020be:	bc70      	pop	{r4, r5, r6}
 80020c0:	bc08      	pop	{r3}
 80020c2:	b003      	add	sp, #12
 80020c4:	4718      	bx	r3
        return handle_open_errors(-ENODEV, fildes);
 80020c6:	0021      	movs	r1, r4
 80020c8:	3813      	subs	r0, #19
 80020ca:	f7ff fee9 	bl	8001ea0 <_ZL18handle_open_errorsij>
 80020ce:	0004      	movs	r4, r0
 80020d0:	e7f3      	b.n	80020ba <open+0x4a>
        FileSystemHandle *fs = path.fileSystem();
 80020d2:	a801      	add	r0, sp, #4
 80020d4:	f7ff fcbb 	bl	8001a4e <_ZN4mbed8FilePath10fileSystemEv>
 80020d8:	1e05      	subs	r5, r0, #0
        if (fs == NULL) {
 80020da:	d010      	beq.n	80020fe <open+0x8e>
        int err = fs->open(&res, path.fileName(), oflag);
 80020dc:	6803      	ldr	r3, [r0, #0]
 80020de:	689e      	ldr	r6, [r3, #8]
 80020e0:	a801      	add	r0, sp, #4
 80020e2:	f7ff fca5 	bl	8001a30 <_ZN4mbed8FilePath8fileNameEv>
 80020e6:	0002      	movs	r2, r0
 80020e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020ea:	a903      	add	r1, sp, #12
 80020ec:	0028      	movs	r0, r5
 80020ee:	47b0      	blx	r6
        if (err) {
 80020f0:	2800      	cmp	r0, #0
 80020f2:	d0d9      	beq.n	80020a8 <open+0x38>
            return handle_open_errors(err, fildes);
 80020f4:	0021      	movs	r1, r4
 80020f6:	f7ff fed3 	bl	8001ea0 <_ZL18handle_open_errorsij>
 80020fa:	0004      	movs	r4, r0
 80020fc:	e7dd      	b.n	80020ba <open+0x4a>
            return handle_open_errors(-ENODEV, fildes);
 80020fe:	0021      	movs	r1, r4
 8002100:	2013      	movs	r0, #19
 8002102:	4240      	negs	r0, r0
 8002104:	f7ff fecc 	bl	8001ea0 <_ZL18handle_open_errorsij>
 8002108:	0004      	movs	r4, r0
 800210a:	e7d6      	b.n	80020ba <open+0x4a>
 800210c:	200000c8 	.word	0x200000c8
 8002110:	20000ab8 	.word	0x20000ab8
 8002114:	20000af8 	.word	0x20000af8

08002118 <_open>:
{
 8002118:	b570      	push	{r4, r5, r6, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	0005      	movs	r5, r0
 800211e:	000e      	movs	r6, r1
    if (std::strcmp(name, __stdin_name) == 0) {
 8002120:	4918      	ldr	r1, [pc, #96]	; (8002184 <_open+0x6c>)
 8002122:	f7fd fff1 	bl	8000108 <strcmp>
 8002126:	1e04      	subs	r4, r0, #0
 8002128:	d015      	beq.n	8002156 <_open+0x3e>
    } else if (std::strcmp(name, __stdout_name) == 0) {
 800212a:	4917      	ldr	r1, [pc, #92]	; (8002188 <_open+0x70>)
 800212c:	0028      	movs	r0, r5
 800212e:	f7fd ffeb 	bl	8000108 <strcmp>
 8002132:	2800      	cmp	r0, #0
 8002134:	d013      	beq.n	800215e <_open+0x46>
    } else if (std::strcmp(name, __stderr_name) == 0) {
 8002136:	4915      	ldr	r1, [pc, #84]	; (800218c <_open+0x74>)
 8002138:	0028      	movs	r0, r5
 800213a:	f7fd ffe5 	bl	8000108 <strcmp>
 800213e:	2800      	cmp	r0, #0
 8002140:	d012      	beq.n	8002168 <_open+0x50>
    if (name[0] == '@') {
 8002142:	782b      	ldrb	r3, [r5, #0]
 8002144:	2b40      	cmp	r3, #64	; 0x40
 8002146:	d016      	beq.n	8002176 <_open+0x5e>
    posix &= ~O_BINARY;
 8002148:	4911      	ldr	r1, [pc, #68]	; (8002190 <_open+0x78>)
 800214a:	4031      	ands	r1, r6
    return open(name, openflags_to_posix(openflags));
 800214c:	0028      	movs	r0, r5
 800214e:	f7ff ff8f 	bl	8002070 <open>
 8002152:	0004      	movs	r4, r0
 8002154:	e00c      	b.n	8002170 <_open+0x58>
        get_fhc(STDIN_FILENO);
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff ff5c 	bl	8002014 <_ZL7get_fhci>
        return STDIN_FILENO;
 800215c:	e008      	b.n	8002170 <_open+0x58>
        get_fhc(STDOUT_FILENO);
 800215e:	3001      	adds	r0, #1
 8002160:	f7ff ff58 	bl	8002014 <_ZL7get_fhci>
        return STDOUT_FILENO;
 8002164:	2401      	movs	r4, #1
 8002166:	e003      	b.n	8002170 <_open+0x58>
        get_fhc(STDERR_FILENO);
 8002168:	3002      	adds	r0, #2
 800216a:	f7ff ff53 	bl	8002014 <_ZL7get_fhci>
        return STDERR_FILENO;
 800216e:	2402      	movs	r4, #2
}
 8002170:	0020      	movs	r0, r4
 8002172:	b002      	add	sp, #8
 8002174:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(&fd, name + 1, sizeof fd);
 8002176:	1c69      	adds	r1, r5, #1
 8002178:	2204      	movs	r2, #4
 800217a:	a801      	add	r0, sp, #4
 800217c:	f003 fa20 	bl	80055c0 <memcpy>
        return fd;
 8002180:	9c01      	ldr	r4, [sp, #4]
 8002182:	e7f5      	b.n	8002170 <_open+0x58>
 8002184:	08006158 	.word	0x08006158
 8002188:	08006160 	.word	0x08006160
 800218c:	08006150 	.word	0x08006150
 8002190:	ffff7fff 	.word	0xffff7fff

08002194 <close>:
{
 8002194:	b510      	push	{r4, lr}
 8002196:	0004      	movs	r4, r0
    FileHandle *fhc = get_fhc(fildes);
 8002198:	f7ff ff3c 	bl	8002014 <_ZL7get_fhci>
    filehandles[fildes] = NULL;
 800219c:	00a4      	lsls	r4, r4, #2
 800219e:	2200      	movs	r2, #0
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <close+0x40>)
 80021a2:	50e2      	str	r2, [r4, r3]
    if (fhc == NULL) {
 80021a4:	2800      	cmp	r0, #0
 80021a6:	d006      	beq.n	80021b6 <close+0x22>
    int err = fhc->close();
 80021a8:	6803      	ldr	r3, [r0, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	4798      	blx	r3
 80021ae:	1e04      	subs	r4, r0, #0
    if (err < 0) {
 80021b0:	db08      	blt.n	80021c4 <close+0x30>
        return 0;
 80021b2:	2000      	movs	r0, #0
}
 80021b4:	bd10      	pop	{r4, pc}
        errno = EBADF;
 80021b6:	f002 f973 	bl	80044a0 <__errno>
 80021ba:	2309      	movs	r3, #9
 80021bc:	6003      	str	r3, [r0, #0]
        return -1;
 80021be:	2001      	movs	r0, #1
 80021c0:	4240      	negs	r0, r0
 80021c2:	e7f7      	b.n	80021b4 <close+0x20>
        errno = -err;
 80021c4:	f002 f96c 	bl	80044a0 <__errno>
 80021c8:	4264      	negs	r4, r4
 80021ca:	6004      	str	r4, [r0, #0]
        return -1;
 80021cc:	2001      	movs	r0, #1
 80021ce:	4240      	negs	r0, r0
 80021d0:	e7f0      	b.n	80021b4 <close+0x20>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	200000c8 	.word	0x200000c8

080021d8 <_close>:
{
 80021d8:	b510      	push	{r4, lr}
    return close(fh);
 80021da:	f7ff ffdb 	bl	8002194 <close>
}
 80021de:	bd10      	pop	{r4, pc}

080021e0 <write>:
    return written;
#endif
}

extern "C" ssize_t write(int fildes, const void *buf, size_t length)
{
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	000c      	movs	r4, r1
 80021e4:	0015      	movs	r5, r2

    FileHandle *fhc = get_fhc(fildes);
 80021e6:	f7ff ff15 	bl	8002014 <_ZL7get_fhci>
    if (fhc == NULL) {
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d008      	beq.n	8002200 <write+0x20>
        errno = EBADF;
        return -1;
    }

    ssize_t ret = fhc->write(buf, length);
 80021ee:	6803      	ldr	r3, [r0, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	002a      	movs	r2, r5
 80021f4:	0021      	movs	r1, r4
 80021f6:	4798      	blx	r3
 80021f8:	1e04      	subs	r4, r0, #0
    if (ret < 0) {
 80021fa:	db08      	blt.n	800220e <write+0x2e>
        errno = -ret;
        return -1;
    } else {
        return ret;
    }
}
 80021fc:	0020      	movs	r0, r4
 80021fe:	bd70      	pop	{r4, r5, r6, pc}
        errno = EBADF;
 8002200:	f002 f94e 	bl	80044a0 <__errno>
 8002204:	2309      	movs	r3, #9
 8002206:	6003      	str	r3, [r0, #0]
        return -1;
 8002208:	2401      	movs	r4, #1
 800220a:	4264      	negs	r4, r4
 800220c:	e7f6      	b.n	80021fc <write+0x1c>
        errno = -ret;
 800220e:	f002 f947 	bl	80044a0 <__errno>
 8002212:	4264      	negs	r4, r4
 8002214:	6004      	str	r4, [r0, #0]
        return -1;
 8002216:	2401      	movs	r4, #1
 8002218:	4264      	negs	r4, r4
 800221a:	e7ef      	b.n	80021fc <write+0x1c>

0800221c <_write>:
{
 800221c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221e:	46d6      	mov	lr, sl
 8002220:	4647      	mov	r7, r8
 8002222:	b580      	push	{r7, lr}
 8002224:	b083      	sub	sp, #12
 8002226:	9001      	str	r0, [sp, #4]
 8002228:	4688      	mov	r8, r1
 800222a:	4692      	mov	sl, r2
    if (length > SSIZE_MAX) {
 800222c:	2a00      	cmp	r2, #0
 800222e:	db0a      	blt.n	8002246 <_write+0x2a>
    if (convert_crlf(fh)) {
 8002230:	9c01      	ldr	r4, [sp, #4]
 8002232:	0020      	movs	r0, r4
 8002234:	f7ff fdd4 	bl	8001de0 <_ZL12convert_crlfi>
 8002238:	2800      	cmp	r0, #0
 800223a:	d033      	beq.n	80022a4 <_write+0x88>
        char prev = stdio_out_prev[fh];
 800223c:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <_write+0xd4>)
 800223e:	5d1f      	ldrb	r7, [r3, r4]
        for (ssize_t cur = 0; cur < slength; cur++) {
 8002240:	2400      	movs	r4, #0
    ssize_t written = 0;
 8002242:	2600      	movs	r6, #0
 8002244:	e014      	b.n	8002270 <_write+0x54>
        errno = EINVAL;
 8002246:	f002 f92b 	bl	80044a0 <__errno>
 800224a:	2316      	movs	r3, #22
 800224c:	6003      	str	r3, [r0, #0]
        return -1;
 800224e:	2601      	movs	r6, #1
 8002250:	4276      	negs	r6, r6
 8002252:	e02a      	b.n	80022aa <_write+0x8e>
                r = write(fh, "\r", 1);
 8002254:	2201      	movs	r2, #1
 8002256:	4927      	ldr	r1, [pc, #156]	; (80022f4 <_write+0xd8>)
 8002258:	9f01      	ldr	r7, [sp, #4]
 800225a:	0038      	movs	r0, r7
 800225c:	f7ff ffc0 	bl	80021e0 <write>
                if (r < 0) {
 8002260:	2800      	cmp	r0, #0
 8002262:	db3f      	blt.n	80022e4 <_write+0xc8>
                if (r < 1) {
 8002264:	dd21      	ble.n	80022aa <_write+0x8e>
                stdio_out_prev[fh] = '\r';
 8002266:	220d      	movs	r2, #13
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <_write+0xd4>)
 800226a:	55da      	strb	r2, [r3, r7]
            prev = buffer[cur];
 800226c:	782f      	ldrb	r7, [r5, #0]
        for (ssize_t cur = 0; cur < slength; cur++) {
 800226e:	3401      	adds	r4, #1
 8002270:	4554      	cmp	r4, sl
 8002272:	da18      	bge.n	80022a6 <_write+0x8a>
            if (buffer[cur] == '\n' && prev != '\r') {
 8002274:	4643      	mov	r3, r8
 8002276:	191d      	adds	r5, r3, r4
 8002278:	782b      	ldrb	r3, [r5, #0]
 800227a:	2b0a      	cmp	r3, #10
 800227c:	d1f6      	bne.n	800226c <_write+0x50>
 800227e:	2f0d      	cmp	r7, #13
 8002280:	d0f4      	beq.n	800226c <_write+0x50>
                if (cur > written) {
 8002282:	42a6      	cmp	r6, r4
 8002284:	dae6      	bge.n	8002254 <_write+0x38>
                    r = write(fh, buffer + written, cur - written);
 8002286:	4643      	mov	r3, r8
 8002288:	1999      	adds	r1, r3, r6
 800228a:	1ba2      	subs	r2, r4, r6
 800228c:	9801      	ldr	r0, [sp, #4]
 800228e:	f7ff ffa7 	bl	80021e0 <write>
                    if (r < 0) {
 8002292:	2800      	cmp	r0, #0
 8002294:	db23      	blt.n	80022de <_write+0xc2>
                    written += r;
 8002296:	1836      	adds	r6, r6, r0
                    if (written < cur) {
 8002298:	42b4      	cmp	r4, r6
 800229a:	dc06      	bgt.n	80022aa <_write+0x8e>
                    stdio_out_prev[fh] = prev;
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <_write+0xd4>)
 800229e:	9a01      	ldr	r2, [sp, #4]
 80022a0:	549f      	strb	r7, [r3, r2]
 80022a2:	e7d7      	b.n	8002254 <_write+0x38>
    ssize_t written = 0;
 80022a4:	2600      	movs	r6, #0
    if (written < slength) {
 80022a6:	4556      	cmp	r6, sl
 80022a8:	db05      	blt.n	80022b6 <_write+0x9a>
}
 80022aa:	0030      	movs	r0, r6
 80022ac:	b003      	add	sp, #12
 80022ae:	bc0c      	pop	{r2, r3}
 80022b0:	4690      	mov	r8, r2
 80022b2:	469a      	mov	sl, r3
 80022b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ssize_t r = write(fh, buffer + written, slength - written);
 80022b6:	4643      	mov	r3, r8
 80022b8:	1999      	adds	r1, r3, r6
 80022ba:	4653      	mov	r3, sl
 80022bc:	1b9a      	subs	r2, r3, r6
 80022be:	9c01      	ldr	r4, [sp, #4]
 80022c0:	0020      	movs	r0, r4
 80022c2:	f7ff ff8d 	bl	80021e0 <write>
        if (r < 0) {
 80022c6:	2800      	cmp	r0, #0
 80022c8:	db0f      	blt.n	80022ea <_write+0xce>
        written += r;
 80022ca:	1836      	adds	r6, r6, r0
        if (written > 0) {
 80022cc:	2e00      	cmp	r6, #0
 80022ce:	ddec      	ble.n	80022aa <_write+0x8e>
            stdio_out_prev[fh] = buffer[written - 1];
 80022d0:	4643      	mov	r3, r8
 80022d2:	199b      	adds	r3, r3, r6
 80022d4:	3b01      	subs	r3, #1
 80022d6:	781a      	ldrb	r2, [r3, #0]
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <_write+0xd4>)
 80022da:	551a      	strb	r2, [r3, r4]
 80022dc:	e7e5      	b.n	80022aa <_write+0x8e>
                        return -1;
 80022de:	2601      	movs	r6, #1
 80022e0:	4276      	negs	r6, r6
 80022e2:	e7e2      	b.n	80022aa <_write+0x8e>
                    return -1;
 80022e4:	2601      	movs	r6, #1
 80022e6:	4276      	negs	r6, r6
 80022e8:	e7df      	b.n	80022aa <_write+0x8e>
            return -1;
 80022ea:	2601      	movs	r6, #1
 80022ec:	4276      	negs	r6, r6
 80022ee:	e7dc      	b.n	80022aa <_write+0x8e>
 80022f0:	20000af8 	.word	0x20000af8
 80022f4:	08006168 	.word	0x08006168

080022f8 <read>:
    return bytes_read;
#endif
}

extern "C" ssize_t read(int fildes, void *buf, size_t length)
{
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	000c      	movs	r4, r1
 80022fc:	0015      	movs	r5, r2

    FileHandle *fhc = get_fhc(fildes);
 80022fe:	f7ff fe89 	bl	8002014 <_ZL7get_fhci>
    if (fhc == NULL) {
 8002302:	2800      	cmp	r0, #0
 8002304:	d008      	beq.n	8002318 <read+0x20>
        errno = EBADF;
        return -1;
    }

    ssize_t ret = fhc->read(buf, length);
 8002306:	6803      	ldr	r3, [r0, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	002a      	movs	r2, r5
 800230c:	0021      	movs	r1, r4
 800230e:	4798      	blx	r3
 8002310:	1e04      	subs	r4, r0, #0
    if (ret < 0) {
 8002312:	db08      	blt.n	8002326 <read+0x2e>
        errno = -ret;
        return -1;
    } else {
        return ret;
    }
}
 8002314:	0020      	movs	r0, r4
 8002316:	bd70      	pop	{r4, r5, r6, pc}
        errno = EBADF;
 8002318:	f002 f8c2 	bl	80044a0 <__errno>
 800231c:	2309      	movs	r3, #9
 800231e:	6003      	str	r3, [r0, #0]
        return -1;
 8002320:	2401      	movs	r4, #1
 8002322:	4264      	negs	r4, r4
 8002324:	e7f6      	b.n	8002314 <read+0x1c>
        errno = -ret;
 8002326:	f002 f8bb 	bl	80044a0 <__errno>
 800232a:	4264      	negs	r4, r4
 800232c:	6004      	str	r4, [r0, #0]
        return -1;
 800232e:	2401      	movs	r4, #1
 8002330:	4264      	negs	r4, r4
 8002332:	e7ef      	b.n	8002314 <read+0x1c>

08002334 <_read>:
{
 8002334:	b570      	push	{r4, r5, r6, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	0004      	movs	r4, r0
 800233a:	000d      	movs	r5, r1
 800233c:	1e16      	subs	r6, r2, #0
    if (length > SSIZE_MAX) {
 800233e:	db09      	blt.n	8002354 <_read+0x20>
    if (convert_crlf(fh)) {
 8002340:	f7ff fd4e 	bl	8001de0 <_ZL12convert_crlfi>
 8002344:	2800      	cmp	r0, #0
 8002346:	d122      	bne.n	800238e <_read+0x5a>
        bytes_read = read(fh, buffer, length);
 8002348:	0032      	movs	r2, r6
 800234a:	0029      	movs	r1, r5
 800234c:	0020      	movs	r0, r4
 800234e:	f7ff ffd3 	bl	80022f8 <read>
 8002352:	e037      	b.n	80023c4 <_read+0x90>
        errno = EINVAL;
 8002354:	f002 f8a4 	bl	80044a0 <__errno>
 8002358:	2316      	movs	r3, #22
 800235a:	6003      	str	r3, [r0, #0]
        return -1;
 800235c:	2001      	movs	r0, #1
 800235e:	4240      	negs	r0, r0
 8002360:	e030      	b.n	80023c4 <_read+0x90>
            if ((c == '\r' && stdio_in_prev[fh] != '\n') ||
 8002362:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <_read+0x9c>)
 8002364:	5d12      	ldrb	r2, [r2, r4]
 8002366:	2a0a      	cmp	r2, #10
 8002368:	d01f      	beq.n	80023aa <_read+0x76>
                stdio_in_prev[fh] = c;
 800236a:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <_read+0x9c>)
 800236c:	5513      	strb	r3, [r2, r4]
                *buffer = '\n';
 800236e:	230a      	movs	r3, #10
 8002370:	702b      	strb	r3, [r5, #0]
                break;
 8002372:	e026      	b.n	80023c2 <_read+0x8e>
                    (c == '\n' && stdio_in_prev[fh] != '\r')) {
 8002374:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <_read+0x9c>)
 8002376:	5d12      	ldrb	r2, [r2, r4]
 8002378:	2a0d      	cmp	r2, #13
 800237a:	d018      	beq.n	80023ae <_read+0x7a>
 800237c:	e7f5      	b.n	800236a <_read+0x36>
            } else if ((c == '\r' && stdio_in_prev[fh] == '\n') ||
 800237e:	2b0a      	cmp	r3, #10
 8002380:	d11c      	bne.n	80023bc <_read+0x88>
                       (c == '\n' && stdio_in_prev[fh] == '\r')) {
 8002382:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <_read+0x9c>)
 8002384:	5d12      	ldrb	r2, [r2, r4]
 8002386:	2a0d      	cmp	r2, #13
 8002388:	d118      	bne.n	80023bc <_read+0x88>
                stdio_in_prev[fh] = c;
 800238a:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <_read+0x9c>)
 800238c:	5513      	strb	r3, [r2, r4]
            ssize_t r = read(fh, &c, 1);
 800238e:	2201      	movs	r2, #1
 8002390:	466b      	mov	r3, sp
 8002392:	1dd9      	adds	r1, r3, #7
 8002394:	0020      	movs	r0, r4
 8002396:	f7ff ffaf 	bl	80022f8 <read>
            if (r < 0) {
 800239a:	2800      	cmp	r0, #0
 800239c:	db14      	blt.n	80023c8 <_read+0x94>
            if (r == 0) {
 800239e:	d011      	beq.n	80023c4 <_read+0x90>
            if ((c == '\r' && stdio_in_prev[fh] != '\n') ||
 80023a0:	466b      	mov	r3, sp
 80023a2:	3307      	adds	r3, #7
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b0d      	cmp	r3, #13
 80023a8:	d0db      	beq.n	8002362 <_read+0x2e>
 80023aa:	2b0a      	cmp	r3, #10
 80023ac:	d0e2      	beq.n	8002374 <_read+0x40>
            } else if ((c == '\r' && stdio_in_prev[fh] == '\n') ||
 80023ae:	2b0d      	cmp	r3, #13
 80023b0:	d1e5      	bne.n	800237e <_read+0x4a>
 80023b2:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <_read+0x9c>)
 80023b4:	5d12      	ldrb	r2, [r2, r4]
 80023b6:	2a0a      	cmp	r2, #10
 80023b8:	d1e1      	bne.n	800237e <_read+0x4a>
 80023ba:	e7e6      	b.n	800238a <_read+0x56>
                stdio_in_prev[fh] = c;
 80023bc:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <_read+0x9c>)
 80023be:	5513      	strb	r3, [r2, r4]
                *buffer = c;
 80023c0:	702b      	strb	r3, [r5, #0]
        bytes_read = 1;
 80023c2:	2001      	movs	r0, #1
}
 80023c4:	b002      	add	sp, #8
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
                return -1;
 80023c8:	2001      	movs	r0, #1
 80023ca:	4240      	negs	r0, r0
 80023cc:	e7fa      	b.n	80023c4 <_read+0x90>
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	20000ab8 	.word	0x20000ab8

080023d4 <isatty>:
{
    return isatty(fh);
}

extern "C" int isatty(int fildes)
{
 80023d4:	b510      	push	{r4, lr}
    FileHandle *fhc = get_fhc(fildes);
 80023d6:	f7ff fe1d 	bl	8002014 <_ZL7get_fhci>
    if (fhc == NULL) {
 80023da:	2800      	cmp	r0, #0
 80023dc:	d006      	beq.n	80023ec <isatty+0x18>
        errno = EBADF;
        return 0;
    }

    int tty = fhc->isatty();
 80023de:	6803      	ldr	r3, [r0, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4798      	blx	r3
 80023e4:	1e04      	subs	r4, r0, #0
    if (tty < 0) {
 80023e6:	db07      	blt.n	80023f8 <isatty+0x24>
        errno = -tty;
        return 0;
    } else {
        return tty;
    }
}
 80023e8:	0020      	movs	r0, r4
 80023ea:	bd10      	pop	{r4, pc}
        errno = EBADF;
 80023ec:	f002 f858 	bl	80044a0 <__errno>
 80023f0:	2309      	movs	r3, #9
 80023f2:	6003      	str	r3, [r0, #0]
        return 0;
 80023f4:	2400      	movs	r4, #0
 80023f6:	e7f7      	b.n	80023e8 <isatty+0x14>
        errno = -tty;
 80023f8:	f002 f852 	bl	80044a0 <__errno>
 80023fc:	4264      	negs	r4, r4
 80023fe:	6004      	str	r4, [r0, #0]
        return 0;
 8002400:	2400      	movs	r4, #0
 8002402:	e7f1      	b.n	80023e8 <isatty+0x14>

08002404 <_isatty>:
{
 8002404:	b510      	push	{r4, lr}
    return isatty(fh);
 8002406:	f7ff ffe5 	bl	80023d4 <isatty>
}
 800240a:	bd10      	pop	{r4, pc}

0800240c <lseek>:
    }
    return off;
}

extern "C" off_t lseek(int fildes, off_t offset, int whence)
{
 800240c:	b570      	push	{r4, r5, r6, lr}
 800240e:	000c      	movs	r4, r1
 8002410:	0015      	movs	r5, r2
    FileHandle *fhc = get_fhc(fildes);
 8002412:	f7ff fdff 	bl	8002014 <_ZL7get_fhci>
    if (fhc == NULL) {
 8002416:	2800      	cmp	r0, #0
 8002418:	d008      	beq.n	800242c <lseek+0x20>
        errno = EBADF;
        return -1;
    }

    off_t off = fhc->seek(offset, whence);
 800241a:	6803      	ldr	r3, [r0, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	002a      	movs	r2, r5
 8002420:	0021      	movs	r1, r4
 8002422:	4798      	blx	r3
 8002424:	1e04      	subs	r4, r0, #0
    if (off < 0) {
 8002426:	db08      	blt.n	800243a <lseek+0x2e>
        errno = -off;
        return -1;
    }
    return off;
}
 8002428:	0020      	movs	r0, r4
 800242a:	bd70      	pop	{r4, r5, r6, pc}
        errno = EBADF;
 800242c:	f002 f838 	bl	80044a0 <__errno>
 8002430:	2309      	movs	r3, #9
 8002432:	6003      	str	r3, [r0, #0]
        return -1;
 8002434:	2401      	movs	r4, #1
 8002436:	4264      	negs	r4, r4
 8002438:	e7f6      	b.n	8002428 <lseek+0x1c>
        errno = -off;
 800243a:	f002 f831 	bl	80044a0 <__errno>
 800243e:	4264      	negs	r4, r4
 8002440:	6004      	str	r4, [r0, #0]
        return -1;
 8002442:	2401      	movs	r4, #1
 8002444:	4264      	negs	r4, r4
 8002446:	e7ef      	b.n	8002428 <lseek+0x1c>

08002448 <_lseek>:
{
 8002448:	b510      	push	{r4, lr}
    off_t off = lseek(fh, offset, whence);
 800244a:	f7ff ffdf 	bl	800240c <lseek>
}
 800244e:	bd10      	pop	{r4, pc}

08002450 <fstat>:
    return fstat(fh, st);
}
#endif

extern "C" int fstat(int fildes, struct stat *st)
{
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	000d      	movs	r5, r1
    FileHandle *fhc = get_fhc(fildes);
 8002454:	f7ff fdde 	bl	8002014 <_ZL7get_fhci>
 8002458:	1e04      	subs	r4, r0, #0
    if (fhc == NULL) {
 800245a:	d00e      	beq.n	800247a <fstat+0x2a>
        errno = EBADF;
        return -1;
    }

    st->st_mode = fhc->isatty() ? S_IFCHR : S_IFREG;
 800245c:	6803      	ldr	r3, [r0, #0]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	4798      	blx	r3
 8002462:	2800      	cmp	r0, #0
 8002464:	d010      	beq.n	8002488 <fstat+0x38>
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	019b      	lsls	r3, r3, #6
 800246a:	606b      	str	r3, [r5, #4]
    st->st_size = fhc->size();
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	0020      	movs	r0, r4
 8002472:	4798      	blx	r3
 8002474:	6128      	str	r0, [r5, #16]
    return 0;
 8002476:	2000      	movs	r0, #0
}
 8002478:	bd70      	pop	{r4, r5, r6, pc}
        errno = EBADF;
 800247a:	f002 f811 	bl	80044a0 <__errno>
 800247e:	2309      	movs	r3, #9
 8002480:	6003      	str	r3, [r0, #0]
        return -1;
 8002482:	2001      	movs	r0, #1
 8002484:	4240      	negs	r0, r0
 8002486:	e7f7      	b.n	8002478 <fstat+0x28>
    st->st_mode = fhc->isatty() ? S_IFCHR : S_IFREG;
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	e7ed      	b.n	800246a <fstat+0x1a>

0800248e <_fstat>:
{
 800248e:	b510      	push	{r4, lr}
    return fstat(fh, st);
 8002490:	f7ff ffde 	bl	8002450 <fstat>
}
 8002494:	bd10      	pop	{r4, pc}

08002496 <__cxa_pure_virtual>:
    MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_CLIB_EXCEPTION), "Exception", 0);
}
}
extern "C" WEAK void __cxa_pure_virtual(void);
extern "C" WEAK void __cxa_pure_virtual(void)
{
 8002496:	b510      	push	{r4, lr}
    exit(1);
 8002498:	2001      	movs	r0, #1
 800249a:	f002 f807 	bl	80044ac <exit>
	...

080024a0 <_sbrk>:
extern "C" uint32_t __end__;
// Weak attribute allows user to override, e.g. to use external RAM for dynamic memory.
extern "C" WEAK caddr_t _sbrk(int incr)
{
    static unsigned char *heap = (unsigned char *)&__end__;
    unsigned char        *prev_heap = heap;
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <_sbrk+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
    unsigned char        *new_heap = heap + incr;
 80024a4:	1818      	adds	r0, r3, r0
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80024a6:	f3ef 8208 	mrs	r2, MSP

#if defined(TARGET_CORTEX_A)
    if (new_heap >= (unsigned char *)&__HeapLimit) {    /* __HeapLimit is end of heap section */
#else
    if (new_heap >= (unsigned char *)__get_MSP()) {
 80024aa:	4290      	cmp	r0, r2
 80024ac:	d20c      	bcs.n	80024c8 <_sbrk+0x28>
        errno = ENOMEM;
        return (caddr_t) -1;
    }

    // Additional heap checking if set
    if (mbed_heap_size && (new_heap >= mbed_heap_start + mbed_heap_size)) {
 80024ae:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <_sbrk+0x44>)
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	2a00      	cmp	r2, #0
 80024b4:	d004      	beq.n	80024c0 <_sbrk+0x20>
 80024b6:	490c      	ldr	r1, [pc, #48]	; (80024e8 <_sbrk+0x48>)
 80024b8:	6809      	ldr	r1, [r1, #0]
 80024ba:	188a      	adds	r2, r1, r2
 80024bc:	4290      	cmp	r0, r2
 80024be:	d209      	bcs.n	80024d4 <_sbrk+0x34>
        errno = ENOMEM;
        return (caddr_t) -1;
    }

    heap = new_heap;
 80024c0:	4a07      	ldr	r2, [pc, #28]	; (80024e0 <_sbrk+0x40>)
 80024c2:	6010      	str	r0, [r2, #0]
    return (caddr_t) prev_heap;
 80024c4:	0018      	movs	r0, r3
}
 80024c6:	4770      	bx	lr
        errno = ENOMEM;
 80024c8:	220c      	movs	r2, #12
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <_sbrk+0x4c>)
 80024cc:	601a      	str	r2, [r3, #0]
        return (caddr_t) -1;
 80024ce:	2001      	movs	r0, #1
 80024d0:	4240      	negs	r0, r0
 80024d2:	e7f8      	b.n	80024c6 <_sbrk+0x26>
        errno = ENOMEM;
 80024d4:	220c      	movs	r2, #12
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <_sbrk+0x4c>)
 80024d8:	601a      	str	r2, [r3, #0]
        return (caddr_t) -1;
 80024da:	2001      	movs	r0, #1
 80024dc:	4240      	negs	r0, r0
 80024de:	e7f2      	b.n	80024c6 <_sbrk+0x26>
 80024e0:	200001c8 	.word	0x200001c8
 80024e4:	20000b44 	.word	0x20000b44
 80024e8:	20000b48 	.word	0x20000b48
 80024ec:	20000e08 	.word	0x20000e08

080024f0 <_exit>:
#endif
#endif

#if defined(TOOLCHAIN_GCC_ARM) || defined(TOOLCHAIN_GCC_CR)
extern "C" void _exit(int return_code)
{
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	0005      	movs	r5, r0
{
#endif

#if DEVICE_STDIO_MESSAGES
#if MBED_CONF_PLATFORM_STDIO_FLUSH_AT_EXIT
    fflush(stdout);
 80024f4:	4c07      	ldr	r4, [pc, #28]	; (8002514 <_exit+0x24>)
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	6898      	ldr	r0, [r3, #8]
 80024fa:	f002 f93b 	bl	8004774 <fflush>
    fflush(stderr);
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	68d8      	ldr	r0, [r3, #12]
 8002502:	f002 f937 	bl	8004774 <fflush>
#if DEVICE_SEMIHOST
    if (mbed_interface_connected()) {
        semihost_exit();
    }
#endif
    if (return_code) {
 8002506:	2d00      	cmp	r5, #0
 8002508:	d100      	bne.n	800250c <_exit+0x1c>
 800250a:	e7fe      	b.n	800250a <_exit+0x1a>
        mbed_die();
 800250c:	f7ff fb70 	bl	8001bf0 <mbed_die>
 8002510:	e7fb      	b.n	800250a <_exit+0x1a>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	200001d0 	.word	0x200001d0

08002518 <__aeabi_atexit>:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/6449.html
extern "C" {
    int __aeabi_atexit(void *object, void (*dtor)(void * /*this*/), void *handle)
    {
        return 1;
    }
 8002518:	2001      	movs	r0, #1
 800251a:	4770      	bx	lr

0800251c <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>:


namespace mbed {

void mbed_set_unbuffered_stream(std::FILE *_file)
{
 800251c:	b510      	push	{r4, lr}
#if defined (__ICCARM__)
    char buf[2];
    std::setvbuf(_file, buf, _IONBF, NULL);
#else
    setbuf(_file, NULL);
 800251e:	2100      	movs	r1, #0
 8002520:	f003 f97a 	bl	8005818 <setbuf>
#endif
}
 8002524:	bd10      	pop	{r4, pc}

08002526 <fdopen>:
{
 8002526:	b530      	push	{r4, r5, lr}
 8002528:	b085      	sub	sp, #20
 800252a:	9001      	str	r0, [sp, #4]
 800252c:	000d      	movs	r5, r1
    buf[0] = '@';
 800252e:	ac02      	add	r4, sp, #8
 8002530:	2340      	movs	r3, #64	; 0x40
 8002532:	7023      	strb	r3, [r4, #0]
    memcpy(buf + 1, &fildes, sizeof fildes);
 8002534:	2204      	movs	r2, #4
 8002536:	a901      	add	r1, sp, #4
 8002538:	2009      	movs	r0, #9
 800253a:	4468      	add	r0, sp
 800253c:	f003 f840 	bl	80055c0 <memcpy>
    std::FILE *stream = std::fopen(buf, mode);
 8002540:	0029      	movs	r1, r5
 8002542:	0020      	movs	r0, r4
 8002544:	f002 fa60 	bl	8004a08 <fopen>
 8002548:	1e04      	subs	r4, r0, #0
    if (stream && isatty(fildes)) {
 800254a:	d00a      	beq.n	8002562 <fdopen+0x3c>
 800254c:	9801      	ldr	r0, [sp, #4]
 800254e:	f7ff ff41 	bl	80023d4 <isatty>
 8002552:	2800      	cmp	r0, #0
 8002554:	d007      	beq.n	8002566 <fdopen+0x40>
 8002556:	2301      	movs	r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d106      	bne.n	800256a <fdopen+0x44>
}
 800255c:	0020      	movs	r0, r4
 800255e:	b005      	add	sp, #20
 8002560:	bd30      	pop	{r4, r5, pc}
    if (stream && isatty(fildes)) {
 8002562:	2300      	movs	r3, #0
 8002564:	e7f8      	b.n	8002558 <fdopen+0x32>
 8002566:	2300      	movs	r3, #0
 8002568:	e7f6      	b.n	8002558 <fdopen+0x32>
        mbed_set_unbuffered_stream(stream);
 800256a:	0020      	movs	r0, r4
 800256c:	f7ff ffd6 	bl	800251c <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>
    return stream;
 8002570:	e7f4      	b.n	800255c <fdopen+0x36>

08002572 <_ZN4mbed6fdopenEPNS_10FileHandleEPKc>:
{
 8002572:	b570      	push	{r4, r5, r6, lr}
 8002574:	0006      	movs	r6, r0
 8002576:	000d      	movs	r5, r1
    int fd = bind_to_fd(fh);
 8002578:	f7ff fd64 	bl	8002044 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE>
 800257c:	1e04      	subs	r4, r0, #0
    if (!fd) {
 800257e:	d00b      	beq.n	8002598 <_ZN4mbed6fdopenEPNS_10FileHandleEPKc+0x26>
    std::FILE *stream = ::fdopen(fd, mode);
 8002580:	0029      	movs	r1, r5
 8002582:	f7ff ffd0 	bl	8002526 <fdopen>
 8002586:	1e05      	subs	r5, r0, #0
    if (!stream) {
 8002588:	d001      	beq.n	800258e <_ZN4mbed6fdopenEPNS_10FileHandleEPKc+0x1c>
}
 800258a:	0028      	movs	r0, r5
 800258c:	bd70      	pop	{r4, r5, r6, pc}
        unbind_from_fd(fd, fh);
 800258e:	0031      	movs	r1, r6
 8002590:	0020      	movs	r0, r4
 8002592:	f7ff fc6f 	bl	8001e74 <_ZL14unbind_from_fdiPN4mbed10FileHandleE>
 8002596:	e7f8      	b.n	800258a <_ZN4mbed6fdopenEPNS_10FileHandleEPKc+0x18>
        return NULL;
 8002598:	2500      	movs	r5, #0
 800259a:	e7f6      	b.n	800258a <_ZN4mbed6fdopenEPNS_10FileHandleEPKc+0x18>

0800259c <__rtos_malloc_lock>:
#elif defined(__CC_ARM)
// Do nothing
#elif defined (__GNUC__)
struct _reent;
// Stub out locks when an rtos is not present
extern "C" WEAK void __rtos_malloc_lock(struct _reent *_r) {}
 800259c:	4770      	bx	lr

0800259e <__rtos_malloc_unlock>:
extern "C" WEAK void __rtos_malloc_unlock(struct _reent *_r) {}
 800259e:	4770      	bx	lr

080025a0 <__malloc_lock>:
extern "C" WEAK void __rtos_env_lock(struct _reent *_r) {}
extern "C" WEAK void __rtos_env_unlock(struct _reent *_r) {}

extern "C" void __malloc_lock(struct _reent *_r)
{
 80025a0:	b510      	push	{r4, lr}
    __rtos_malloc_lock(_r);
 80025a2:	f7ff fffb 	bl	800259c <__rtos_malloc_lock>
}
 80025a6:	bd10      	pop	{r4, pc}

080025a8 <__malloc_unlock>:

extern "C" void __malloc_unlock(struct _reent *_r)
{
 80025a8:	b510      	push	{r4, lr}
    __rtos_malloc_unlock(_r);
 80025aa:	f7ff fff8 	bl	800259e <__rtos_malloc_unlock>
}
 80025ae:	bd10      	pop	{r4, pc}

080025b0 <_ZdlPv>:
{
    return malloc(count);
}

void operator delete (void *ptr)
{
 80025b0:	b510      	push	{r4, lr}
    free(ptr);
 80025b2:	f002 fdf7 	bl	80051a4 <free>
}
 80025b6:	bd10      	pop	{r4, pc}

080025b8 <_ZN12DirectSerialD0Ev>:
class DirectSerial : public FileHandle {
 80025b8:	b510      	push	{r4, lr}
 80025ba:	0004      	movs	r4, r0
 80025bc:	f7ff fff8 	bl	80025b0 <_ZdlPv>
 80025c0:	0020      	movs	r0, r4
 80025c2:	bd10      	pop	{r4, pc}

080025c4 <software_init_hook_rtos>:
}

MBED_WEAK void software_init_hook_rtos()
{
    // Nothing by default
}
 80025c4:	4770      	bx	lr

080025c6 <software_init_hook>:
#elif defined (__GNUC__)

extern int __real_main(void);

void software_init_hook(void)
{
 80025c6:	b510      	push	{r4, lr}
    mbed_copy_nvic();
    mbed_sdk_init();
 80025c8:	f001 fc7c 	bl	8003ec4 <mbed_sdk_init>
    software_init_hook_rtos();
 80025cc:	f7ff fffa 	bl	80025c4 <software_init_hook_rtos>
}
 80025d0:	bd10      	pop	{r4, pc}

080025d2 <wait_us>:
{
    wait_us(ms * 1000);
}

void wait_us(int us)
{
 80025d2:	b570      	push	{r4, r5, r6, lr}
 80025d4:	0006      	movs	r6, r0
    const ticker_data_t *const ticker = get_us_ticker_data();
 80025d6:	f7ff f93d 	bl	8001854 <get_us_ticker_data>
 80025da:	0004      	movs	r4, r0
    uint32_t start = ticker_read(ticker);
 80025dc:	f7ff f936 	bl	800184c <ticker_read>
 80025e0:	0005      	movs	r5, r0
    while ((ticker_read(ticker) - start) < (uint32_t)us);
 80025e2:	0020      	movs	r0, r4
 80025e4:	f7ff f932 	bl	800184c <ticker_read>
 80025e8:	1b40      	subs	r0, r0, r5
 80025ea:	42b0      	cmp	r0, r6
 80025ec:	d3f9      	bcc.n	80025e2 <wait_us+0x10>
}
 80025ee:	bd70      	pop	{r4, r5, r6, pc}

080025f0 <wait_ms>:
{
 80025f0:	b510      	push	{r4, lr}
    wait_us(ms * 1000);
 80025f2:	23fa      	movs	r3, #250	; 0xfa
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4358      	muls	r0, r3
 80025f8:	f7ff ffeb 	bl	80025d2 <wait_us>
}
 80025fc:	bd10      	pop	{r4, pc}
	...

08002600 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002600:	480e      	ldr	r0, [pc, #56]	; (800263c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002602:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002604:	480e      	ldr	r0, [pc, #56]	; (8002640 <LoopForever+0x6>)
  ldr r1, =_edata
 8002606:	490f      	ldr	r1, [pc, #60]	; (8002644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002608:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <LoopForever+0xe>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0c      	ldr	r2, [pc, #48]	; (800264c <LoopForever+0x12>)
  ldr r4, =_ebss
 800261c:	4c0c      	ldr	r4, [pc, #48]	; (8002650 <LoopForever+0x16>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call the clock system intitialization function.*/
bl SystemInit
 800262a:	f000 f83b 	bl	80026a4 <SystemInit>
bl software_init_hook
 800262e:	f7ff ffca 	bl	80025c6 <software_init_hook>
/* Call static constructors */
bl __libc_init_array
 8002632:	f002 fd11 	bl	8005058 <__libc_init_array>
/* Call the application's entry point.*/
bl main
 8002636:	f7fe fa4b 	bl	8000ad0 <main>

0800263a <LoopForever>:
//bl _start

LoopForever:
    b LoopForever
 800263a:	e7fe      	b.n	800263a <LoopForever>
  ldr   r0, =_estack
 800263c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002640:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 8002644:	200006e8 	.word	0x200006e8
  ldr r2, =_sidata
 8002648:	08006548 	.word	0x08006548
  ldr r2, =_sbss
 800264c:	200006e8 	.word	0x200006e8
  ldr r4, =_ebss
 8002650:	20000e0c 	.word	0x20000e0c

08002654 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002654:	e7fe      	b.n	8002654 <ADC1_IRQHandler>
	...

08002658 <NVIC_SetVector>:

#define NVIC_RAM_VECTOR_ADDRESS   (0x20000000)  // Vectors positioned at start of RAM
#define NVIC_FLASH_VECTOR_ADDRESS (0x08000000)  // Initial vector position in flash


void NVIC_SetVector(IRQn_Type IRQn, uint32_t vector) {
 8002658:	b530      	push	{r4, r5, lr}
    int i;
    
    // Copy and switch to dynamic vectors if first time called
    if ((SYSCFG->CFGR1 & SYSCFG_CFGR1_MEM_MODE) != SYSCFG_CFGR1_MEM_MODE) {
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <NVIC_SetVector+0x44>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	2303      	movs	r3, #3
 8002660:	4013      	ands	r3, r2
 8002662:	2b03      	cmp	r3, #3
 8002664:	d014      	beq.n	8002690 <NVIC_SetVector+0x38>
 8002666:	2300      	movs	r3, #0
 8002668:	e00b      	b.n	8002682 <NVIC_SetVector+0x2a>
        uint32_t *old_vectors = (uint32_t *)NVIC_FLASH_VECTOR_ADDRESS;
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
            *((uint32_t *)(NVIC_RAM_VECTOR_ADDRESS + (i*4))) = old_vectors[i];
 800266a:	2280      	movs	r2, #128	; 0x80
 800266c:	0512      	lsls	r2, r2, #20
 800266e:	189a      	adds	r2, r3, r2
 8002670:	0092      	lsls	r2, r2, #2
 8002672:	009c      	lsls	r4, r3, #2
 8002674:	2580      	movs	r5, #128	; 0x80
 8002676:	052d      	lsls	r5, r5, #20
 8002678:	46ac      	mov	ip, r5
 800267a:	4464      	add	r4, ip
 800267c:	6824      	ldr	r4, [r4, #0]
 800267e:	6014      	str	r4, [r2, #0]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
 8002680:	3301      	adds	r3, #1
 8002682:	2b2f      	cmp	r3, #47	; 0x2f
 8002684:	ddf1      	ble.n	800266a <NVIC_SetVector+0x12>
        }
        SYSCFG->CFGR1 |= SYSCFG_CFGR1_MEM_MODE; // Embedded SRAM mapped at 0x00000000
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <NVIC_SetVector+0x44>)
 8002688:	6813      	ldr	r3, [r2, #0]
 800268a:	2403      	movs	r4, #3
 800268c:	4323      	orrs	r3, r4
 800268e:	6013      	str	r3, [r2, #0]
    }

    // Set the vector
    *((uint32_t *)(NVIC_RAM_VECTOR_ADDRESS + (IRQn*4) + (NVIC_USER_IRQ_OFFSET*4))) = vector;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <NVIC_SetVector+0x48>)
 8002692:	469c      	mov	ip, r3
 8002694:	4460      	add	r0, ip
 8002696:	0080      	lsls	r0, r0, #2
 8002698:	6001      	str	r1, [r0, #0]
}
 800269a:	bd30      	pop	{r4, r5, pc}
 800269c:	40010000 	.word	0x40010000
 80026a0:	08000010 	.word	0x08000010

080026a4 <SystemInit>:
  */
void SystemInit(void)
{
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Set HSION bit */
    RCC->CR |= (uint32_t)0x00000001U;
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <SystemInit+0x54>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	2101      	movs	r1, #1
 80026aa:	430a      	orrs	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
    /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
    RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
    /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
    RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	4812      	ldr	r0, [pc, #72]	; (80026fc <SystemInit+0x58>)
 80026b2:	4002      	ands	r2, r0
 80026b4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4811      	ldr	r0, [pc, #68]	; (8002700 <SystemInit+0x5c>)
 80026ba:	4002      	ands	r2, r0
 80026bc:	601a      	str	r2, [r3, #0]

    /* Reset HSEBYP bit */
    RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4810      	ldr	r0, [pc, #64]	; (8002704 <SystemInit+0x60>)
 80026c2:	4002      	ands	r2, r0
 80026c4:	601a      	str	r2, [r3, #0]

    /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
    RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	480f      	ldr	r0, [pc, #60]	; (8002708 <SystemInit+0x64>)
 80026ca:	4002      	ands	r2, r0
 80026cc:	605a      	str	r2, [r3, #4]

    /* Reset PREDIV[3:0] bits */
    RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80026ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d0:	200f      	movs	r0, #15
 80026d2:	4382      	bics	r2, r0
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F042x6) || defined (STM32F048xx)
    /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
    RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
#elif defined (STM32F070x6) || defined (STM32F070xB)
    /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
    RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 80026d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d8:	480c      	ldr	r0, [pc, #48]	; (800270c <SystemInit+0x68>)
 80026da:	4002      	ands	r2, r0
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
    /* Set default USB clock to PLLCLK, since there is no HSI48 */
    RCC->CFGR3 |= (uint32_t)0x00000080U;
 80026de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e0:	2080      	movs	r0, #128	; 0x80
 80026e2:	4302      	orrs	r2, r0
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
#else
#warning "No target selected"
#endif

    /* Reset HSI14 bit */
    RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80026e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e8:	438a      	bics	r2, r1
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable all interrupts */
    RCC->CIR = 0x00000000U;
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]

    /* Enable SYSCFGENR in APB2EN, needed for 1st call of NVIC_SetVector, to copy vectors from flash to ram */
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	619a      	str	r2, [r3, #24]
}
 80026f6:	4770      	bx	lr
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08ffb80c 	.word	0x08ffb80c
 8002700:	fef6ffff 	.word	0xfef6ffff
 8002704:	fffbffff 	.word	0xfffbffff
 8002708:	ffc0ffff 	.word	0xffc0ffff
 800270c:	fffffe6c 	.word	0xfffffe6c

08002710 <SetSysClock_PLL_HSE>:
#if ( ((CLOCK_SOURCE) & USE_PLL_HSE_XTAL) || ((CLOCK_SOURCE) & USE_PLL_HSE_EXTC) )
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
uint8_t SetSysClock_PLL_HSE(uint8_t bypass)
{
 8002710:	b510      	push	{r4, lr}
 8002712:	b090      	sub	sp, #64	; 0x40
 8002714:	0004      	movs	r4, r0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002716:	2230      	movs	r2, #48	; 0x30
 8002718:	2100      	movs	r1, #0
 800271a:	a804      	add	r0, sp, #16
 800271c:	f002 ff59 	bl	80055d2 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002720:	2210      	movs	r2, #16
 8002722:	2100      	movs	r1, #0
 8002724:	4668      	mov	r0, sp
 8002726:	f002 ff54 	bl	80055d2 <memset>

    //Select HSI as system clock source to allow modification of the PLL configuration
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 800272a:	2301      	movs	r3, #1
 800272c:	9300      	str	r3, [sp, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800272e:	2101      	movs	r1, #1
 8002730:	4668      	mov	r0, sp
 8002732:	f000 fe6b 	bl	800340c <HAL_RCC_ClockConfig>
 8002736:	2800      	cmp	r0, #0
 8002738:	d129      	bne.n	800278e <SetSysClock_PLL_HSE+0x7e>
        return 0; // FAIL
    }

    // Select HSE oscillator as PLL source
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800273a:	2301      	movs	r3, #1
 800273c:	9304      	str	r3, [sp, #16]
    if (bypass == 0) {
 800273e:	2c00      	cmp	r4, #0
 8002740:	d111      	bne.n	8002766 <SetSysClock_PLL_HSE+0x56>
        RCC_OscInitStruct.HSEState   = RCC_HSE_ON; // External 8 MHz xtal on OSC_IN/OSC_OUT
 8002742:	9305      	str	r3, [sp, #20]
    } else {
        RCC_OscInitStruct.HSEState   = RCC_HSE_BYPASS; // External 8 MHz clock on OSC_IN only
    }
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8002744:	2302      	movs	r3, #2
 8002746:	930c      	str	r3, [sp, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	025b      	lsls	r3, r3, #9
 800274c:	930d      	str	r3, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PREDIV     = RCC_PREDIV_DIV2;
 800274e:	2301      	movs	r3, #1
 8002750:	930f      	str	r3, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL12;
 8002752:	23a0      	movs	r3, #160	; 0xa0
 8002754:	039b      	lsls	r3, r3, #14
 8002756:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002758:	a804      	add	r0, sp, #16
 800275a:	f000 fbed 	bl	8002f38 <HAL_RCC_OscConfig>
 800275e:	2800      	cmp	r0, #0
 8002760:	d004      	beq.n	800276c <SetSysClock_PLL_HSE+0x5c>
        return 0; // FAIL
 8002762:	2000      	movs	r0, #0
 8002764:	e014      	b.n	8002790 <SetSysClock_PLL_HSE+0x80>
        RCC_OscInitStruct.HSEState   = RCC_HSE_BYPASS; // External 8 MHz clock on OSC_IN only
 8002766:	2305      	movs	r3, #5
 8002768:	9305      	str	r3, [sp, #20]
 800276a:	e7eb      	b.n	8002744 <SetSysClock_PLL_HSE+0x34>
    }

    // Select PLL as system clock source and configure the HCLK and PCLK1 clocks dividers
    RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800276c:	2307      	movs	r3, #7
 800276e:	9300      	str	r3, [sp, #0]
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK; // 48 MHz
 8002770:	3b05      	subs	r3, #5
 8002772:	9301      	str	r3, [sp, #4]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;         // 48 MHz
 8002774:	2300      	movs	r3, #0
 8002776:	9302      	str	r3, [sp, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;           // 48 MHz
 8002778:	9303      	str	r3, [sp, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800277a:	2101      	movs	r1, #1
 800277c:	4668      	mov	r0, sp
 800277e:	f000 fe45 	bl	800340c <HAL_RCC_ClockConfig>
 8002782:	2800      	cmp	r0, #0
 8002784:	d101      	bne.n	800278a <SetSysClock_PLL_HSE+0x7a>
    //if (bypass == 0)
    //  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCOSOURCE_HSE, RCC_MCO_DIV2); // 4 MHz with xtal
    //else
    //  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCOSOURCE_HSE, RCC_MCO_DIV4); // 2 MHz with ST-Link MCO

    return 1; // OK
 8002786:	2001      	movs	r0, #1
 8002788:	e002      	b.n	8002790 <SetSysClock_PLL_HSE+0x80>
        return 0; // FAIL
 800278a:	2000      	movs	r0, #0
 800278c:	e000      	b.n	8002790 <SetSysClock_PLL_HSE+0x80>
        return 0; // FAIL
 800278e:	2000      	movs	r0, #0
}
 8002790:	b010      	add	sp, #64	; 0x40
 8002792:	bd10      	pop	{r4, pc}

08002794 <SetSysClock_PLL_HSI>:
#if ((CLOCK_SOURCE) & USE_PLL_HSI)
/******************************************************************************/
/*            PLL (clocked by HSI) used as System clock source                */
/******************************************************************************/
uint8_t SetSysClock_PLL_HSI(void)
{
 8002794:	b500      	push	{lr}
 8002796:	b091      	sub	sp, #68	; 0x44
    RCC_OscInitTypeDef RCC_OscInitStruct;
    RCC_ClkInitTypeDef RCC_ClkInitStruct;

    // Select PLLCLK = 48 MHz ((HSI 8 MHz / 2) * 12)
    RCC_OscInitStruct.OscillatorType          = RCC_OSCILLATORTYPE_HSI;
 8002798:	2102      	movs	r1, #2
 800279a:	9104      	str	r1, [sp, #16]
    RCC_OscInitStruct.HSEState                = RCC_HSE_OFF;
 800279c:	2300      	movs	r3, #0
 800279e:	9305      	str	r3, [sp, #20]
    RCC_OscInitStruct.LSEState                = RCC_LSE_OFF;
 80027a0:	9306      	str	r3, [sp, #24]
    RCC_OscInitStruct.HSIState                = RCC_HSI_ON;
 80027a2:	2201      	movs	r2, #1
 80027a4:	9207      	str	r2, [sp, #28]
    RCC_OscInitStruct.HSICalibrationValue     = RCC_HSICALIBRATION_DEFAULT;
 80027a6:	2010      	movs	r0, #16
 80027a8:	9008      	str	r0, [sp, #32]
    RCC_OscInitStruct.HSI14State              = RCC_HSI_OFF;
 80027aa:	9309      	str	r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.HSI14CalibrationValue   = RCC_HSI14CALIBRATION_DEFAULT;
 80027ac:	900a      	str	r0, [sp, #40]	; 0x28
    RCC_OscInitStruct.LSIState                = RCC_LSI_OFF;
 80027ae:	930b      	str	r3, [sp, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState            = RCC_PLL_ON;
 80027b0:	910c      	str	r1, [sp, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLSource           = RCC_PLLSOURCE_HSI;
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	930d      	str	r3, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PREDIV              = RCC_PREDIV_DIV2; // HSI div 2
 80027b8:	920f      	str	r2, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLMUL              = RCC_PLL_MUL12;
 80027ba:	23a0      	movs	r3, #160	; 0xa0
 80027bc:	039b      	lsls	r3, r3, #14
 80027be:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80027c0:	a804      	add	r0, sp, #16
 80027c2:	f000 fbb9 	bl	8002f38 <HAL_RCC_OscConfig>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d002      	beq.n	80027d0 <SetSysClock_PLL_HSI+0x3c>
        return 0; // FAIL
 80027ca:	2000      	movs	r0, #0

    // Output clock on MCO1 pin(PA8) for debugging purpose
    //HAL_RCC_MCOConfig(RCC_MCO, RCC_MCOSOURCE_HSI48, RCC_MCO_DIV1); // 48 MHz

    return 1; // OK
}
 80027cc:	b011      	add	sp, #68	; 0x44
 80027ce:	bd00      	pop	{pc}
    RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80027d0:	2307      	movs	r3, #7
 80027d2:	9300      	str	r3, [sp, #0]
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK; // 48 MHz
 80027d4:	3b05      	subs	r3, #5
 80027d6:	9301      	str	r3, [sp, #4]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;         // 48 MHz
 80027d8:	2300      	movs	r3, #0
 80027da:	9302      	str	r3, [sp, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;           // 48 MHz
 80027dc:	9303      	str	r3, [sp, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80027de:	2101      	movs	r1, #1
 80027e0:	4668      	mov	r0, sp
 80027e2:	f000 fe13 	bl	800340c <HAL_RCC_ClockConfig>
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d101      	bne.n	80027ee <SetSysClock_PLL_HSI+0x5a>
    return 1; // OK
 80027ea:	2001      	movs	r0, #1
 80027ec:	e7ee      	b.n	80027cc <SetSysClock_PLL_HSI+0x38>
        return 0; // FAIL
 80027ee:	2000      	movs	r0, #0
 80027f0:	e7ec      	b.n	80027cc <SetSysClock_PLL_HSI+0x38>
	...

080027f4 <SetSysClock>:
{
 80027f4:	b510      	push	{r4, lr}
    if (SetSysClock_PLL_HSE(1) == 0)
 80027f6:	2001      	movs	r0, #1
 80027f8:	f7ff ff8a 	bl	8002710 <SetSysClock_PLL_HSE>
 80027fc:	2800      	cmp	r0, #0
 80027fe:	d000      	beq.n	8002802 <SetSysClock+0xe>
}
 8002800:	bd10      	pop	{r4, pc}
            if (SetSysClock_PLL_HSI() == 0)
 8002802:	f7ff ffc7 	bl	8002794 <SetSysClock_PLL_HSI>
 8002806:	2800      	cmp	r0, #0
 8002808:	d1fa      	bne.n	8002800 <SetSysClock+0xc>
                    error("SetSysClock failed\n");
 800280a:	4802      	ldr	r0, [pc, #8]	; (8002814 <SetSysClock+0x20>)
 800280c:	f7ff fab0 	bl	8001d70 <error>
}
 8002810:	e7f6      	b.n	8002800 <SetSysClock+0xc>
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	08006334 	.word	0x08006334

08002818 <analogin_init>:
#include "pinmap.h"
#include "mbed_error.h"
#include "PeripheralPins.h"

void analogin_init(analogin_t *obj, PinName pin)
{
 8002818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281a:	b083      	sub	sp, #12
 800281c:	0004      	movs	r4, r0
 800281e:	000d      	movs	r5, r1
    uint32_t function = (uint32_t)NC;

    // ADC Internal Channels "pins"  (Temperature, Vref, Vbat, ...)
    //   are described in PinNames.h and PeripheralPins.c
    //   Pin value must be between 0xF0 and 0xFF
    if ((pin < 0xF0) || (pin >= 0x100)) {
 8002820:	000b      	movs	r3, r1
 8002822:	3bf0      	subs	r3, #240	; 0xf0
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b0f      	cmp	r3, #15
 8002828:	d940      	bls.n	80028ac <analogin_init+0x94>
        // Normal channels
        // Get the peripheral name from the pin and assign it to the object
        obj->handle.Instance = (ADC_TypeDef *)pinmap_peripheral(pin, PinMap_ADC);
 800282a:	4f2a      	ldr	r7, [pc, #168]	; (80028d4 <analogin_init+0xbc>)
 800282c:	0039      	movs	r1, r7
 800282e:	0028      	movs	r0, r5
 8002830:	f7fe fd26 	bl	8001280 <pinmap_peripheral>
 8002834:	6020      	str	r0, [r4, #0]
        // Get the functions (adc channel) from the pin and assign it to the object
        function = pinmap_function(pin, PinMap_ADC);
 8002836:	0039      	movs	r1, r7
 8002838:	0028      	movs	r0, r5
 800283a:	f7fe fd47 	bl	80012cc <pinmap_function>
 800283e:	0006      	movs	r6, r0
        // Configure GPIO
        pinmap_pinout(pin, PinMap_ADC);
 8002840:	0039      	movs	r1, r7
 8002842:	0028      	movs	r0, r5
 8002844:	f7fe fcd4 	bl	80011f0 <pinmap_pinout>
        // No GPIO configuration for internal channels
    }
    MBED_ASSERT(obj->handle.Instance != (ADC_TypeDef *)NC);
    MBED_ASSERT(function != (uint32_t)NC);

    obj->channel = STM_PIN_CHANNEL(function);
 8002848:	0b36      	lsrs	r6, r6, #12
 800284a:	201f      	movs	r0, #31
 800284c:	4030      	ands	r0, r6
 800284e:	234e      	movs	r3, #78	; 0x4e
 8002850:	54e0      	strb	r0, [r4, r3]

    // Save pin number for the read function
    obj->pin = pin;
 8002852:	3b02      	subs	r3, #2
 8002854:	52e5      	strh	r5, [r4, r3]

    // Configure ADC object structures
    obj->handle.State = HAL_ADC_STATE_RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	6463      	str	r3, [r4, #68]	; 0x44
    obj->handle.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	0612      	lsls	r2, r2, #24
 800285e:	6062      	str	r2, [r4, #4]
    obj->handle.Init.Resolution            = ADC_RESOLUTION_12B;
 8002860:	60a3      	str	r3, [r4, #8]
    obj->handle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8002862:	60e3      	str	r3, [r4, #12]
    obj->handle.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8002864:	2201      	movs	r2, #1
 8002866:	6122      	str	r2, [r4, #16]
    obj->handle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8002868:	3203      	adds	r2, #3
 800286a:	6162      	str	r2, [r4, #20]
    obj->handle.Init.LowPowerAutoWait      = DISABLE;
 800286c:	61a3      	str	r3, [r4, #24]
    obj->handle.Init.LowPowerAutoPowerOff  = DISABLE;
 800286e:	61e3      	str	r3, [r4, #28]
    obj->handle.Init.ContinuousConvMode    = DISABLE;
 8002870:	6223      	str	r3, [r4, #32]
    obj->handle.Init.DiscontinuousConvMode = DISABLE;
 8002872:	6263      	str	r3, [r4, #36]	; 0x24
    obj->handle.Init.ExternalTrigConv      = ADC_SOFTWARE_START;
 8002874:	22c2      	movs	r2, #194	; 0xc2
 8002876:	32ff      	adds	r2, #255	; 0xff
 8002878:	62a2      	str	r2, [r4, #40]	; 0x28
    obj->handle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800287a:	62e3      	str	r3, [r4, #44]	; 0x2c
    obj->handle.Init.DMAContinuousRequests = DISABLE;
 800287c:	6323      	str	r3, [r4, #48]	; 0x30
    obj->handle.Init.Overrun               = ADC_OVR_DATA_OVERWRITTEN;
 800287e:	6363      	str	r3, [r4, #52]	; 0x34

    __HAL_RCC_ADC1_CLK_ENABLE();
 8002880:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <analogin_init+0xc0>)
 8002882:	6991      	ldr	r1, [r2, #24]
 8002884:	2080      	movs	r0, #128	; 0x80
 8002886:	0080      	lsls	r0, r0, #2
 8002888:	4301      	orrs	r1, r0
 800288a:	6191      	str	r1, [r2, #24]
 800288c:	6993      	ldr	r3, [r2, #24]
 800288e:	4003      	ands	r3, r0
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	9b01      	ldr	r3, [sp, #4]

    if (HAL_ADC_Init(&obj->handle) != HAL_OK) {
 8002894:	0020      	movs	r0, r4
 8002896:	f000 f8fb 	bl	8002a90 <HAL_ADC_Init>
 800289a:	2800      	cmp	r0, #0
 800289c:	d112      	bne.n	80028c4 <analogin_init+0xac>
        error("Cannot initialize ADC");
    }

    if (!LL_ADC_REG_ReadConversionData6(obj->handle.Instance)) {
 800289e:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x3F
  */
__STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData6(ADC_TypeDef *ADCx)
{
  return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d011      	beq.n	80028cc <analogin_init+0xb4>
        HAL_ADCEx_Calibration_Start(&obj->handle);
    }
}
 80028a8:	b003      	add	sp, #12
 80028aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        obj->handle.Instance = (ADC_TypeDef *)pinmap_peripheral(pin, PinMap_ADC_Internal);
 80028ac:	4e0b      	ldr	r6, [pc, #44]	; (80028dc <analogin_init+0xc4>)
 80028ae:	0031      	movs	r1, r6
 80028b0:	0028      	movs	r0, r5
 80028b2:	f7fe fce5 	bl	8001280 <pinmap_peripheral>
 80028b6:	6020      	str	r0, [r4, #0]
        function = pinmap_function(pin, PinMap_ADC_Internal);
 80028b8:	0031      	movs	r1, r6
 80028ba:	0028      	movs	r0, r5
 80028bc:	f7fe fd06 	bl	80012cc <pinmap_function>
 80028c0:	0006      	movs	r6, r0
 80028c2:	e7c1      	b.n	8002848 <analogin_init+0x30>
        error("Cannot initialize ADC");
 80028c4:	4806      	ldr	r0, [pc, #24]	; (80028e0 <analogin_init+0xc8>)
 80028c6:	f7ff fa53 	bl	8001d70 <error>
 80028ca:	e7e8      	b.n	800289e <analogin_init+0x86>
        HAL_ADCEx_Calibration_Start(&obj->handle);
 80028cc:	0020      	movs	r0, r4
 80028ce:	f000 fad3 	bl	8002e78 <HAL_ADCEx_Calibration_Start>
}
 80028d2:	e7e9      	b.n	80028a8 <analogin_init+0x90>
 80028d4:	0800616c 	.word	0x0800616c
 80028d8:	40021000 	.word	0x40021000
 80028dc:	08006220 	.word	0x08006220
 80028e0:	08006390 	.word	0x08006390

080028e4 <adc_read>:

uint16_t adc_read(analogin_t *obj)
{
 80028e4:	b510      	push	{r4, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	0004      	movs	r4, r0
    ADC_ChannelConfTypeDef sConfig = {0};
 80028ea:	220c      	movs	r2, #12
 80028ec:	2100      	movs	r1, #0
 80028ee:	a801      	add	r0, sp, #4
 80028f0:	f002 fe6f 	bl	80055d2 <memset>

    // Configure ADC channel
    sConfig.Rank         = ADC_RANK_CHANNEL_NUMBER;
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	015b      	lsls	r3, r3, #5
 80028f8:	9302      	str	r3, [sp, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80028fa:	2304      	movs	r3, #4
 80028fc:	9303      	str	r3, [sp, #12]

    switch (obj->channel) {
 80028fe:	334a      	adds	r3, #74	; 0x4a
 8002900:	5ce3      	ldrb	r3, [r4, r3]
 8002902:	2b11      	cmp	r3, #17
 8002904:	d851      	bhi.n	80029aa <adc_read+0xc6>
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4a29      	ldr	r2, [pc, #164]	; (80029b0 <adc_read+0xcc>)
 800290a:	58d3      	ldr	r3, [r2, r3]
 800290c:	469f      	mov	pc, r3
        case 0:
            sConfig.Channel = ADC_CHANNEL_0;
            break;
        case 1:
            sConfig.Channel = ADC_CHANNEL_1;
 800290e:	2301      	movs	r3, #1
 8002910:	9301      	str	r3, [sp, #4]
        default:
            return 0;
    }

    // Clear all channels as it is not done in HAL_ADC_ConfigChannel()
    obj->handle.Instance->CHSELR = 0;
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	2200      	movs	r2, #0
 8002916:	629a      	str	r2, [r3, #40]	; 0x28

    HAL_ADC_ConfigChannel(&obj->handle, &sConfig);
 8002918:	a901      	add	r1, sp, #4
 800291a:	0020      	movs	r0, r4
 800291c:	f000 fa12 	bl	8002d44 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&obj->handle); // Start conversion
 8002920:	0020      	movs	r0, r4
 8002922:	f000 f97b 	bl	8002c1c <HAL_ADC_Start>

    // Wait end of conversion and get value
    if (HAL_ADC_PollForConversion(&obj->handle, 10) == HAL_OK) {
 8002926:	210a      	movs	r1, #10
 8002928:	0020      	movs	r0, r4
 800292a:	f000 f9a7 	bl	8002c7c <HAL_ADC_PollForConversion>
 800292e:	2800      	cmp	r0, #0
 8002930:	d036      	beq.n	80029a0 <adc_read+0xbc>
        return (uint16_t)HAL_ADC_GetValue(&obj->handle);
    } else {
        return 0;
 8002932:	2000      	movs	r0, #0
    }
}
 8002934:	b004      	add	sp, #16
 8002936:	bd10      	pop	{r4, pc}
            sConfig.Channel = ADC_CHANNEL_2;
 8002938:	2302      	movs	r3, #2
 800293a:	9301      	str	r3, [sp, #4]
            break;
 800293c:	e7e9      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_3;
 800293e:	2303      	movs	r3, #3
 8002940:	9301      	str	r3, [sp, #4]
            break;
 8002942:	e7e6      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_4;
 8002944:	2304      	movs	r3, #4
 8002946:	9301      	str	r3, [sp, #4]
            break;
 8002948:	e7e3      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_5;
 800294a:	2305      	movs	r3, #5
 800294c:	9301      	str	r3, [sp, #4]
            break;
 800294e:	e7e0      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_6;
 8002950:	2306      	movs	r3, #6
 8002952:	9301      	str	r3, [sp, #4]
            break;
 8002954:	e7dd      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_7;
 8002956:	2307      	movs	r3, #7
 8002958:	9301      	str	r3, [sp, #4]
            break;
 800295a:	e7da      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_8;
 800295c:	2308      	movs	r3, #8
 800295e:	9301      	str	r3, [sp, #4]
            break;
 8002960:	e7d7      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_9;
 8002962:	2309      	movs	r3, #9
 8002964:	9301      	str	r3, [sp, #4]
            break;
 8002966:	e7d4      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_10;
 8002968:	230a      	movs	r3, #10
 800296a:	9301      	str	r3, [sp, #4]
            break;
 800296c:	e7d1      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_11;
 800296e:	230b      	movs	r3, #11
 8002970:	9301      	str	r3, [sp, #4]
            break;
 8002972:	e7ce      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_12;
 8002974:	230c      	movs	r3, #12
 8002976:	9301      	str	r3, [sp, #4]
            break;
 8002978:	e7cb      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_13;
 800297a:	230d      	movs	r3, #13
 800297c:	9301      	str	r3, [sp, #4]
            break;
 800297e:	e7c8      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_14;
 8002980:	230e      	movs	r3, #14
 8002982:	9301      	str	r3, [sp, #4]
            break;
 8002984:	e7c5      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_15;
 8002986:	230f      	movs	r3, #15
 8002988:	9301      	str	r3, [sp, #4]
            break;
 800298a:	e7c2      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800298c:	2310      	movs	r3, #16
 800298e:	9301      	str	r3, [sp, #4]
            sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002990:	3b09      	subs	r3, #9
 8002992:	9303      	str	r3, [sp, #12]
            break;
 8002994:	e7bd      	b.n	8002912 <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002996:	2311      	movs	r3, #17
 8002998:	9301      	str	r3, [sp, #4]
            sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800299a:	3b0a      	subs	r3, #10
 800299c:	9303      	str	r3, [sp, #12]
            break;
 800299e:	e7b8      	b.n	8002912 <adc_read+0x2e>
        return (uint16_t)HAL_ADC_GetValue(&obj->handle);
 80029a0:	0020      	movs	r0, r4
 80029a2:	f000 f9cb 	bl	8002d3c <HAL_ADC_GetValue>
 80029a6:	b280      	uxth	r0, r0
 80029a8:	e7c4      	b.n	8002934 <adc_read+0x50>
            return 0;
 80029aa:	2000      	movs	r0, #0
 80029ac:	e7c2      	b.n	8002934 <adc_read+0x50>
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	08006348 	.word	0x08006348

080029b4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80029b4:	4770      	bx	lr
	...

080029b8 <HAL_Init>:
{
 80029b8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ba:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <HAL_Init+0x1c>)
 80029bc:	6813      	ldr	r3, [r2, #0]
 80029be:	2110      	movs	r1, #16
 80029c0:	430b      	orrs	r3, r1
 80029c2:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c4:	2003      	movs	r0, #3
 80029c6:	f001 fa4b 	bl	8003e60 <HAL_InitTick>
  HAL_MspInit();
 80029ca:	f7ff fff3 	bl	80029b4 <HAL_MspInit>
}
 80029ce:	2000      	movs	r0, #0
 80029d0:	bd10      	pop	{r4, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	40022000 	.word	0x40022000

080029d8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029d8:	b530      	push	{r4, r5, lr}
 80029da:	b083      	sub	sp, #12
 80029dc:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029e2:	6802      	ldr	r2, [r0, #0]
 80029e4:	6891      	ldr	r1, [r2, #8]
 80029e6:	3303      	adds	r3, #3
 80029e8:	400b      	ands	r3, r1
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d011      	beq.n	8002a12 <ADC_Enable+0x3a>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d142      	bne.n	8002a7a <ADC_Enable+0xa2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80029f4:	6891      	ldr	r1, [r2, #8]
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <ADC_Enable+0xa8>)
 80029f8:	4219      	tst	r1, r3
 80029fa:	d116      	bne.n	8002a2a <ADC_Enable+0x52>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029fc:	6893      	ldr	r3, [r2, #8]
 80029fe:	2101      	movs	r1, #1
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a04:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <ADC_Enable+0xac>)
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	491f      	ldr	r1, [pc, #124]	; (8002a88 <ADC_Enable+0xb0>)
 8002a0a:	f7fd fb8f 	bl	800012c <__udivsi3>
 8002a0e:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8002a10:	e018      	b.n	8002a44 <ADC_Enable+0x6c>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a12:	6813      	ldr	r3, [r2, #0]
 8002a14:	07db      	lsls	r3, r3, #31
 8002a16:	d404      	bmi.n	8002a22 <ADC_Enable+0x4a>
 8002a18:	68d3      	ldr	r3, [r2, #12]
 8002a1a:	041b      	lsls	r3, r3, #16
 8002a1c:	d403      	bmi.n	8002a26 <ADC_Enable+0x4e>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e7e6      	b.n	80029f0 <ADC_Enable+0x18>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e7e4      	b.n	80029f0 <ADC_Enable+0x18>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e7e2      	b.n	80029f0 <ADC_Enable+0x18>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002a34:	3a0f      	subs	r2, #15
 8002a36:	4313      	orrs	r3, r2
 8002a38:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	e01e      	b.n	8002a7c <ADC_Enable+0xa4>
    {
      wait_loop_index--;
 8002a3e:	9b01      	ldr	r3, [sp, #4]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002a44:	9b01      	ldr	r3, [sp, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f9      	bne.n	8002a3e <ADC_Enable+0x66>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a4a:	f001 fa0f 	bl	8003e6c <HAL_GetTick>
 8002a4e:	0005      	movs	r5, r0
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	07db      	lsls	r3, r3, #31
 8002a56:	d40e      	bmi.n	8002a76 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a58:	f001 fa08 	bl	8003e6c <HAL_GetTick>
 8002a5c:	1b40      	subs	r0, r0, r5
 8002a5e:	2802      	cmp	r0, #2
 8002a60:	d9f6      	bls.n	8002a50 <ADC_Enable+0x78>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a64:	2210      	movs	r2, #16
 8002a66:	4313      	orrs	r3, r2
 8002a68:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002a6c:	3a0f      	subs	r2, #15
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	64a3      	str	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 8002a72:	2001      	movs	r0, #1
 8002a74:	e002      	b.n	8002a7c <ADC_Enable+0xa4>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a76:	2000      	movs	r0, #0
 8002a78:	e000      	b.n	8002a7c <ADC_Enable+0xa4>
 8002a7a:	2000      	movs	r0, #0
}
 8002a7c:	b003      	add	sp, #12
 8002a7e:	bd30      	pop	{r4, r5, pc}
 8002a80:	80000017 	.word	0x80000017
 8002a84:	200001cc 	.word	0x200001cc
 8002a88:	000f4240 	.word	0x000f4240

08002a8c <HAL_ADC_MspInit>:
}
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_ADC_Init>:
{
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8002a94:	d100      	bne.n	8002a98 <HAL_ADC_Init+0x8>
 8002a96:	e0b9      	b.n	8002c0c <HAL_ADC_Init+0x17c>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d100      	bne.n	8002aa0 <HAL_ADC_Init+0x10>
 8002a9e:	e080      	b.n	8002ba2 <HAL_ADC_Init+0x112>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002aa0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002aa2:	06db      	lsls	r3, r3, #27
 8002aa4:	d500      	bpl.n	8002aa8 <HAL_ADC_Init+0x18>
 8002aa6:	e0ab      	b.n	8002c00 <HAL_ADC_Init+0x170>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002aa8:	6822      	ldr	r2, [r4, #0]
 8002aaa:	6893      	ldr	r3, [r2, #8]
 8002aac:	2104      	movs	r1, #4
 8002aae:	400b      	ands	r3, r1
      (tmp_hal_status == HAL_OK)                                &&
 8002ab0:	d000      	beq.n	8002ab4 <HAL_ADC_Init+0x24>
 8002ab2:	e0a5      	b.n	8002c00 <HAL_ADC_Init+0x170>
    ADC_STATE_CLR_SET(hadc->State,
 8002ab4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002ab6:	4856      	ldr	r0, [pc, #344]	; (8002c10 <HAL_ADC_Init+0x180>)
 8002ab8:	4001      	ands	r1, r0
 8002aba:	3006      	adds	r0, #6
 8002abc:	30ff      	adds	r0, #255	; 0xff
 8002abe:	4301      	orrs	r1, r0
 8002ac0:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002ac2:	6890      	ldr	r0, [r2, #8]
 8002ac4:	2103      	movs	r1, #3
 8002ac6:	4001      	ands	r1, r0
 8002ac8:	2901      	cmp	r1, #1
 8002aca:	d070      	beq.n	8002bae <HAL_ADC_Init+0x11e>
 8002acc:	2100      	movs	r1, #0
 8002ace:	2900      	cmp	r1, #0
 8002ad0:	d10c      	bne.n	8002aec <HAL_ADC_Init+0x5c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ad2:	68d1      	ldr	r1, [r2, #12]
 8002ad4:	2018      	movs	r0, #24
 8002ad6:	4381      	bics	r1, r0
 8002ad8:	68a0      	ldr	r0, [r4, #8]
 8002ada:	4301      	orrs	r1, r0
 8002adc:	60d1      	str	r1, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002ade:	6821      	ldr	r1, [r4, #0]
 8002ae0:	690a      	ldr	r2, [r1, #16]
 8002ae2:	0092      	lsls	r2, r2, #2
 8002ae4:	0892      	lsrs	r2, r2, #2
 8002ae6:	6860      	ldr	r0, [r4, #4]
 8002ae8:	4302      	orrs	r2, r0
 8002aea:	610a      	str	r2, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002aec:	6821      	ldr	r1, [r4, #0]
 8002aee:	68ca      	ldr	r2, [r1, #12]
 8002af0:	4848      	ldr	r0, [pc, #288]	; (8002c14 <HAL_ADC_Init+0x184>)
 8002af2:	4002      	ands	r2, r0
 8002af4:	60ca      	str	r2, [r1, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002af6:	69a2      	ldr	r2, [r4, #24]
 8002af8:	0392      	lsls	r2, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8002afa:	69e1      	ldr	r1, [r4, #28]
 8002afc:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002afe:	430a      	orrs	r2, r1
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8002b00:	6a20      	ldr	r0, [r4, #32]
 8002b02:	0341      	lsls	r1, r0, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8002b04:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8002b06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b08:	2901      	cmp	r1, #1
 8002b0a:	d05c      	beq.n	8002bc6 <HAL_ADC_Init+0x136>
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	0149      	lsls	r1, r1, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8002b10:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8002b12:	68e1      	ldr	r1, [r4, #12]
 8002b14:	430a      	orrs	r2, r1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8002b16:	6921      	ldr	r1, [r4, #16]
 8002b18:	2902      	cmp	r1, #2
 8002b1a:	d056      	beq.n	8002bca <HAL_ADC_Init+0x13a>
                 hadc->Init.DataAlign                                   |
 8002b1c:	4313      	orrs	r3, r2
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8002b1e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b20:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8002b22:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b24:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b26:	2a01      	cmp	r2, #1
 8002b28:	d051      	beq.n	8002bce <HAL_ADC_Init+0x13e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b2c:	21c2      	movs	r1, #194	; 0xc2
 8002b2e:	31ff      	adds	r1, #255	; 0xff
 8002b30:	428a      	cmp	r2, r1
 8002b32:	d002      	beq.n	8002b3a <HAL_ADC_Init+0xaa>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002b34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b36:	430a      	orrs	r2, r1
 8002b38:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002b3a:	6821      	ldr	r1, [r4, #0]
 8002b3c:	68ca      	ldr	r2, [r1, #12]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002b42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b44:	2180      	movs	r1, #128	; 0x80
 8002b46:	0549      	lsls	r1, r1, #21
 8002b48:	428a      	cmp	r2, r1
 8002b4a:	d00d      	beq.n	8002b68 <HAL_ADC_Init+0xd8>
 8002b4c:	2a01      	cmp	r2, #1
 8002b4e:	d00b      	beq.n	8002b68 <HAL_ADC_Init+0xd8>
 8002b50:	2a02      	cmp	r2, #2
 8002b52:	d009      	beq.n	8002b68 <HAL_ADC_Init+0xd8>
 8002b54:	2a03      	cmp	r2, #3
 8002b56:	d007      	beq.n	8002b68 <HAL_ADC_Init+0xd8>
 8002b58:	2a04      	cmp	r2, #4
 8002b5a:	d005      	beq.n	8002b68 <HAL_ADC_Init+0xd8>
 8002b5c:	2a05      	cmp	r2, #5
 8002b5e:	d003      	beq.n	8002b68 <HAL_ADC_Init+0xd8>
 8002b60:	2a06      	cmp	r2, #6
 8002b62:	d001      	beq.n	8002b68 <HAL_ADC_Init+0xd8>
 8002b64:	2a07      	cmp	r2, #7
 8002b66:	d10a      	bne.n	8002b7e <HAL_ADC_Init+0xee>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b68:	6820      	ldr	r0, [r4, #0]
 8002b6a:	6941      	ldr	r1, [r0, #20]
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	4391      	bics	r1, r2
 8002b70:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002b72:	6820      	ldr	r0, [r4, #0]
 8002b74:	6941      	ldr	r1, [r0, #20]
 8002b76:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002b78:	402a      	ands	r2, r5
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002b7e:	6822      	ldr	r2, [r4, #0]
 8002b80:	68d2      	ldr	r2, [r2, #12]
 8002b82:	4925      	ldr	r1, [pc, #148]	; (8002c18 <HAL_ADC_Init+0x188>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d030      	beq.n	8002bec <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 8002b8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b8c:	2212      	movs	r2, #18
 8002b8e:	4393      	bics	r3, r2
 8002b90:	3a02      	subs	r2, #2
 8002b92:	4313      	orrs	r3, r2
 8002b94:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002b98:	3a0f      	subs	r2, #15
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	e033      	b.n	8002c0a <HAL_ADC_Init+0x17a>
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba2:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8002ba4:	2240      	movs	r2, #64	; 0x40
 8002ba6:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8002ba8:	f7ff ff70 	bl	8002a8c <HAL_ADC_MspInit>
 8002bac:	e778      	b.n	8002aa0 <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002bae:	6811      	ldr	r1, [r2, #0]
 8002bb0:	07c9      	lsls	r1, r1, #31
 8002bb2:	d404      	bmi.n	8002bbe <HAL_ADC_Init+0x12e>
 8002bb4:	68d1      	ldr	r1, [r2, #12]
 8002bb6:	0409      	lsls	r1, r1, #16
 8002bb8:	d403      	bmi.n	8002bc2 <HAL_ADC_Init+0x132>
 8002bba:	2100      	movs	r1, #0
 8002bbc:	e787      	b.n	8002ace <HAL_ADC_Init+0x3e>
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	e785      	b.n	8002ace <HAL_ADC_Init+0x3e>
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	e783      	b.n	8002ace <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	e7a2      	b.n	8002b10 <HAL_ADC_Init+0x80>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8002bca:	2304      	movs	r3, #4
 8002bcc:	e7a6      	b.n	8002b1c <HAL_ADC_Init+0x8c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	d103      	bne.n	8002bda <HAL_ADC_Init+0x14a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002bd2:	2280      	movs	r2, #128	; 0x80
 8002bd4:	0252      	lsls	r2, r2, #9
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	e7a7      	b.n	8002b2a <HAL_ADC_Init+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bda:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002bdc:	2120      	movs	r1, #32
 8002bde:	430a      	orrs	r2, r1
 8002be0:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002be4:	391f      	subs	r1, #31
 8002be6:	430a      	orrs	r2, r1
 8002be8:	64a2      	str	r2, [r4, #72]	; 0x48
 8002bea:	e79e      	b.n	8002b2a <HAL_ADC_Init+0x9a>
      ADC_CLEAR_ERRORCODE(hadc);
 8002bec:	2300      	movs	r3, #0
 8002bee:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8002bf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	4393      	bics	r3, r2
 8002bf6:	3a02      	subs	r2, #2
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	e004      	b.n	8002c0a <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c02:	2210      	movs	r2, #16
 8002c04:	4313      	orrs	r3, r2
 8002c06:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8002c08:	2001      	movs	r0, #1
}
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	e7fc      	b.n	8002c0a <HAL_ADC_Init+0x17a>
 8002c10:	fffffefd 	.word	0xfffffefd
 8002c14:	fffe0219 	.word	0xfffe0219
 8002c18:	833fffe7 	.word	0x833fffe7

08002c1c <HAL_ADC_Start>:
{
 8002c1c:	b510      	push	{r4, lr}
 8002c1e:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c20:	6803      	ldr	r3, [r0, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	075b      	lsls	r3, r3, #29
 8002c26:	d501      	bpl.n	8002c2c <HAL_ADC_Start+0x10>
    tmp_hal_status = HAL_BUSY;
 8002c28:	2002      	movs	r0, #2
}
 8002c2a:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hadc);
 8002c2c:	2340      	movs	r3, #64	; 0x40
 8002c2e:	5cc3      	ldrb	r3, [r0, r3]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d01f      	beq.n	8002c74 <HAL_ADC_Start+0x58>
 8002c34:	2201      	movs	r2, #1
 8002c36:	2340      	movs	r3, #64	; 0x40
 8002c38:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002c3a:	69c3      	ldr	r3, [r0, #28]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d017      	beq.n	8002c70 <HAL_ADC_Start+0x54>
      tmp_hal_status = ADC_Enable(hadc);
 8002c40:	f7ff feca 	bl	80029d8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002c44:	2800      	cmp	r0, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_ADC_Start+0xe>
      ADC_STATE_CLR_SET(hadc->State,
 8002c48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <HAL_ADC_Start+0x5c>)
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4313      	orrs	r3, r2
 8002c54:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8002c56:	2300      	movs	r3, #0
 8002c58:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8002c5a:	2240      	movs	r2, #64	; 0x40
 8002c5c:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	3a24      	subs	r2, #36	; 0x24
 8002c62:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002c64:	6822      	ldr	r2, [r4, #0]
 8002c66:	6893      	ldr	r3, [r2, #8]
 8002c68:	2104      	movs	r1, #4
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	6093      	str	r3, [r2, #8]
 8002c6e:	e7dc      	b.n	8002c2a <HAL_ADC_Start+0xe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c70:	2000      	movs	r0, #0
 8002c72:	e7e7      	b.n	8002c44 <HAL_ADC_Start+0x28>
    __HAL_LOCK(hadc);
 8002c74:	2002      	movs	r0, #2
 8002c76:	e7d8      	b.n	8002c2a <HAL_ADC_Start+0xe>
 8002c78:	fffff0fe 	.word	0xfffff0fe

08002c7c <HAL_ADC_PollForConversion>:
{
 8002c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7e:	0004      	movs	r4, r0
 8002c80:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c82:	6945      	ldr	r5, [r0, #20]
 8002c84:	2d08      	cmp	r5, #8
 8002c86:	d004      	beq.n	8002c92 <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002c88:	6803      	ldr	r3, [r0, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	07db      	lsls	r3, r3, #31
 8002c8e:	d419      	bmi.n	8002cc4 <HAL_ADC_PollForConversion+0x48>
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002c90:	250c      	movs	r5, #12
  tickstart = HAL_GetTick();
 8002c92:	f001 f8eb 	bl	8003e6c <HAL_GetTick>
 8002c96:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	422a      	tst	r2, r5
 8002c9e:	d11a      	bne.n	8002cd6 <HAL_ADC_PollForConversion+0x5a>
    if(Timeout != HAL_MAX_DELAY)
 8002ca0:	1c73      	adds	r3, r6, #1
 8002ca2:	d0f9      	beq.n	8002c98 <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002ca4:	2e00      	cmp	r6, #0
 8002ca6:	d004      	beq.n	8002cb2 <HAL_ADC_PollForConversion+0x36>
 8002ca8:	f001 f8e0 	bl	8003e6c <HAL_GetTick>
 8002cac:	1bc0      	subs	r0, r0, r7
 8002cae:	4286      	cmp	r6, r0
 8002cb0:	d2f2      	bcs.n	8002c98 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2340      	movs	r3, #64	; 0x40
 8002cbe:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	e02d      	b.n	8002d20 <HAL_ADC_PollForConversion+0xa4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2340      	movs	r3, #64	; 0x40
 8002cd0:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	e024      	b.n	8002d20 <HAL_ADC_PollForConversion+0xa4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cd6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002cd8:	2280      	movs	r2, #128	; 0x80
 8002cda:	0092      	lsls	r2, r2, #2
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ce0:	68d9      	ldr	r1, [r3, #12]
 8002ce2:	22c0      	movs	r2, #192	; 0xc0
 8002ce4:	0112      	lsls	r2, r2, #4
 8002ce6:	4211      	tst	r1, r2
 8002ce8:	d113      	bne.n	8002d12 <HAL_ADC_PollForConversion+0x96>
 8002cea:	6a22      	ldr	r2, [r4, #32]
 8002cec:	2a00      	cmp	r2, #0
 8002cee:	d110      	bne.n	8002d12 <HAL_ADC_PollForConversion+0x96>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	0712      	lsls	r2, r2, #28
 8002cf4:	d50d      	bpl.n	8002d12 <HAL_ADC_PollForConversion+0x96>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	0752      	lsls	r2, r2, #29
 8002cfa:	d412      	bmi.n	8002d22 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	210c      	movs	r1, #12
 8002d00:	438a      	bics	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8002d04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d06:	4a0c      	ldr	r2, [pc, #48]	; (8002d38 <HAL_ADC_PollForConversion+0xbc>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	3204      	adds	r2, #4
 8002d0c:	32ff      	adds	r2, #255	; 0xff
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	6463      	str	r3, [r4, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002d12:	69a3      	ldr	r3, [r4, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10d      	bne.n	8002d34 <HAL_ADC_PollForConversion+0xb8>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	220c      	movs	r2, #12
 8002d1c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002d1e:	2000      	movs	r0, #0
}
 8002d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d24:	2220      	movs	r2, #32
 8002d26:	4313      	orrs	r3, r2
 8002d28:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002d2c:	3a1f      	subs	r2, #31
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	64a3      	str	r3, [r4, #72]	; 0x48
 8002d32:	e7ee      	b.n	8002d12 <HAL_ADC_PollForConversion+0x96>
  return HAL_OK;
 8002d34:	2000      	movs	r0, #0
 8002d36:	e7f3      	b.n	8002d20 <HAL_ADC_PollForConversion+0xa4>
 8002d38:	fffffefe 	.word	0xfffffefe

08002d3c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8002d3c:	6803      	ldr	r3, [r0, #0]
 8002d3e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_ADC_ConfigChannel>:
{
 8002d44:	b530      	push	{r4, r5, lr}
 8002d46:	b083      	sub	sp, #12
 8002d48:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002d4e:	3340      	adds	r3, #64	; 0x40
 8002d50:	5cc3      	ldrb	r3, [r0, r3]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d100      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x14>
 8002d56:	e081      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x118>
 8002d58:	2201      	movs	r2, #1
 8002d5a:	2340      	movs	r3, #64	; 0x40
 8002d5c:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d5e:	6803      	ldr	r3, [r0, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	0752      	lsls	r2, r2, #29
 8002d64:	d470      	bmi.n	8002e48 <HAL_ADC_ConfigChannel+0x104>
    if (sConfig->Rank != ADC_RANK_NONE)
 8002d66:	4a3e      	ldr	r2, [pc, #248]	; (8002e60 <HAL_ADC_ConfigChannel+0x11c>)
 8002d68:	6848      	ldr	r0, [r1, #4]
 8002d6a:	4290      	cmp	r0, r2
 8002d6c:	d053      	beq.n	8002e16 <HAL_ADC_ConfigChannel+0xd2>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d70:	2001      	movs	r0, #1
 8002d72:	680d      	ldr	r5, [r1, #0]
 8002d74:	40a8      	lsls	r0, r5
 8002d76:	4302      	orrs	r2, r0
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	0552      	lsls	r2, r2, #21
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d01e      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x7e>
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d01c      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x7e>
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d01a      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x7e>
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d018      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x7e>
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d016      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x7e>
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d014      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x7e>
 8002d98:	2b06      	cmp	r3, #6
 8002d9a:	d012      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x7e>
 8002d9c:	2b07      	cmp	r3, #7
 8002d9e:	d010      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	6950      	ldr	r0, [r2, #20]
 8002da4:	2307      	movs	r3, #7
 8002da6:	4003      	ands	r3, r0
 8002da8:	6888      	ldr	r0, [r1, #8]
 8002daa:	4298      	cmp	r0, r3
 8002dac:	d009      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002dae:	6950      	ldr	r0, [r2, #20]
 8002db0:	2307      	movs	r3, #7
 8002db2:	4398      	bics	r0, r3
 8002db4:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002db6:	6820      	ldr	r0, [r4, #0]
 8002db8:	6942      	ldr	r2, [r0, #20]
 8002dba:	688d      	ldr	r5, [r1, #8]
 8002dbc:	402b      	ands	r3, r5
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002dc2:	680b      	ldr	r3, [r1, #0]
 8002dc4:	001a      	movs	r2, r3
 8002dc6:	3a10      	subs	r2, #16
 8002dc8:	2a01      	cmp	r2, #1
 8002dca:	d901      	bls.n	8002dd0 <HAL_ADC_ConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dcc:	2000      	movs	r0, #0
 8002dce:	e040      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002dd0:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <HAL_ADC_ConfigChannel+0x120>)
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d009      	beq.n	8002dec <HAL_ADC_ConfigChannel+0xa8>
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	03db      	lsls	r3, r3, #15
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <HAL_ADC_ConfigChannel+0x120>)
 8002de0:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002de2:	680b      	ldr	r3, [r1, #0]
 8002de4:	2b10      	cmp	r3, #16
 8002de6:	d004      	beq.n	8002df2 <HAL_ADC_ConfigChannel+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de8:	2000      	movs	r0, #0
 8002dea:	e032      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	e7f4      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_ADC_ConfigChannel+0x124>)
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	491d      	ldr	r1, [pc, #116]	; (8002e6c <HAL_ADC_ConfigChannel+0x128>)
 8002df8:	f7fd f998 	bl	800012c <__udivsi3>
 8002dfc:	0083      	lsls	r3, r0, #2
 8002dfe:	1818      	adds	r0, r3, r0
 8002e00:	0043      	lsls	r3, r0, #1
 8002e02:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002e04:	e002      	b.n	8002e0c <HAL_ADC_ConfigChannel+0xc8>
            wait_loop_index--;
 8002e06:	9b01      	ldr	r3, [sp, #4]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002e0c:	9b01      	ldr	r3, [sp, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f9      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0xc2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e12:	2000      	movs	r0, #0
 8002e14:	e01d      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x10e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e18:	2001      	movs	r0, #1
 8002e1a:	680d      	ldr	r5, [r1, #0]
 8002e1c:	40a8      	lsls	r0, r5
 8002e1e:	4382      	bics	r2, r0
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e22:	680b      	ldr	r3, [r1, #0]
 8002e24:	001a      	movs	r2, r3
 8002e26:	3a10      	subs	r2, #16
 8002e28:	2a01      	cmp	r2, #1
 8002e2a:	d901      	bls.n	8002e30 <HAL_ADC_ConfigChannel+0xec>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	e010      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002e30:	4a0c      	ldr	r2, [pc, #48]	; (8002e64 <HAL_ADC_ConfigChannel+0x120>)
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d005      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x100>
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <HAL_ADC_ConfigChannel+0x12c>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <HAL_ADC_ConfigChannel+0x120>)
 8002e3e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e40:	2000      	movs	r0, #0
 8002e42:	e006      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_ADC_ConfigChannel+0x130>)
 8002e46:	e7f8      	b.n	8002e3a <HAL_ADC_ConfigChannel+0xf6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e48:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8002e50:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2340      	movs	r3, #64	; 0x40
 8002e56:	54e2      	strb	r2, [r4, r3]
}
 8002e58:	b003      	add	sp, #12
 8002e5a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 8002e5c:	2002      	movs	r0, #2
 8002e5e:	e7fb      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x114>
 8002e60:	00001001 	.word	0x00001001
 8002e64:	40012708 	.word	0x40012708
 8002e68:	200001cc 	.word	0x200001cc
 8002e6c:	000f4240 	.word	0x000f4240
 8002e70:	ffbfffff 	.word	0xffbfffff
 8002e74:	ff7fffff 	.word	0xff7fffff

08002e78 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7c:	2340      	movs	r3, #64	; 0x40
 8002e7e:	5cc3      	ldrb	r3, [r0, r3]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d055      	beq.n	8002f30 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e84:	2201      	movs	r2, #1
 8002e86:	2340      	movs	r3, #64	; 0x40
 8002e88:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e8a:	6802      	ldr	r2, [r0, #0]
 8002e8c:	6891      	ldr	r1, [r2, #8]
 8002e8e:	3b3d      	subs	r3, #61	; 0x3d
 8002e90:	400b      	ands	r3, r1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d00b      	beq.n	8002eae <HAL_ADCEx_Calibration_Start+0x36>
 8002e96:	2300      	movs	r3, #0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d014      	beq.n	8002ec6 <HAL_ADCEx_Calibration_Start+0x4e>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8002ea4:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2340      	movs	r3, #64	; 0x40
 8002eaa:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002eae:	6813      	ldr	r3, [r2, #0]
 8002eb0:	07db      	lsls	r3, r3, #31
 8002eb2:	d404      	bmi.n	8002ebe <HAL_ADCEx_Calibration_Start+0x46>
 8002eb4:	68d3      	ldr	r3, [r2, #12]
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	d403      	bmi.n	8002ec2 <HAL_ADCEx_Calibration_Start+0x4a>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e7ec      	b.n	8002e98 <HAL_ADCEx_Calibration_Start+0x20>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e7ea      	b.n	8002e98 <HAL_ADCEx_Calibration_Start+0x20>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e7e8      	b.n	8002e98 <HAL_ADCEx_Calibration_Start+0x20>
    ADC_STATE_CLR_SET(hadc->State, 
 8002ec6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ec8:	491a      	ldr	r1, [pc, #104]	; (8002f34 <HAL_ADCEx_Calibration_Start+0xbc>)
 8002eca:	400b      	ands	r3, r1
 8002ecc:	3106      	adds	r1, #6
 8002ece:	31ff      	adds	r1, #255	; 0xff
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	6463      	str	r3, [r4, #68]	; 0x44
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002ed4:	68d6      	ldr	r6, [r2, #12]
 8002ed6:	3101      	adds	r1, #1
 8002ed8:	400e      	ands	r6, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002eda:	68d3      	ldr	r3, [r2, #12]
 8002edc:	438b      	bics	r3, r1
 8002ede:	60d3      	str	r3, [r2, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002ee0:	6822      	ldr	r2, [r4, #0]
 8002ee2:	6891      	ldr	r1, [r2, #8]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	061b      	lsls	r3, r3, #24
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8002eec:	f000 ffbe 	bl	8003e6c <HAL_GetTick>
 8002ef0:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	2a00      	cmp	r2, #0
 8002ef8:	da0f      	bge.n	8002f1a <HAL_ADCEx_Calibration_Start+0xa2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002efa:	f000 ffb7 	bl	8003e6c <HAL_GetTick>
 8002efe:	1b40      	subs	r0, r0, r5
 8002f00:	2802      	cmp	r0, #2
 8002f02:	d9f6      	bls.n	8002ef2 <HAL_ADCEx_Calibration_Start+0x7a>
        ADC_STATE_CLR_SET(hadc->State,
 8002f04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f06:	2212      	movs	r2, #18
 8002f08:	4393      	bics	r3, r2
 8002f0a:	3a02      	subs	r2, #2
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8002f10:	2200      	movs	r2, #0
 8002f12:	2340      	movs	r3, #64	; 0x40
 8002f14:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8002f16:	2001      	movs	r0, #1
 8002f18:	e7c8      	b.n	8002eac <HAL_ADCEx_Calibration_Start+0x34>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	4316      	orrs	r6, r2
 8002f1e:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8002f20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f22:	2203      	movs	r2, #3
 8002f24:	4393      	bics	r3, r2
 8002f26:	3a02      	subs	r2, #2
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	e7ba      	b.n	8002ea6 <HAL_ADCEx_Calibration_Start+0x2e>
  __HAL_LOCK(hadc);
 8002f30:	2002      	movs	r0, #2
 8002f32:	e7bb      	b.n	8002eac <HAL_ADCEx_Calibration_Start+0x34>
 8002f34:	fffffefd 	.word	0xfffffefd

08002f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3e:	6803      	ldr	r3, [r0, #0]
 8002f40:	07db      	lsls	r3, r3, #31
 8002f42:	d53b      	bpl.n	8002fbc <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f44:	4bc3      	ldr	r3, [pc, #780]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	230c      	movs	r3, #12
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d02d      	beq.n	8002fac <HAL_RCC_OscConfig+0x74>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f50:	4bc0      	ldr	r3, [pc, #768]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	230c      	movs	r3, #12
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d01e      	beq.n	8002f9a <HAL_RCC_OscConfig+0x62>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5c:	6863      	ldr	r3, [r4, #4]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d050      	beq.n	8003004 <HAL_RCC_OscConfig+0xcc>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d155      	bne.n	8003012 <HAL_RCC_OscConfig+0xda>
 8002f66:	4bbb      	ldr	r3, [pc, #748]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	49bb      	ldr	r1, [pc, #748]	; (8003258 <HAL_RCC_OscConfig+0x320>)
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	49ba      	ldr	r1, [pc, #744]	; (800325c <HAL_RCC_OscConfig+0x324>)
 8002f74:	400a      	ands	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f78:	6863      	ldr	r3, [r4, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d061      	beq.n	8003042 <HAL_RCC_OscConfig+0x10a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f000 ff75 	bl	8003e6c <HAL_GetTick>
 8002f82:	0005      	movs	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f84:	4bb3      	ldr	r3, [pc, #716]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	039b      	lsls	r3, r3, #14
 8002f8a:	d417      	bmi.n	8002fbc <HAL_RCC_OscConfig+0x84>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f8c:	f000 ff6e 	bl	8003e6c <HAL_GetTick>
 8002f90:	1b40      	subs	r0, r0, r5
 8002f92:	2864      	cmp	r0, #100	; 0x64
 8002f94:	d9f6      	bls.n	8002f84 <HAL_RCC_OscConfig+0x4c>
          {
            return HAL_TIMEOUT;
 8002f96:	2003      	movs	r0, #3
 8002f98:	e1f2      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f9a:	4bae      	ldr	r3, [pc, #696]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	22c0      	movs	r2, #192	; 0xc0
 8002fa0:	0252      	lsls	r2, r2, #9
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	0252      	lsls	r2, r2, #9
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d1d7      	bne.n	8002f5c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	4ba9      	ldr	r3, [pc, #676]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	039b      	lsls	r3, r3, #14
 8002fb2:	d503      	bpl.n	8002fbc <HAL_RCC_OscConfig+0x84>
 8002fb4:	6863      	ldr	r3, [r4, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d100      	bne.n	8002fbc <HAL_RCC_OscConfig+0x84>
 8002fba:	e1de      	b.n	800337a <HAL_RCC_OscConfig+0x442>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	079b      	lsls	r3, r3, #30
 8002fc0:	d567      	bpl.n	8003092 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fc2:	4ba4      	ldr	r3, [pc, #656]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	421a      	tst	r2, r3
 8002fca:	d051      	beq.n	8003070 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fcc:	4ba1      	ldr	r3, [pc, #644]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	230c      	movs	r3, #12
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d042      	beq.n	800305e <HAL_RCC_OscConfig+0x126>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fd8:	68e3      	ldr	r3, [r4, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d07b      	beq.n	80030d6 <HAL_RCC_OscConfig+0x19e>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fde:	4a9d      	ldr	r2, [pc, #628]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8002fe0:	6813      	ldr	r3, [r2, #0]
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f000 ff40 	bl	8003e6c <HAL_GetTick>
 8002fec:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fee:	4b99      	ldr	r3, [pc, #612]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	079b      	lsls	r3, r3, #30
 8002ff4:	d466      	bmi.n	80030c4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff6:	f000 ff39 	bl	8003e6c <HAL_GetTick>
 8002ffa:	1b40      	subs	r0, r0, r5
 8002ffc:	2802      	cmp	r0, #2
 8002ffe:	d9f6      	bls.n	8002fee <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 8003000:	2003      	movs	r0, #3
 8003002:	e1bd      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003004:	4a93      	ldr	r2, [pc, #588]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8003006:	6811      	ldr	r1, [r2, #0]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	025b      	lsls	r3, r3, #9
 800300c:	430b      	orrs	r3, r1
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	e7b2      	b.n	8002f78 <HAL_RCC_OscConfig+0x40>
 8003012:	2b05      	cmp	r3, #5
 8003014:	d009      	beq.n	800302a <HAL_RCC_OscConfig+0xf2>
 8003016:	4b8f      	ldr	r3, [pc, #572]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	498f      	ldr	r1, [pc, #572]	; (8003258 <HAL_RCC_OscConfig+0x320>)
 800301c:	400a      	ands	r2, r1
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	498e      	ldr	r1, [pc, #568]	; (800325c <HAL_RCC_OscConfig+0x324>)
 8003024:	400a      	ands	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e7a6      	b.n	8002f78 <HAL_RCC_OscConfig+0x40>
 800302a:	4b8a      	ldr	r3, [pc, #552]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 800302c:	6819      	ldr	r1, [r3, #0]
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	02d2      	lsls	r2, r2, #11
 8003032:	430a      	orrs	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	0252      	lsls	r2, r2, #9
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	e79a      	b.n	8002f78 <HAL_RCC_OscConfig+0x40>
        tickstart = HAL_GetTick();
 8003042:	f000 ff13 	bl	8003e6c <HAL_GetTick>
 8003046:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003048:	4b82      	ldr	r3, [pc, #520]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	039b      	lsls	r3, r3, #14
 800304e:	d5b5      	bpl.n	8002fbc <HAL_RCC_OscConfig+0x84>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003050:	f000 ff0c 	bl	8003e6c <HAL_GetTick>
 8003054:	1b40      	subs	r0, r0, r5
 8003056:	2864      	cmp	r0, #100	; 0x64
 8003058:	d9f6      	bls.n	8003048 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800305a:	2003      	movs	r0, #3
 800305c:	e190      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800305e:	4b7d      	ldr	r3, [pc, #500]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	22c0      	movs	r2, #192	; 0xc0
 8003064:	0252      	lsls	r2, r2, #9
 8003066:	4013      	ands	r3, r2
 8003068:	2280      	movs	r2, #128	; 0x80
 800306a:	0212      	lsls	r2, r2, #8
 800306c:	4293      	cmp	r3, r2
 800306e:	d1b3      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003070:	4b78      	ldr	r3, [pc, #480]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	079b      	lsls	r3, r3, #30
 8003076:	d504      	bpl.n	8003082 <HAL_RCC_OscConfig+0x14a>
 8003078:	68e3      	ldr	r3, [r4, #12]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d001      	beq.n	8003082 <HAL_RCC_OscConfig+0x14a>
        return HAL_ERROR;
 800307e:	2001      	movs	r0, #1
 8003080:	e17e      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003082:	4974      	ldr	r1, [pc, #464]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8003084:	680b      	ldr	r3, [r1, #0]
 8003086:	22f8      	movs	r2, #248	; 0xf8
 8003088:	4393      	bics	r3, r2
 800308a:	6922      	ldr	r2, [r4, #16]
 800308c:	00d2      	lsls	r2, r2, #3
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	071b      	lsls	r3, r3, #28
 8003096:	d544      	bpl.n	8003122 <HAL_RCC_OscConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003098:	69e3      	ldr	r3, [r4, #28]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d02e      	beq.n	80030fc <HAL_RCC_OscConfig+0x1c4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309e:	4a6d      	ldr	r2, [pc, #436]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 80030a0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80030a2:	2101      	movs	r1, #1
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a8:	f000 fee0 	bl	8003e6c <HAL_GetTick>
 80030ac:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ae:	4b69      	ldr	r3, [pc, #420]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	079b      	lsls	r3, r3, #30
 80030b4:	d435      	bmi.n	8003122 <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b6:	f000 fed9 	bl	8003e6c <HAL_GetTick>
 80030ba:	1b40      	subs	r0, r0, r5
 80030bc:	2802      	cmp	r0, #2
 80030be:	d9f6      	bls.n	80030ae <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 80030c0:	2003      	movs	r0, #3
 80030c2:	e15d      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4963      	ldr	r1, [pc, #396]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 80030c6:	680b      	ldr	r3, [r1, #0]
 80030c8:	22f8      	movs	r2, #248	; 0xf8
 80030ca:	4393      	bics	r3, r2
 80030cc:	6922      	ldr	r2, [r4, #16]
 80030ce:	00d2      	lsls	r2, r2, #3
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
 80030d4:	e7dd      	b.n	8003092 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80030d6:	4a5f      	ldr	r2, [pc, #380]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 80030d8:	6813      	ldr	r3, [r2, #0]
 80030da:	2101      	movs	r1, #1
 80030dc:	438b      	bics	r3, r1
 80030de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80030e0:	f000 fec4 	bl	8003e6c <HAL_GetTick>
 80030e4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	4b5b      	ldr	r3, [pc, #364]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	079b      	lsls	r3, r3, #30
 80030ec:	d5d1      	bpl.n	8003092 <HAL_RCC_OscConfig+0x15a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ee:	f000 febd 	bl	8003e6c <HAL_GetTick>
 80030f2:	1b40      	subs	r0, r0, r5
 80030f4:	2802      	cmp	r0, #2
 80030f6:	d9f6      	bls.n	80030e6 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 80030f8:	2003      	movs	r0, #3
 80030fa:	e141      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030fc:	4a55      	ldr	r2, [pc, #340]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 80030fe:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003100:	2101      	movs	r1, #1
 8003102:	438b      	bics	r3, r1
 8003104:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003106:	f000 feb1 	bl	8003e6c <HAL_GetTick>
 800310a:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	4b51      	ldr	r3, [pc, #324]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	079b      	lsls	r3, r3, #30
 8003112:	d506      	bpl.n	8003122 <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003114:	f000 feaa 	bl	8003e6c <HAL_GetTick>
 8003118:	1b40      	subs	r0, r0, r5
 800311a:	2802      	cmp	r0, #2
 800311c:	d9f6      	bls.n	800310c <HAL_RCC_OscConfig+0x1d4>
        {
          return HAL_TIMEOUT;
 800311e:	2003      	movs	r0, #3
 8003120:	e12e      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	075b      	lsls	r3, r3, #29
 8003126:	d575      	bpl.n	8003214 <HAL_RCC_OscConfig+0x2dc>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003128:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	d40b      	bmi.n	8003148 <HAL_RCC_OscConfig+0x210>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003130:	4a48      	ldr	r2, [pc, #288]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8003132:	69d1      	ldr	r1, [r2, #28]
 8003134:	2080      	movs	r0, #128	; 0x80
 8003136:	0540      	lsls	r0, r0, #21
 8003138:	4301      	orrs	r1, r0
 800313a:	61d1      	str	r1, [r2, #28]
 800313c:	69d3      	ldr	r3, [r2, #28]
 800313e:	4003      	ands	r3, r0
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003144:	2501      	movs	r5, #1
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x212>
    FlagStatus       pwrclkchanged = RESET;
 8003148:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b45      	ldr	r3, [pc, #276]	; (8003260 <HAL_RCC_OscConfig+0x328>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	05db      	lsls	r3, r3, #23
 8003150:	d51f      	bpl.n	8003192 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003152:	68a3      	ldr	r3, [r4, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d030      	beq.n	80031ba <HAL_RCC_OscConfig+0x282>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d134      	bne.n	80031c6 <HAL_RCC_OscConfig+0x28e>
 800315c:	4b3d      	ldr	r3, [pc, #244]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	2101      	movs	r1, #1
 8003162:	438a      	bics	r2, r1
 8003164:	621a      	str	r2, [r3, #32]
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	3103      	adds	r1, #3
 800316a:	438a      	bics	r2, r1
 800316c:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800316e:	68a3      	ldr	r3, [r4, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d03e      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2ba>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003174:	f000 fe7a 	bl	8003e6c <HAL_GetTick>
 8003178:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317a:	4b36      	ldr	r3, [pc, #216]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	079b      	lsls	r3, r3, #30
 8003180:	d446      	bmi.n	8003210 <HAL_RCC_OscConfig+0x2d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003182:	f000 fe73 	bl	8003e6c <HAL_GetTick>
 8003186:	1b80      	subs	r0, r0, r6
 8003188:	4b36      	ldr	r3, [pc, #216]	; (8003264 <HAL_RCC_OscConfig+0x32c>)
 800318a:	4298      	cmp	r0, r3
 800318c:	d9f5      	bls.n	800317a <HAL_RCC_OscConfig+0x242>
        {
          return HAL_TIMEOUT;
 800318e:	2003      	movs	r0, #3
 8003190:	e0f6      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003192:	4a33      	ldr	r2, [pc, #204]	; (8003260 <HAL_RCC_OscConfig+0x328>)
 8003194:	6811      	ldr	r1, [r2, #0]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	430b      	orrs	r3, r1
 800319c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800319e:	f000 fe65 	bl	8003e6c <HAL_GetTick>
 80031a2:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	4b2e      	ldr	r3, [pc, #184]	; (8003260 <HAL_RCC_OscConfig+0x328>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	05db      	lsls	r3, r3, #23
 80031aa:	d4d2      	bmi.n	8003152 <HAL_RCC_OscConfig+0x21a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ac:	f000 fe5e 	bl	8003e6c <HAL_GetTick>
 80031b0:	1b80      	subs	r0, r0, r6
 80031b2:	2864      	cmp	r0, #100	; 0x64
 80031b4:	d9f6      	bls.n	80031a4 <HAL_RCC_OscConfig+0x26c>
          return HAL_TIMEOUT;
 80031b6:	2003      	movs	r0, #3
 80031b8:	e0e2      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ba:	4a26      	ldr	r2, [pc, #152]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 80031bc:	6a13      	ldr	r3, [r2, #32]
 80031be:	2101      	movs	r1, #1
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	e7d3      	b.n	800316e <HAL_RCC_OscConfig+0x236>
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	d009      	beq.n	80031de <HAL_RCC_OscConfig+0x2a6>
 80031ca:	4b22      	ldr	r3, [pc, #136]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 80031cc:	6a1a      	ldr	r2, [r3, #32]
 80031ce:	2101      	movs	r1, #1
 80031d0:	438a      	bics	r2, r1
 80031d2:	621a      	str	r2, [r3, #32]
 80031d4:	6a1a      	ldr	r2, [r3, #32]
 80031d6:	3103      	adds	r1, #3
 80031d8:	438a      	bics	r2, r1
 80031da:	621a      	str	r2, [r3, #32]
 80031dc:	e7c7      	b.n	800316e <HAL_RCC_OscConfig+0x236>
 80031de:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	2104      	movs	r1, #4
 80031e4:	430a      	orrs	r2, r1
 80031e6:	621a      	str	r2, [r3, #32]
 80031e8:	6a1a      	ldr	r2, [r3, #32]
 80031ea:	3903      	subs	r1, #3
 80031ec:	430a      	orrs	r2, r1
 80031ee:	621a      	str	r2, [r3, #32]
 80031f0:	e7bd      	b.n	800316e <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f2:	f000 fe3b 	bl	8003e6c <HAL_GetTick>
 80031f6:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f8:	4b16      	ldr	r3, [pc, #88]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	079b      	lsls	r3, r3, #30
 80031fe:	d507      	bpl.n	8003210 <HAL_RCC_OscConfig+0x2d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003200:	f000 fe34 	bl	8003e6c <HAL_GetTick>
 8003204:	1b80      	subs	r0, r0, r6
 8003206:	4b17      	ldr	r3, [pc, #92]	; (8003264 <HAL_RCC_OscConfig+0x32c>)
 8003208:	4298      	cmp	r0, r3
 800320a:	d9f5      	bls.n	80031f8 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800320c:	2003      	movs	r0, #3
 800320e:	e0b7      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003210:	2d01      	cmp	r5, #1
 8003212:	d029      	beq.n	8003268 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	06db      	lsls	r3, r3, #27
 8003218:	d558      	bpl.n	80032cc <HAL_RCC_OscConfig+0x394>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800321a:	6963      	ldr	r3, [r4, #20]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d029      	beq.n	8003274 <HAL_RCC_OscConfig+0x33c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003220:	3305      	adds	r3, #5
 8003222:	d047      	beq.n	80032b4 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 8003226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003228:	2104      	movs	r1, #4
 800322a:	430a      	orrs	r2, r1
 800322c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800322e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003230:	3903      	subs	r1, #3
 8003232:	438a      	bics	r2, r1
 8003234:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003236:	f000 fe19 	bl	8003e6c <HAL_GetTick>
 800323a:	0005      	movs	r5, r0
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_RCC_OscConfig+0x31c>)
 800323e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003240:	079b      	lsls	r3, r3, #30
 8003242:	d543      	bpl.n	80032cc <HAL_RCC_OscConfig+0x394>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003244:	f000 fe12 	bl	8003e6c <HAL_GetTick>
 8003248:	1b40      	subs	r0, r0, r5
 800324a:	2802      	cmp	r0, #2
 800324c:	d9f6      	bls.n	800323c <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 800324e:	2003      	movs	r0, #3
 8003250:	e096      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	40021000 	.word	0x40021000
 8003258:	fffeffff 	.word	0xfffeffff
 800325c:	fffbffff 	.word	0xfffbffff
 8003260:	40007000 	.word	0x40007000
 8003264:	00001388 	.word	0x00001388
      __HAL_RCC_PWR_CLK_DISABLE();
 8003268:	4a47      	ldr	r2, [pc, #284]	; (8003388 <HAL_RCC_OscConfig+0x450>)
 800326a:	69d3      	ldr	r3, [r2, #28]
 800326c:	4947      	ldr	r1, [pc, #284]	; (800338c <HAL_RCC_OscConfig+0x454>)
 800326e:	400b      	ands	r3, r1
 8003270:	61d3      	str	r3, [r2, #28]
 8003272:	e7cf      	b.n	8003214 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003274:	4b44      	ldr	r3, [pc, #272]	; (8003388 <HAL_RCC_OscConfig+0x450>)
 8003276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003278:	2104      	movs	r1, #4
 800327a:	430a      	orrs	r2, r1
 800327c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800327e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003280:	3903      	subs	r1, #3
 8003282:	430a      	orrs	r2, r1
 8003284:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003286:	f000 fdf1 	bl	8003e6c <HAL_GetTick>
 800328a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800328c:	4b3e      	ldr	r3, [pc, #248]	; (8003388 <HAL_RCC_OscConfig+0x450>)
 800328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003290:	079b      	lsls	r3, r3, #30
 8003292:	d406      	bmi.n	80032a2 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003294:	f000 fdea 	bl	8003e6c <HAL_GetTick>
 8003298:	1b40      	subs	r0, r0, r5
 800329a:	2802      	cmp	r0, #2
 800329c:	d9f6      	bls.n	800328c <HAL_RCC_OscConfig+0x354>
          return HAL_TIMEOUT;
 800329e:	2003      	movs	r0, #3
 80032a0:	e06e      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032a2:	4939      	ldr	r1, [pc, #228]	; (8003388 <HAL_RCC_OscConfig+0x450>)
 80032a4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80032a6:	22f8      	movs	r2, #248	; 0xf8
 80032a8:	4393      	bics	r3, r2
 80032aa:	69a2      	ldr	r2, [r4, #24]
 80032ac:	00d2      	lsls	r2, r2, #3
 80032ae:	4313      	orrs	r3, r2
 80032b0:	634b      	str	r3, [r1, #52]	; 0x34
 80032b2:	e00b      	b.n	80032cc <HAL_RCC_OscConfig+0x394>
      __HAL_RCC_HSI14ADC_ENABLE();
 80032b4:	4a34      	ldr	r2, [pc, #208]	; (8003388 <HAL_RCC_OscConfig+0x450>)
 80032b6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80032b8:	2104      	movs	r1, #4
 80032ba:	438b      	bics	r3, r1
 80032bc:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032be:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80032c0:	31f4      	adds	r1, #244	; 0xf4
 80032c2:	438b      	bics	r3, r1
 80032c4:	69a1      	ldr	r1, [r4, #24]
 80032c6:	00c9      	lsls	r1, r1, #3
 80032c8:	430b      	orrs	r3, r1
 80032ca:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032cc:	6a23      	ldr	r3, [r4, #32]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d055      	beq.n	800337e <HAL_RCC_OscConfig+0x446>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d2:	4a2d      	ldr	r2, [pc, #180]	; (8003388 <HAL_RCC_OscConfig+0x450>)
 80032d4:	6851      	ldr	r1, [r2, #4]
 80032d6:	220c      	movs	r2, #12
 80032d8:	400a      	ands	r2, r1
 80032da:	2a08      	cmp	r2, #8
 80032dc:	d052      	beq.n	8003384 <HAL_RCC_OscConfig+0x44c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d012      	beq.n	8003308 <HAL_RCC_OscConfig+0x3d0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e2:	4a29      	ldr	r2, [pc, #164]	; (8003388 <HAL_RCC_OscConfig+0x450>)
 80032e4:	6813      	ldr	r3, [r2, #0]
 80032e6:	492a      	ldr	r1, [pc, #168]	; (8003390 <HAL_RCC_OscConfig+0x458>)
 80032e8:	400b      	ands	r3, r1
 80032ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f000 fdbe 	bl	8003e6c <HAL_GetTick>
 80032f0:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f2:	4b25      	ldr	r3, [pc, #148]	; (8003388 <HAL_RCC_OscConfig+0x450>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	019b      	lsls	r3, r3, #6
 80032f8:	d53d      	bpl.n	8003376 <HAL_RCC_OscConfig+0x43e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fa:	f000 fdb7 	bl	8003e6c <HAL_GetTick>
 80032fe:	1b00      	subs	r0, r0, r4
 8003300:	2802      	cmp	r0, #2
 8003302:	d9f6      	bls.n	80032f2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003304:	2003      	movs	r0, #3
 8003306:	e03b      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
        __HAL_RCC_PLL_DISABLE();
 8003308:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <HAL_RCC_OscConfig+0x450>)
 800330a:	6813      	ldr	r3, [r2, #0]
 800330c:	4920      	ldr	r1, [pc, #128]	; (8003390 <HAL_RCC_OscConfig+0x458>)
 800330e:	400b      	ands	r3, r1
 8003310:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003312:	f000 fdab 	bl	8003e6c <HAL_GetTick>
 8003316:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_RCC_OscConfig+0x450>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	019b      	lsls	r3, r3, #6
 800331e:	d506      	bpl.n	800332e <HAL_RCC_OscConfig+0x3f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003320:	f000 fda4 	bl	8003e6c <HAL_GetTick>
 8003324:	1b40      	subs	r0, r0, r5
 8003326:	2802      	cmp	r0, #2
 8003328:	d9f6      	bls.n	8003318 <HAL_RCC_OscConfig+0x3e0>
            return HAL_TIMEOUT;
 800332a:	2003      	movs	r0, #3
 800332c:	e028      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332e:	4b16      	ldr	r3, [pc, #88]	; (8003388 <HAL_RCC_OscConfig+0x450>)
 8003330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003332:	210f      	movs	r1, #15
 8003334:	438a      	bics	r2, r1
 8003336:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003338:	430a      	orrs	r2, r1
 800333a:	62da      	str	r2, [r3, #44]	; 0x2c
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	4915      	ldr	r1, [pc, #84]	; (8003394 <HAL_RCC_OscConfig+0x45c>)
 8003340:	400a      	ands	r2, r1
 8003342:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003344:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003346:	4301      	orrs	r1, r0
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800334c:	6819      	ldr	r1, [r3, #0]
 800334e:	2280      	movs	r2, #128	; 0x80
 8003350:	0452      	lsls	r2, r2, #17
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003356:	f000 fd89 	bl	8003e6c <HAL_GetTick>
 800335a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <HAL_RCC_OscConfig+0x450>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	019b      	lsls	r3, r3, #6
 8003362:	d406      	bmi.n	8003372 <HAL_RCC_OscConfig+0x43a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003364:	f000 fd82 	bl	8003e6c <HAL_GetTick>
 8003368:	1b00      	subs	r0, r0, r4
 800336a:	2802      	cmp	r0, #2
 800336c:	d9f6      	bls.n	800335c <HAL_RCC_OscConfig+0x424>
            return HAL_TIMEOUT;
 800336e:	2003      	movs	r0, #3
 8003370:	e006      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8003372:	2000      	movs	r0, #0
 8003374:	e004      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
 8003376:	2000      	movs	r0, #0
 8003378:	e002      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
        return HAL_ERROR;
 800337a:	2001      	movs	r0, #1
 800337c:	e000      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
  return HAL_OK;
 800337e:	2000      	movs	r0, #0
}
 8003380:	b002      	add	sp, #8
 8003382:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003384:	2001      	movs	r0, #1
 8003386:	e7fb      	b.n	8003380 <HAL_RCC_OscConfig+0x448>
 8003388:	40021000 	.word	0x40021000
 800338c:	efffffff 	.word	0xefffffff
 8003390:	feffffff 	.word	0xfeffffff
 8003394:	ffc27fff 	.word	0xffc27fff

08003398 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	b530      	push	{r4, r5, lr}
 800339a:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800339c:	aa04      	add	r2, sp, #16
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <HAL_RCC_GetSysClockFreq+0x68>)
 80033a0:	0018      	movs	r0, r3
 80033a2:	c832      	ldmia	r0!, {r1, r4, r5}
 80033a4:	c232      	stmia	r2!, {r1, r4, r5}
 80033a6:	0011      	movs	r1, r2
 80033a8:	6802      	ldr	r2, [r0, #0]
 80033aa:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80033ac:	466a      	mov	r2, sp
 80033ae:	3310      	adds	r3, #16
 80033b0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80033b2:	c213      	stmia	r2!, {r0, r1, r4}
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <HAL_RCC_GetSysClockFreq+0x6c>)
 80033ba:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033bc:	230c      	movs	r3, #12
 80033be:	4013      	ands	r3, r2
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d11a      	bne.n	80033fa <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80033c4:	0c91      	lsrs	r1, r2, #18
 80033c6:	3307      	adds	r3, #7
 80033c8:	4019      	ands	r1, r3
 80033ca:	a804      	add	r0, sp, #16
 80033cc:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80033ce:	490d      	ldr	r1, [pc, #52]	; (8003404 <HAL_RCC_GetSysClockFreq+0x6c>)
 80033d0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80033d2:	400b      	ands	r3, r1
 80033d4:	4669      	mov	r1, sp
 80033d6:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033d8:	23c0      	movs	r3, #192	; 0xc0
 80033da:	025b      	lsls	r3, r3, #9
 80033dc:	401a      	ands	r2, r3
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	025b      	lsls	r3, r3, #9
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d004      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x58>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80033e6:	4808      	ldr	r0, [pc, #32]	; (8003408 <HAL_RCC_GetSysClockFreq+0x70>)
 80033e8:	f7fc fea0 	bl	800012c <__udivsi3>
 80033ec:	4360      	muls	r0, r4
 80033ee:	e005      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x64>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80033f0:	4805      	ldr	r0, [pc, #20]	; (8003408 <HAL_RCC_GetSysClockFreq+0x70>)
 80033f2:	f7fc fe9b 	bl	800012c <__udivsi3>
 80033f6:	4360      	muls	r0, r4
 80033f8:	e000      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x64>
      sysclockfreq = HSE_VALUE;
 80033fa:	4803      	ldr	r0, [pc, #12]	; (8003408 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80033fc:	b009      	add	sp, #36	; 0x24
 80033fe:	bd30      	pop	{r4, r5, pc}
 8003400:	080063a8 	.word	0x080063a8
 8003404:	40021000 	.word	0x40021000
 8003408:	007a1200 	.word	0x007a1200

0800340c <HAL_RCC_ClockConfig>:
{
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	0005      	movs	r5, r0
 8003410:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003412:	4b4d      	ldr	r3, [pc, #308]	; (8003548 <HAL_RCC_ClockConfig+0x13c>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	2301      	movs	r3, #1
 8003418:	4013      	ands	r3, r2
 800341a:	428b      	cmp	r3, r1
 800341c:	d20b      	bcs.n	8003436 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	494a      	ldr	r1, [pc, #296]	; (8003548 <HAL_RCC_ClockConfig+0x13c>)
 8003420:	680b      	ldr	r3, [r1, #0]
 8003422:	2201      	movs	r2, #1
 8003424:	4393      	bics	r3, r2
 8003426:	4323      	orrs	r3, r4
 8003428:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800342a:	680b      	ldr	r3, [r1, #0]
 800342c:	401a      	ands	r2, r3
 800342e:	4294      	cmp	r4, r2
 8003430:	d001      	beq.n	8003436 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8003432:	2001      	movs	r0, #1
 8003434:	e085      	b.n	8003542 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003436:	682b      	ldr	r3, [r5, #0]
 8003438:	079b      	lsls	r3, r3, #30
 800343a:	d506      	bpl.n	800344a <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800343c:	4a43      	ldr	r2, [pc, #268]	; (800354c <HAL_RCC_ClockConfig+0x140>)
 800343e:	6853      	ldr	r3, [r2, #4]
 8003440:	21f0      	movs	r1, #240	; 0xf0
 8003442:	438b      	bics	r3, r1
 8003444:	68a9      	ldr	r1, [r5, #8]
 8003446:	430b      	orrs	r3, r1
 8003448:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	682b      	ldr	r3, [r5, #0]
 800344c:	07db      	lsls	r3, r3, #31
 800344e:	d54c      	bpl.n	80034ea <HAL_RCC_ClockConfig+0xde>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003450:	686b      	ldr	r3, [r5, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d021      	beq.n	800349a <HAL_RCC_ClockConfig+0x8e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003456:	2b02      	cmp	r3, #2
 8003458:	d025      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x9a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345a:	4a3c      	ldr	r2, [pc, #240]	; (800354c <HAL_RCC_ClockConfig+0x140>)
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	0792      	lsls	r2, r2, #30
 8003460:	d400      	bmi.n	8003464 <HAL_RCC_ClockConfig+0x58>
 8003462:	e06f      	b.n	8003544 <HAL_RCC_ClockConfig+0x138>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003464:	4939      	ldr	r1, [pc, #228]	; (800354c <HAL_RCC_ClockConfig+0x140>)
 8003466:	684a      	ldr	r2, [r1, #4]
 8003468:	2003      	movs	r0, #3
 800346a:	4382      	bics	r2, r0
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003470:	f000 fcfc 	bl	8003e6c <HAL_GetTick>
 8003474:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003476:	686b      	ldr	r3, [r5, #4]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d01a      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xa6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347c:	2b02      	cmp	r3, #2
 800347e:	d026      	beq.n	80034ce <HAL_RCC_ClockConfig+0xc2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003480:	4b32      	ldr	r3, [pc, #200]	; (800354c <HAL_RCC_ClockConfig+0x140>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	220c      	movs	r2, #12
 8003486:	421a      	tst	r2, r3
 8003488:	d02f      	beq.n	80034ea <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348a:	f000 fcef 	bl	8003e6c <HAL_GetTick>
 800348e:	1b80      	subs	r0, r0, r6
 8003490:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <HAL_RCC_ClockConfig+0x144>)
 8003492:	4298      	cmp	r0, r3
 8003494:	d9f4      	bls.n	8003480 <HAL_RCC_ClockConfig+0x74>
          return HAL_TIMEOUT;
 8003496:	2003      	movs	r0, #3
 8003498:	e053      	b.n	8003542 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	4a2c      	ldr	r2, [pc, #176]	; (800354c <HAL_RCC_ClockConfig+0x140>)
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	0392      	lsls	r2, r2, #14
 80034a0:	d4e0      	bmi.n	8003464 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 80034a2:	2001      	movs	r0, #1
 80034a4:	e04d      	b.n	8003542 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a6:	4a29      	ldr	r2, [pc, #164]	; (800354c <HAL_RCC_ClockConfig+0x140>)
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	0192      	lsls	r2, r2, #6
 80034ac:	d4da      	bmi.n	8003464 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 80034ae:	2001      	movs	r0, #1
 80034b0:	e047      	b.n	8003542 <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b2:	4b26      	ldr	r3, [pc, #152]	; (800354c <HAL_RCC_ClockConfig+0x140>)
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	230c      	movs	r3, #12
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d015      	beq.n	80034ea <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034be:	f000 fcd5 	bl	8003e6c <HAL_GetTick>
 80034c2:	1b80      	subs	r0, r0, r6
 80034c4:	4b22      	ldr	r3, [pc, #136]	; (8003550 <HAL_RCC_ClockConfig+0x144>)
 80034c6:	4298      	cmp	r0, r3
 80034c8:	d9f3      	bls.n	80034b2 <HAL_RCC_ClockConfig+0xa6>
          return HAL_TIMEOUT;
 80034ca:	2003      	movs	r0, #3
 80034cc:	e039      	b.n	8003542 <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ce:	4b1f      	ldr	r3, [pc, #124]	; (800354c <HAL_RCC_ClockConfig+0x140>)
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	230c      	movs	r3, #12
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d007      	beq.n	80034ea <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034da:	f000 fcc7 	bl	8003e6c <HAL_GetTick>
 80034de:	1b80      	subs	r0, r0, r6
 80034e0:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_RCC_ClockConfig+0x144>)
 80034e2:	4298      	cmp	r0, r3
 80034e4:	d9f3      	bls.n	80034ce <HAL_RCC_ClockConfig+0xc2>
          return HAL_TIMEOUT;
 80034e6:	2003      	movs	r0, #3
 80034e8:	e02b      	b.n	8003542 <HAL_RCC_ClockConfig+0x136>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80034ea:	4b17      	ldr	r3, [pc, #92]	; (8003548 <HAL_RCC_ClockConfig+0x13c>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	2301      	movs	r3, #1
 80034f0:	4013      	ands	r3, r2
 80034f2:	429c      	cmp	r4, r3
 80034f4:	d20b      	bcs.n	800350e <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4914      	ldr	r1, [pc, #80]	; (8003548 <HAL_RCC_ClockConfig+0x13c>)
 80034f8:	680b      	ldr	r3, [r1, #0]
 80034fa:	2201      	movs	r2, #1
 80034fc:	4393      	bics	r3, r2
 80034fe:	4323      	orrs	r3, r4
 8003500:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003502:	680b      	ldr	r3, [r1, #0]
 8003504:	401a      	ands	r2, r3
 8003506:	4294      	cmp	r4, r2
 8003508:	d001      	beq.n	800350e <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
 800350a:	2001      	movs	r0, #1
 800350c:	e019      	b.n	8003542 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350e:	682b      	ldr	r3, [r5, #0]
 8003510:	075b      	lsls	r3, r3, #29
 8003512:	d506      	bpl.n	8003522 <HAL_RCC_ClockConfig+0x116>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003514:	4a0d      	ldr	r2, [pc, #52]	; (800354c <HAL_RCC_ClockConfig+0x140>)
 8003516:	6853      	ldr	r3, [r2, #4]
 8003518:	490e      	ldr	r1, [pc, #56]	; (8003554 <HAL_RCC_ClockConfig+0x148>)
 800351a:	400b      	ands	r3, r1
 800351c:	68e9      	ldr	r1, [r5, #12]
 800351e:	430b      	orrs	r3, r1
 8003520:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003522:	f7ff ff39 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x140>)
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	0912      	lsrs	r2, r2, #4
 800352c:	230f      	movs	r3, #15
 800352e:	4013      	ands	r3, r2
 8003530:	4a09      	ldr	r2, [pc, #36]	; (8003558 <HAL_RCC_ClockConfig+0x14c>)
 8003532:	5cd3      	ldrb	r3, [r2, r3]
 8003534:	40d8      	lsrs	r0, r3
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_RCC_ClockConfig+0x150>)
 8003538:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800353a:	2003      	movs	r0, #3
 800353c:	f000 fc90 	bl	8003e60 <HAL_InitTick>
  return HAL_OK;
 8003540:	2000      	movs	r0, #0
}
 8003542:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003544:	2001      	movs	r0, #1
 8003546:	e7fc      	b.n	8003542 <HAL_RCC_ClockConfig+0x136>
 8003548:	40022000 	.word	0x40022000
 800354c:	40021000 	.word	0x40021000
 8003550:	00001388 	.word	0x00001388
 8003554:	fffff8ff 	.word	0xfffff8ff
 8003558:	080063c8 	.word	0x080063c8
 800355c:	200001cc 	.word	0x200001cc

08003560 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003560:	4b01      	ldr	r3, [pc, #4]	; (8003568 <HAL_RCC_GetHCLKFreq+0x8>)
 8003562:	6818      	ldr	r0, [r3, #0]
}
 8003564:	4770      	bx	lr
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	200001cc 	.word	0x200001cc

0800356c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800356c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800356e:	f7ff fff7 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 8003572:	4b04      	ldr	r3, [pc, #16]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	0a12      	lsrs	r2, r2, #8
 8003578:	2307      	movs	r3, #7
 800357a:	4013      	ands	r3, r2
 800357c:	4a02      	ldr	r2, [pc, #8]	; (8003588 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800357e:	5cd3      	ldrb	r3, [r2, r3]
 8003580:	40d8      	lsrs	r0, r3
}    
 8003582:	bd10      	pop	{r4, pc}
 8003584:	40021000 	.word	0x40021000
 8003588:	080063d8 	.word	0x080063d8

0800358c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800358c:	4770      	bx	lr

0800358e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800358e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003590:	223d      	movs	r2, #61	; 0x3d
 8003592:	2302      	movs	r3, #2
 8003594:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003596:	6804      	ldr	r4, [r0, #0]
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	2101      	movs	r1, #1
 800359c:	430b      	orrs	r3, r1
 800359e:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80035a0:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 80035a2:	2000      	movs	r0, #0
 80035a4:	bd10      	pop	{r4, pc}
	...

080035a8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 80035a8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <TIM_Base_SetConfig+0x78>)
 80035ac:	4290      	cmp	r0, r2
 80035ae:	d032      	beq.n	8003616 <TIM_Base_SetConfig+0x6e>
 80035b0:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <TIM_Base_SetConfig+0x7c>)
 80035b2:	4290      	cmp	r0, r2
 80035b4:	d02f      	beq.n	8003616 <TIM_Base_SetConfig+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b6:	4a1a      	ldr	r2, [pc, #104]	; (8003620 <TIM_Base_SetConfig+0x78>)
 80035b8:	4290      	cmp	r0, r2
 80035ba:	d00e      	beq.n	80035da <TIM_Base_SetConfig+0x32>
 80035bc:	4a19      	ldr	r2, [pc, #100]	; (8003624 <TIM_Base_SetConfig+0x7c>)
 80035be:	4290      	cmp	r0, r2
 80035c0:	d00b      	beq.n	80035da <TIM_Base_SetConfig+0x32>
 80035c2:	4a19      	ldr	r2, [pc, #100]	; (8003628 <TIM_Base_SetConfig+0x80>)
 80035c4:	4290      	cmp	r0, r2
 80035c6:	d008      	beq.n	80035da <TIM_Base_SetConfig+0x32>
 80035c8:	4a18      	ldr	r2, [pc, #96]	; (800362c <TIM_Base_SetConfig+0x84>)
 80035ca:	4290      	cmp	r0, r2
 80035cc:	d005      	beq.n	80035da <TIM_Base_SetConfig+0x32>
 80035ce:	4a18      	ldr	r2, [pc, #96]	; (8003630 <TIM_Base_SetConfig+0x88>)
 80035d0:	4290      	cmp	r0, r2
 80035d2:	d002      	beq.n	80035da <TIM_Base_SetConfig+0x32>
 80035d4:	4a17      	ldr	r2, [pc, #92]	; (8003634 <TIM_Base_SetConfig+0x8c>)
 80035d6:	4290      	cmp	r0, r2
 80035d8:	d103      	bne.n	80035e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035da:	4a17      	ldr	r2, [pc, #92]	; (8003638 <TIM_Base_SetConfig+0x90>)
 80035dc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035de:	68ca      	ldr	r2, [r1, #12]
 80035e0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e2:	2280      	movs	r2, #128	; 0x80
 80035e4:	4393      	bics	r3, r2
 80035e6:	694a      	ldr	r2, [r1, #20]
 80035e8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80035ea:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ec:	688b      	ldr	r3, [r1, #8]
 80035ee:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80035f0:	680b      	ldr	r3, [r1, #0]
 80035f2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <TIM_Base_SetConfig+0x78>)
 80035f6:	4298      	cmp	r0, r3
 80035f8:	d008      	beq.n	800360c <TIM_Base_SetConfig+0x64>
 80035fa:	4b0c      	ldr	r3, [pc, #48]	; (800362c <TIM_Base_SetConfig+0x84>)
 80035fc:	4298      	cmp	r0, r3
 80035fe:	d005      	beq.n	800360c <TIM_Base_SetConfig+0x64>
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <TIM_Base_SetConfig+0x88>)
 8003602:	4298      	cmp	r0, r3
 8003604:	d002      	beq.n	800360c <TIM_Base_SetConfig+0x64>
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <TIM_Base_SetConfig+0x8c>)
 8003608:	4298      	cmp	r0, r3
 800360a:	d101      	bne.n	8003610 <TIM_Base_SetConfig+0x68>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800360c:	690b      	ldr	r3, [r1, #16]
 800360e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003610:	2301      	movs	r3, #1
 8003612:	6143      	str	r3, [r0, #20]
}
 8003614:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003616:	2270      	movs	r2, #112	; 0x70
 8003618:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800361a:	684a      	ldr	r2, [r1, #4]
 800361c:	4313      	orrs	r3, r2
 800361e:	e7ca      	b.n	80035b6 <TIM_Base_SetConfig+0xe>
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40000400 	.word	0x40000400
 8003628:	40002000 	.word	0x40002000
 800362c:	40014000 	.word	0x40014000
 8003630:	40014400 	.word	0x40014400
 8003634:	40014800 	.word	0x40014800
 8003638:	fffffcff 	.word	0xfffffcff

0800363c <HAL_TIM_Base_Init>:
{
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8003640:	d014      	beq.n	800366c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003642:	233d      	movs	r3, #61	; 0x3d
 8003644:	5cc3      	ldrb	r3, [r0, r3]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 800364a:	253d      	movs	r5, #61	; 0x3d
 800364c:	2302      	movs	r3, #2
 800364e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003650:	1d21      	adds	r1, r4, #4
 8003652:	6820      	ldr	r0, [r4, #0]
 8003654:	f7ff ffa8 	bl	80035a8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003658:	2301      	movs	r3, #1
 800365a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800365c:	2000      	movs	r0, #0
}
 800365e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003660:	2200      	movs	r2, #0
 8003662:	333c      	adds	r3, #60	; 0x3c
 8003664:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003666:	f7ff ff91 	bl	800358c <HAL_TIM_Base_MspInit>
 800366a:	e7ee      	b.n	800364a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 800366c:	2001      	movs	r0, #1
 800366e:	e7f6      	b.n	800365e <HAL_TIM_Base_Init+0x22>

08003670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003670:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003672:	2401      	movs	r4, #1
 8003674:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003676:	6a03      	ldr	r3, [r0, #32]
 8003678:	43a3      	bics	r3, r4
 800367a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800367c:	6a03      	ldr	r3, [r0, #32]
 800367e:	408a      	lsls	r2, r1
 8003680:	431a      	orrs	r2, r3
 8003682:	6202      	str	r2, [r0, #32]
}
 8003684:	bd10      	pop	{r4, pc}
	...

08003688 <HAL_TIM_OC_Start>:
{
 8003688:	b510      	push	{r4, lr}
 800368a:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800368c:	2201      	movs	r2, #1
 800368e:	6800      	ldr	r0, [r0, #0]
 8003690:	f7ff ffee 	bl	8003670 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	4a11      	ldr	r2, [pc, #68]	; (80036dc <HAL_TIM_OC_Start+0x54>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d019      	beq.n	80036d0 <HAL_TIM_OC_Start+0x48>
 800369c:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <HAL_TIM_OC_Start+0x58>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d018      	beq.n	80036d4 <HAL_TIM_OC_Start+0x4c>
 80036a2:	4a10      	ldr	r2, [pc, #64]	; (80036e4 <HAL_TIM_OC_Start+0x5c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d017      	beq.n	80036d8 <HAL_TIM_OC_Start+0x50>
 80036a8:	4a0f      	ldr	r2, [pc, #60]	; (80036e8 <HAL_TIM_OC_Start+0x60>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_TIM_OC_Start+0x44>
 80036ae:	2200      	movs	r2, #0
 80036b0:	2a00      	cmp	r2, #0
 80036b2:	d004      	beq.n	80036be <HAL_TIM_OC_Start+0x36>
    __HAL_TIM_MOE_ENABLE(htim);
 80036b4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80036b6:	2280      	movs	r2, #128	; 0x80
 80036b8:	0212      	lsls	r2, r2, #8
 80036ba:	430a      	orrs	r2, r1
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80036be:	6822      	ldr	r2, [r4, #0]
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	2101      	movs	r1, #1
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6013      	str	r3, [r2, #0]
}
 80036c8:	2000      	movs	r0, #0
 80036ca:	bd10      	pop	{r4, pc}
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036cc:	2201      	movs	r2, #1
 80036ce:	e7ef      	b.n	80036b0 <HAL_TIM_OC_Start+0x28>
 80036d0:	2201      	movs	r2, #1
 80036d2:	e7ed      	b.n	80036b0 <HAL_TIM_OC_Start+0x28>
 80036d4:	2201      	movs	r2, #1
 80036d6:	e7eb      	b.n	80036b0 <HAL_TIM_OC_Start+0x28>
 80036d8:	2201      	movs	r2, #1
 80036da:	e7e9      	b.n	80036b0 <HAL_TIM_OC_Start+0x28>
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40014000 	.word	0x40014000
 80036e4:	40014400 	.word	0x40014400
 80036e8:	40014800 	.word	0x40014800

080036ec <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80036ec:	4770      	bx	lr
	...

080036f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	0004      	movs	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036f4:	6883      	ldr	r3, [r0, #8]
 80036f6:	6902      	ldr	r2, [r0, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	6942      	ldr	r2, [r0, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	69c2      	ldr	r2, [r0, #28]
 8003700:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003702:	6801      	ldr	r1, [r0, #0]
 8003704:	680a      	ldr	r2, [r1, #0]
 8003706:	4864      	ldr	r0, [pc, #400]	; (8003898 <UART_SetConfig+0x1a8>)
 8003708:	4002      	ands	r2, r0
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800370e:	6822      	ldr	r2, [r4, #0]
 8003710:	6853      	ldr	r3, [r2, #4]
 8003712:	4962      	ldr	r1, [pc, #392]	; (800389c <UART_SetConfig+0x1ac>)
 8003714:	400b      	ands	r3, r1
 8003716:	68e1      	ldr	r1, [r4, #12]
 8003718:	430b      	orrs	r3, r1
 800371a:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800371c:	69a3      	ldr	r3, [r4, #24]
 800371e:	6a22      	ldr	r2, [r4, #32]
 8003720:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003722:	6821      	ldr	r1, [r4, #0]
 8003724:	688a      	ldr	r2, [r1, #8]
 8003726:	485e      	ldr	r0, [pc, #376]	; (80038a0 <UART_SetConfig+0x1b0>)
 8003728:	4002      	ands	r2, r0
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800372e:	6825      	ldr	r5, [r4, #0]
 8003730:	4b5c      	ldr	r3, [pc, #368]	; (80038a4 <UART_SetConfig+0x1b4>)
 8003732:	429d      	cmp	r5, r3
 8003734:	d026      	beq.n	8003784 <UART_SetConfig+0x94>
 8003736:	4b5c      	ldr	r3, [pc, #368]	; (80038a8 <UART_SetConfig+0x1b8>)
 8003738:	429d      	cmp	r5, r3
 800373a:	d03b      	beq.n	80037b4 <UART_SetConfig+0xc4>
 800373c:	4b5b      	ldr	r3, [pc, #364]	; (80038ac <UART_SetConfig+0x1bc>)
 800373e:	429d      	cmp	r5, r3
 8003740:	d03a      	beq.n	80037b8 <UART_SetConfig+0xc8>
 8003742:	4b5b      	ldr	r3, [pc, #364]	; (80038b0 <UART_SetConfig+0x1c0>)
 8003744:	429d      	cmp	r5, r3
 8003746:	d031      	beq.n	80037ac <UART_SetConfig+0xbc>
 8003748:	2310      	movs	r3, #16
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374a:	2280      	movs	r2, #128	; 0x80
 800374c:	0212      	lsls	r2, r2, #8
 800374e:	69e1      	ldr	r1, [r4, #28]
 8003750:	4291      	cmp	r1, r2
 8003752:	d033      	beq.n	80037bc <UART_SetConfig+0xcc>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8003754:	2b02      	cmp	r3, #2
 8003756:	d100      	bne.n	800375a <UART_SetConfig+0x6a>
 8003758:	e083      	b.n	8003862 <UART_SetConfig+0x172>
 800375a:	d800      	bhi.n	800375e <UART_SetConfig+0x6e>
 800375c:	e073      	b.n	8003846 <UART_SetConfig+0x156>
 800375e:	2b04      	cmp	r3, #4
 8003760:	d100      	bne.n	8003764 <UART_SetConfig+0x74>
 8003762:	e08a      	b.n	800387a <UART_SetConfig+0x18a>
 8003764:	2b08      	cmp	r3, #8
 8003766:	d000      	beq.n	800376a <UART_SetConfig+0x7a>
 8003768:	e093      	b.n	8003892 <UART_SetConfig+0x1a2>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800376a:	6861      	ldr	r1, [r4, #4]
 800376c:	0848      	lsrs	r0, r1, #1
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	469c      	mov	ip, r3
 8003774:	4460      	add	r0, ip
 8003776:	f7fc fcd9 	bl	800012c <__udivsi3>
 800377a:	0400      	lsls	r0, r0, #16
 800377c:	0c00      	lsrs	r0, r0, #16
 800377e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003780:	2000      	movs	r0, #0
        break;
 8003782:	e045      	b.n	8003810 <UART_SetConfig+0x120>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003784:	4b4b      	ldr	r3, [pc, #300]	; (80038b4 <UART_SetConfig+0x1c4>)
 8003786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003788:	2303      	movs	r3, #3
 800378a:	4013      	ands	r3, r2
 800378c:	2b01      	cmp	r3, #1
 800378e:	d009      	beq.n	80037a4 <UART_SetConfig+0xb4>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <UART_SetConfig+0xb0>
 8003794:	2b02      	cmp	r3, #2
 8003796:	d007      	beq.n	80037a8 <UART_SetConfig+0xb8>
 8003798:	2b03      	cmp	r3, #3
 800379a:	d009      	beq.n	80037b0 <UART_SetConfig+0xc0>
 800379c:	2310      	movs	r3, #16
 800379e:	e7d4      	b.n	800374a <UART_SetConfig+0x5a>
 80037a0:	2300      	movs	r3, #0
 80037a2:	e7d2      	b.n	800374a <UART_SetConfig+0x5a>
 80037a4:	2304      	movs	r3, #4
 80037a6:	e7d0      	b.n	800374a <UART_SetConfig+0x5a>
 80037a8:	2308      	movs	r3, #8
 80037aa:	e7ce      	b.n	800374a <UART_SetConfig+0x5a>
 80037ac:	2300      	movs	r3, #0
 80037ae:	e7cc      	b.n	800374a <UART_SetConfig+0x5a>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e7ca      	b.n	800374a <UART_SetConfig+0x5a>
 80037b4:	2300      	movs	r3, #0
 80037b6:	e7c8      	b.n	800374a <UART_SetConfig+0x5a>
 80037b8:	2300      	movs	r3, #0
 80037ba:	e7c6      	b.n	800374a <UART_SetConfig+0x5a>
    switch (clocksource)
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d028      	beq.n	8003812 <UART_SetConfig+0x122>
 80037c0:	d90f      	bls.n	80037e2 <UART_SetConfig+0xf2>
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d030      	beq.n	8003828 <UART_SetConfig+0x138>
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d13a      	bne.n	8003840 <UART_SetConfig+0x150>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80037ca:	6863      	ldr	r3, [r4, #4]
 80037cc:	0858      	lsrs	r0, r3, #1
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	025b      	lsls	r3, r3, #9
 80037d2:	469c      	mov	ip, r3
 80037d4:	4460      	add	r0, ip
 80037d6:	6861      	ldr	r1, [r4, #4]
 80037d8:	f7fc fca8 	bl	800012c <__udivsi3>
 80037dc:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80037de:	2000      	movs	r0, #0
        break;
 80037e0:	e00c      	b.n	80037fc <UART_SetConfig+0x10c>
    switch (clocksource)
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d12c      	bne.n	8003840 <UART_SetConfig+0x150>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80037e6:	f7ff fec1 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 80037ea:	0040      	lsls	r0, r0, #1
 80037ec:	6863      	ldr	r3, [r4, #4]
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	18c0      	adds	r0, r0, r3
 80037f2:	6861      	ldr	r1, [r4, #4]
 80037f4:	f7fc fc9a 	bl	800012c <__udivsi3>
 80037f8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80037fa:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80037fc:	220f      	movs	r2, #15
 80037fe:	0019      	movs	r1, r3
 8003800:	4391      	bics	r1, r2
 8003802:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003804:	105b      	asrs	r3, r3, #1
 8003806:	2107      	movs	r1, #7
 8003808:	400b      	ands	r3, r1
 800380a:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 800380c:	6822      	ldr	r2, [r4, #0]
 800380e:	60d3      	str	r3, [r2, #12]
    }
  }

  return ret;

}
 8003810:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003812:	6863      	ldr	r3, [r4, #4]
 8003814:	0858      	lsrs	r0, r3, #1
 8003816:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <UART_SetConfig+0x1c8>)
 8003818:	469c      	mov	ip, r3
 800381a:	4460      	add	r0, ip
 800381c:	6861      	ldr	r1, [r4, #4]
 800381e:	f7fc fc85 	bl	800012c <__udivsi3>
 8003822:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003824:	2000      	movs	r0, #0
        break;
 8003826:	e7e9      	b.n	80037fc <UART_SetConfig+0x10c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003828:	f7ff fdb6 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 800382c:	0040      	lsls	r0, r0, #1
 800382e:	6863      	ldr	r3, [r4, #4]
 8003830:	085b      	lsrs	r3, r3, #1
 8003832:	18c0      	adds	r0, r0, r3
 8003834:	6861      	ldr	r1, [r4, #4]
 8003836:	f7fc fc79 	bl	800012c <__udivsi3>
 800383a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800383c:	2000      	movs	r0, #0
        break;
 800383e:	e7dd      	b.n	80037fc <UART_SetConfig+0x10c>
        ret = HAL_ERROR;
 8003840:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003842:	2300      	movs	r3, #0
 8003844:	e7da      	b.n	80037fc <UART_SetConfig+0x10c>
    switch (clocksource)
 8003846:	2b00      	cmp	r3, #0
 8003848:	d123      	bne.n	8003892 <UART_SetConfig+0x1a2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800384a:	f7ff fe8f 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 800384e:	6861      	ldr	r1, [r4, #4]
 8003850:	084b      	lsrs	r3, r1, #1
 8003852:	18c0      	adds	r0, r0, r3
 8003854:	f7fc fc6a 	bl	800012c <__udivsi3>
 8003858:	0400      	lsls	r0, r0, #16
 800385a:	0c00      	lsrs	r0, r0, #16
 800385c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800385e:	2000      	movs	r0, #0
        break;
 8003860:	e7d6      	b.n	8003810 <UART_SetConfig+0x120>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003862:	6861      	ldr	r1, [r4, #4]
 8003864:	0848      	lsrs	r0, r1, #1
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <UART_SetConfig+0x1cc>)
 8003868:	469c      	mov	ip, r3
 800386a:	4460      	add	r0, ip
 800386c:	f7fc fc5e 	bl	800012c <__udivsi3>
 8003870:	0400      	lsls	r0, r0, #16
 8003872:	0c00      	lsrs	r0, r0, #16
 8003874:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003876:	2000      	movs	r0, #0
        break;
 8003878:	e7ca      	b.n	8003810 <UART_SetConfig+0x120>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800387a:	f7ff fd8d 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 800387e:	6861      	ldr	r1, [r4, #4]
 8003880:	084b      	lsrs	r3, r1, #1
 8003882:	18c0      	adds	r0, r0, r3
 8003884:	f7fc fc52 	bl	800012c <__udivsi3>
 8003888:	0400      	lsls	r0, r0, #16
 800388a:	0c00      	lsrs	r0, r0, #16
 800388c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800388e:	2000      	movs	r0, #0
        break;
 8003890:	e7be      	b.n	8003810 <UART_SetConfig+0x120>
        ret = HAL_ERROR;
 8003892:	2001      	movs	r0, #1
 8003894:	e7bc      	b.n	8003810 <UART_SetConfig+0x120>
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	efff69f3 	.word	0xefff69f3
 800389c:	ffffcfff 	.word	0xffffcfff
 80038a0:	fffff4ff 	.word	0xfffff4ff
 80038a4:	40013800 	.word	0x40013800
 80038a8:	40004400 	.word	0x40004400
 80038ac:	40004800 	.word	0x40004800
 80038b0:	40004c00 	.word	0x40004c00
 80038b4:	40021000 	.word	0x40021000
 80038b8:	00f42400 	.word	0x00f42400
 80038bc:	007a1200 	.word	0x007a1200

080038c0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038c2:	07db      	lsls	r3, r3, #31
 80038c4:	d506      	bpl.n	80038d4 <UART_AdvFeatureConfig+0x14>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038c6:	6802      	ldr	r2, [r0, #0]
 80038c8:	6853      	ldr	r3, [r2, #4]
 80038ca:	492c      	ldr	r1, [pc, #176]	; (800397c <UART_AdvFeatureConfig+0xbc>)
 80038cc:	400b      	ands	r3, r1
 80038ce:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038d6:	079b      	lsls	r3, r3, #30
 80038d8:	d506      	bpl.n	80038e8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038da:	6802      	ldr	r2, [r0, #0]
 80038dc:	6853      	ldr	r3, [r2, #4]
 80038de:	4928      	ldr	r1, [pc, #160]	; (8003980 <UART_AdvFeatureConfig+0xc0>)
 80038e0:	400b      	ands	r3, r1
 80038e2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038ea:	075b      	lsls	r3, r3, #29
 80038ec:	d506      	bpl.n	80038fc <UART_AdvFeatureConfig+0x3c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ee:	6802      	ldr	r2, [r0, #0]
 80038f0:	6853      	ldr	r3, [r2, #4]
 80038f2:	4924      	ldr	r1, [pc, #144]	; (8003984 <UART_AdvFeatureConfig+0xc4>)
 80038f4:	400b      	ands	r3, r1
 80038f6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038fe:	071b      	lsls	r3, r3, #28
 8003900:	d506      	bpl.n	8003910 <UART_AdvFeatureConfig+0x50>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003902:	6802      	ldr	r2, [r0, #0]
 8003904:	6853      	ldr	r3, [r2, #4]
 8003906:	4920      	ldr	r1, [pc, #128]	; (8003988 <UART_AdvFeatureConfig+0xc8>)
 8003908:	400b      	ands	r3, r1
 800390a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800390c:	430b      	orrs	r3, r1
 800390e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003910:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003912:	06db      	lsls	r3, r3, #27
 8003914:	d506      	bpl.n	8003924 <UART_AdvFeatureConfig+0x64>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003916:	6802      	ldr	r2, [r0, #0]
 8003918:	6893      	ldr	r3, [r2, #8]
 800391a:	491c      	ldr	r1, [pc, #112]	; (800398c <UART_AdvFeatureConfig+0xcc>)
 800391c:	400b      	ands	r3, r1
 800391e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003920:	430b      	orrs	r3, r1
 8003922:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003924:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003926:	069b      	lsls	r3, r3, #26
 8003928:	d506      	bpl.n	8003938 <UART_AdvFeatureConfig+0x78>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800392a:	6802      	ldr	r2, [r0, #0]
 800392c:	6893      	ldr	r3, [r2, #8]
 800392e:	4918      	ldr	r1, [pc, #96]	; (8003990 <UART_AdvFeatureConfig+0xd0>)
 8003930:	400b      	ands	r3, r1
 8003932:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003934:	430b      	orrs	r3, r1
 8003936:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003938:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800393a:	065b      	lsls	r3, r3, #25
 800393c:	d50b      	bpl.n	8003956 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800393e:	6802      	ldr	r2, [r0, #0]
 8003940:	6853      	ldr	r3, [r2, #4]
 8003942:	4914      	ldr	r1, [pc, #80]	; (8003994 <UART_AdvFeatureConfig+0xd4>)
 8003944:	400b      	ands	r3, r1
 8003946:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003948:	430b      	orrs	r3, r1
 800394a:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	035b      	lsls	r3, r3, #13
 8003950:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003952:	429a      	cmp	r2, r3
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0xac>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003956:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	d506      	bpl.n	800396a <UART_AdvFeatureConfig+0xaa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800395c:	6802      	ldr	r2, [r0, #0]
 800395e:	6853      	ldr	r3, [r2, #4]
 8003960:	490d      	ldr	r1, [pc, #52]	; (8003998 <UART_AdvFeatureConfig+0xd8>)
 8003962:	400b      	ands	r3, r1
 8003964:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003966:	430b      	orrs	r3, r1
 8003968:	6053      	str	r3, [r2, #4]
  }
}
 800396a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800396c:	6802      	ldr	r2, [r0, #0]
 800396e:	6853      	ldr	r3, [r2, #4]
 8003970:	490a      	ldr	r1, [pc, #40]	; (800399c <UART_AdvFeatureConfig+0xdc>)
 8003972:	400b      	ands	r3, r1
 8003974:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003976:	430b      	orrs	r3, r1
 8003978:	6053      	str	r3, [r2, #4]
 800397a:	e7ec      	b.n	8003956 <UART_AdvFeatureConfig+0x96>
 800397c:	fffdffff 	.word	0xfffdffff
 8003980:	fffeffff 	.word	0xfffeffff
 8003984:	fffbffff 	.word	0xfffbffff
 8003988:	ffff7fff 	.word	0xffff7fff
 800398c:	ffffefff 	.word	0xffffefff
 8003990:	ffffdfff 	.word	0xffffdfff
 8003994:	ffefffff 	.word	0xffefffff
 8003998:	fff7ffff 	.word	0xfff7ffff
 800399c:	ff9fffff 	.word	0xff9fffff

080039a0 <UART_CheckIdleState>:
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	66c3      	str	r3, [r0, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80039a4:	2220      	movs	r2, #32
 80039a6:	2169      	movs	r1, #105	; 0x69
 80039a8:	5442      	strb	r2, [r0, r1]
  huart->RxState = HAL_UART_STATE_READY;
 80039aa:	3101      	adds	r1, #1
 80039ac:	5442      	strb	r2, [r0, r1]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039ae:	3248      	adds	r2, #72	; 0x48
 80039b0:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
}
 80039b2:	2000      	movs	r0, #0
 80039b4:	4770      	bx	lr
	...

080039b8 <HAL_UART_Init>:
{
 80039b8:	b510      	push	{r4, lr}
 80039ba:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80039bc:	d030      	beq.n	8003a20 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 80039be:	2369      	movs	r3, #105	; 0x69
 80039c0:	5cc3      	ldrb	r3, [r0, r3]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d022      	beq.n	8003a0c <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80039c6:	2224      	movs	r2, #36	; 0x24
 80039c8:	2369      	movs	r3, #105	; 0x69
 80039ca:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80039cc:	6822      	ldr	r2, [r4, #0]
 80039ce:	6813      	ldr	r3, [r2, #0]
 80039d0:	2101      	movs	r1, #1
 80039d2:	438b      	bics	r3, r1
 80039d4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039d6:	0020      	movs	r0, r4
 80039d8:	f7ff fe8a 	bl	80036f0 <UART_SetConfig>
 80039dc:	2801      	cmp	r0, #1
 80039de:	d014      	beq.n	8003a0a <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d118      	bne.n	8003a18 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80039e6:	6822      	ldr	r2, [r4, #0]
 80039e8:	6853      	ldr	r3, [r2, #4]
 80039ea:	490e      	ldr	r1, [pc, #56]	; (8003a24 <HAL_UART_Init+0x6c>)
 80039ec:	400b      	ands	r3, r1
 80039ee:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80039f0:	6822      	ldr	r2, [r4, #0]
 80039f2:	6893      	ldr	r3, [r2, #8]
 80039f4:	2108      	movs	r1, #8
 80039f6:	438b      	bics	r3, r1
 80039f8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80039fa:	6822      	ldr	r2, [r4, #0]
 80039fc:	6813      	ldr	r3, [r2, #0]
 80039fe:	3907      	subs	r1, #7
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003a04:	0020      	movs	r0, r4
 8003a06:	f7ff ffcb 	bl	80039a0 <UART_CheckIdleState>
}
 8003a0a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	3368      	adds	r3, #104	; 0x68
 8003a10:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8003a12:	f7ff fe6b 	bl	80036ec <HAL_UART_MspInit>
 8003a16:	e7d6      	b.n	80039c6 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8003a18:	0020      	movs	r0, r4
 8003a1a:	f7ff ff51 	bl	80038c0 <UART_AdvFeatureConfig>
 8003a1e:	e7e2      	b.n	80039e6 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8003a20:	2001      	movs	r0, #1
 8003a22:	e7f2      	b.n	8003a0a <HAL_UART_Init+0x52>
 8003a24:	fffff7ff 	.word	0xfffff7ff

08003a28 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8003a28:	b510      	push	{r4, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003a2a:	4b20      	ldr	r3, [pc, #128]	; (8003aac <SystemCoreClockUpdate+0x84>)
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	230c      	movs	r3, #12
 8003a30:	4013      	ands	r3, r2

  switch (tmp)
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d016      	beq.n	8003a64 <SystemCoreClockUpdate+0x3c>
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d018      	beq.n	8003a6c <SystemCoreClockUpdate+0x44>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <SystemCoreClockUpdate+0x1e>
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
      }
      break;
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8003a3e:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <SystemCoreClockUpdate+0x88>)
 8003a40:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <SystemCoreClockUpdate+0x8c>)
 8003a42:	601a      	str	r2, [r3, #0]
      break;
 8003a44:	e002      	b.n	8003a4c <SystemCoreClockUpdate+0x24>
      SystemCoreClock = HSI_VALUE;
 8003a46:	4a1a      	ldr	r2, [pc, #104]	; (8003ab0 <SystemCoreClockUpdate+0x88>)
 8003a48:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <SystemCoreClockUpdate+0x8c>)
 8003a4a:	601a      	str	r2, [r3, #0]
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003a4c:	4b17      	ldr	r3, [pc, #92]	; (8003aac <SystemCoreClockUpdate+0x84>)
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	0912      	lsrs	r2, r2, #4
 8003a52:	230f      	movs	r3, #15
 8003a54:	4013      	ands	r3, r2
 8003a56:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <SystemCoreClockUpdate+0x90>)
 8003a58:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8003a5a:	4a16      	ldr	r2, [pc, #88]	; (8003ab4 <SystemCoreClockUpdate+0x8c>)
 8003a5c:	6811      	ldr	r1, [r2, #0]
 8003a5e:	40d9      	lsrs	r1, r3
 8003a60:	6011      	str	r1, [r2, #0]
}
 8003a62:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8003a64:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <SystemCoreClockUpdate+0x88>)
 8003a66:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <SystemCoreClockUpdate+0x8c>)
 8003a68:	601a      	str	r2, [r3, #0]
      break;
 8003a6a:	e7ef      	b.n	8003a4c <SystemCoreClockUpdate+0x24>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8003a6c:	4a0f      	ldr	r2, [pc, #60]	; (8003aac <SystemCoreClockUpdate+0x84>)
 8003a6e:	6854      	ldr	r4, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8003a70:	6853      	ldr	r3, [r2, #4]
 8003a72:	21c0      	movs	r1, #192	; 0xc0
 8003a74:	0249      	lsls	r1, r1, #9
 8003a76:	400b      	ands	r3, r1
      pllmull = ( pllmull >> 18) + 2;
 8003a78:	0ca4      	lsrs	r4, r4, #18
 8003a7a:	210f      	movs	r1, #15
 8003a7c:	400c      	ands	r4, r1
 8003a7e:	3402      	adds	r4, #2
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8003a80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a82:	4011      	ands	r1, r2
 8003a84:	3101      	adds	r1, #1
      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003a86:	2280      	movs	r2, #128	; 0x80
 8003a88:	0252      	lsls	r2, r2, #9
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d006      	beq.n	8003a9c <SystemCoreClockUpdate+0x74>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8003a8e:	4808      	ldr	r0, [pc, #32]	; (8003ab0 <SystemCoreClockUpdate+0x88>)
 8003a90:	f7fc fb4c 	bl	800012c <__udivsi3>
 8003a94:	4344      	muls	r4, r0
 8003a96:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <SystemCoreClockUpdate+0x8c>)
 8003a98:	601c      	str	r4, [r3, #0]
 8003a9a:	e7d7      	b.n	8003a4c <SystemCoreClockUpdate+0x24>
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8003a9c:	4804      	ldr	r0, [pc, #16]	; (8003ab0 <SystemCoreClockUpdate+0x88>)
 8003a9e:	f7fc fb45 	bl	800012c <__udivsi3>
 8003aa2:	4344      	muls	r4, r0
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <SystemCoreClockUpdate+0x8c>)
 8003aa6:	601c      	str	r4, [r3, #0]
 8003aa8:	e7d0      	b.n	8003a4c <SystemCoreClockUpdate+0x24>
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	007a1200 	.word	0x007a1200
 8003ab4:	200001cc 	.word	0x200001cc
 8003ab8:	080063c8 	.word	0x080063c8

08003abc <uart_irq>:
/******************************************************************************
 * INTERRUPTS HANDLING
 ******************************************************************************/

static void uart_irq(UARTName uart_name)
{
 8003abc:	b510      	push	{r4, lr}
    int8_t id = get_uart_index(uart_name);
 8003abe:	f000 fb4d 	bl	800415c <get_uart_index>
 8003ac2:	1e04      	subs	r4, r0, #0

    if (id >= 0) {
 8003ac4:	db27      	blt.n	8003b16 <uart_irq+0x5a>
        UART_HandleTypeDef *huart = &uart_handlers[id];
        if (serial_irq_ids[id] != 0) {
 8003ac6:	0083      	lsls	r3, r0, #2
 8003ac8:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <uart_irq+0x78>)
 8003aca:	5898      	ldr	r0, [r3, r2]
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d022      	beq.n	8003b16 <uart_irq+0x5a>
            if (__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE) != RESET) {
 8003ad0:	00e3      	lsls	r3, r4, #3
 8003ad2:	1b1b      	subs	r3, r3, r4
 8003ad4:	011a      	lsls	r2, r3, #4
 8003ad6:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <uart_irq+0x7c>)
 8003ad8:	58d3      	ldr	r3, [r2, r3]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	0612      	lsls	r2, r2, #24
 8003ade:	d502      	bpl.n	8003ae6 <uart_irq+0x2a>
                if (__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) {
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	061b      	lsls	r3, r3, #24
 8003ae4:	d418      	bmi.n	8003b18 <uart_irq+0x5c>
                    irq_handler(serial_irq_ids[id], TxIrq);
                }
            }
            if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE) != RESET) {
 8003ae6:	00e3      	lsls	r3, r4, #3
 8003ae8:	1b1b      	subs	r3, r3, r4
 8003aea:	011a      	lsls	r2, r3, #4
 8003aec:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <uart_irq+0x7c>)
 8003aee:	58d3      	ldr	r3, [r2, r3]
 8003af0:	69da      	ldr	r2, [r3, #28]
 8003af2:	0692      	lsls	r2, r2, #26
 8003af4:	d502      	bpl.n	8003afc <uart_irq+0x40>
                if (__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) {
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	069b      	lsls	r3, r3, #26
 8003afa:	d412      	bmi.n	8003b22 <uart_irq+0x66>
                    irq_handler(serial_irq_ids[id], RxIrq);
                    /* Flag has been cleared when reading the content */
                }
            }
            if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) != RESET) {
 8003afc:	00e3      	lsls	r3, r4, #3
 8003afe:	1b1c      	subs	r4, r3, r4
 8003b00:	0123      	lsls	r3, r4, #4
 8003b02:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <uart_irq+0x7c>)
 8003b04:	589b      	ldr	r3, [r3, r2]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	0712      	lsls	r2, r2, #28
 8003b0a:	d504      	bpl.n	8003b16 <uart_irq+0x5a>
                if (__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) {
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	0712      	lsls	r2, r2, #28
 8003b10:	d501      	bpl.n	8003b16 <uart_irq+0x5a>
                    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b12:	2208      	movs	r2, #8
 8003b14:	621a      	str	r2, [r3, #32]
                }
            }
        }
    }
}
 8003b16:	bd10      	pop	{r4, pc}
                    irq_handler(serial_irq_ids[id], TxIrq);
 8003b18:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <uart_irq+0x80>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4798      	blx	r3
 8003b20:	e7e1      	b.n	8003ae6 <uart_irq+0x2a>
                    irq_handler(serial_irq_ids[id], RxIrq);
 8003b22:	00a3      	lsls	r3, r4, #2
 8003b24:	4a03      	ldr	r2, [pc, #12]	; (8003b34 <uart_irq+0x78>)
 8003b26:	5898      	ldr	r0, [r3, r2]
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <uart_irq+0x80>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4798      	blx	r3
 8003b30:	e7e4      	b.n	8003afc <uart_irq+0x40>
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	20000b50 	.word	0x20000b50
 8003b38:	20000ba4 	.word	0x20000ba4
 8003b3c:	20000b4c 	.word	0x20000b4c

08003b40 <uart3_8_irq>:
}
#endif

// Used for both USART3_4_IRQn and USART3_8_IRQn
static void uart3_8_irq(void)
{
 8003b40:	b510      	push	{r4, lr}
        uart_irq(UART_8);
    }
#endif
#else // TARGET_STM32F070RB, TARGET_STM32F072RB
#if defined(USART3_BASE)
    if (USART3->ISR & (UART_FLAG_TXE | UART_FLAG_RXNE | UART_FLAG_ORE)) {
 8003b42:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <uart3_8_irq+0x28>)
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	22a8      	movs	r2, #168	; 0xa8
 8003b48:	421a      	tst	r2, r3
 8003b4a:	d105      	bne.n	8003b58 <uart3_8_irq+0x18>
        uart_irq(UART_3);
    }
#endif
#if defined(USART4_BASE)
    if (USART4->ISR & (UART_FLAG_TXE | UART_FLAG_RXNE | UART_FLAG_ORE)) {
 8003b4c:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <uart3_8_irq+0x2c>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	22a8      	movs	r2, #168	; 0xa8
 8003b52:	421a      	tst	r2, r3
 8003b54:	d104      	bne.n	8003b60 <uart3_8_irq+0x20>
        uart_irq(UART_4);
    }
#endif
#endif
}
 8003b56:	bd10      	pop	{r4, pc}
        uart_irq(UART_3);
 8003b58:	4803      	ldr	r0, [pc, #12]	; (8003b68 <uart3_8_irq+0x28>)
 8003b5a:	f7ff ffaf 	bl	8003abc <uart_irq>
 8003b5e:	e7f5      	b.n	8003b4c <uart3_8_irq+0xc>
        uart_irq(UART_4);
 8003b60:	4802      	ldr	r0, [pc, #8]	; (8003b6c <uart3_8_irq+0x2c>)
 8003b62:	f7ff ffab 	bl	8003abc <uart_irq>
}
 8003b66:	e7f6      	b.n	8003b56 <uart3_8_irq+0x16>
 8003b68:	40004800 	.word	0x40004800
 8003b6c:	40004c00 	.word	0x40004c00

08003b70 <uart2_irq>:
{
 8003b70:	b510      	push	{r4, lr}
    uart_irq(UART_2);
 8003b72:	4802      	ldr	r0, [pc, #8]	; (8003b7c <uart2_irq+0xc>)
 8003b74:	f7ff ffa2 	bl	8003abc <uart_irq>
}
 8003b78:	bd10      	pop	{r4, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	40004400 	.word	0x40004400

08003b80 <uart1_irq>:
{
 8003b80:	b510      	push	{r4, lr}
    uart_irq(UART_1);
 8003b82:	4802      	ldr	r0, [pc, #8]	; (8003b8c <uart1_irq+0xc>)
 8003b84:	f7ff ff9a 	bl	8003abc <uart_irq>
}
 8003b88:	bd10      	pop	{r4, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	40013800 	.word	0x40013800

08003b90 <serial_irq_handler>:

void serial_irq_handler(serial_t *obj, uart_irq_handler handler, uint32_t id)
{
    struct serial_s *obj_s = SERIAL_S(obj);

    irq_handler = handler;
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <serial_irq_handler+0x10>)
 8003b92:	6019      	str	r1, [r3, #0]
    serial_irq_ids[obj_s->index] = id;
 8003b94:	6843      	ldr	r3, [r0, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4902      	ldr	r1, [pc, #8]	; (8003ba4 <serial_irq_handler+0x14>)
 8003b9a:	505a      	str	r2, [r3, r1]
}
 8003b9c:	4770      	bx	lr
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	20000b4c 	.word	0x20000b4c
 8003ba4:	20000b50 	.word	0x20000b50

08003ba8 <serial_irq_set>:

void serial_irq_set(serial_t *obj, SerialIrq irq, uint32_t enable)
{
 8003ba8:	b570      	push	{r4, r5, r6, lr}
    struct serial_s *obj_s = SERIAL_S(obj);
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8003baa:	6845      	ldr	r5, [r0, #4]
    IRQn_Type irq_n = (IRQn_Type)0;
    uint32_t vector = 0;

#if defined(USART1_BASE)
    if (obj_s->uart == UART_1) {
 8003bac:	6803      	ldr	r3, [r0, #0]
 8003bae:	4838      	ldr	r0, [pc, #224]	; (8003c90 <serial_irq_set+0xe8>)
 8003bb0:	4283      	cmp	r3, r0
 8003bb2:	d022      	beq.n	8003bfa <serial_irq_set+0x52>
    uint32_t vector = 0;
 8003bb4:	2000      	movs	r0, #0
    IRQn_Type irq_n = (IRQn_Type)0;
 8003bb6:	2400      	movs	r4, #0
        vector = (uint32_t)&uart1_irq;
    }
#endif

#if defined(USART2_BASE)
    if (obj_s->uart == UART_2) {
 8003bb8:	4e36      	ldr	r6, [pc, #216]	; (8003c94 <serial_irq_set+0xec>)
 8003bba:	42b3      	cmp	r3, r6
 8003bbc:	d020      	beq.n	8003c00 <serial_irq_set+0x58>
        vector = (uint32_t)&uart2_irq;
    }
#endif

#if defined(USART3_BASE)
    if (obj_s->uart == UART_3) {
 8003bbe:	4e36      	ldr	r6, [pc, #216]	; (8003c98 <serial_irq_set+0xf0>)
 8003bc0:	42b3      	cmp	r3, r6
 8003bc2:	d020      	beq.n	8003c06 <serial_irq_set+0x5e>
        vector = (uint32_t)&uart3_8_irq;
    }
#endif

#if defined(USART4_BASE)
    if (obj_s->uart == UART_4) {
 8003bc4:	4e35      	ldr	r6, [pc, #212]	; (8003c9c <serial_irq_set+0xf4>)
 8003bc6:	42b3      	cmp	r3, r6
 8003bc8:	d020      	beq.n	8003c0c <serial_irq_set+0x64>
        irq_n = USART3_8_IRQn;
        vector = (uint32_t)&uart3_8_irq;
    }
#endif

    if (enable) {
 8003bca:	2a00      	cmp	r2, #0
 8003bcc:	d02b      	beq.n	8003c26 <serial_irq_set+0x7e>
        if (irq == RxIrq) {
 8003bce:	2900      	cmp	r1, #0
 8003bd0:	d11f      	bne.n	8003c12 <serial_irq_set+0x6a>
            __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003bd2:	00eb      	lsls	r3, r5, #3
 8003bd4:	1b5d      	subs	r5, r3, r5
 8003bd6:	012b      	lsls	r3, r5, #4
 8003bd8:	4a31      	ldr	r2, [pc, #196]	; (8003ca0 <serial_irq_set+0xf8>)
 8003bda:	589a      	ldr	r2, [r3, r2]
 8003bdc:	6813      	ldr	r3, [r2, #0]
 8003bde:	3120      	adds	r1, #32
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6013      	str	r3, [r2, #0]
        } else { // TxIrq
            __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
        }
        NVIC_SetVector(irq_n, vector);
 8003be4:	0001      	movs	r1, r0
 8003be6:	0020      	movs	r0, r4
 8003be8:	f7fe fd36 	bl	8002658 <NVIC_SetVector>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003bec:	2c00      	cmp	r4, #0
 8003bee:	db03      	blt.n	8003bf8 <serial_irq_set+0x50>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	40a3      	lsls	r3, r4
 8003bf4:	4a2b      	ldr	r2, [pc, #172]	; (8003ca4 <serial_irq_set+0xfc>)
 8003bf6:	6013      	str	r3, [r2, #0]

        if (all_disabled) {
            NVIC_DisableIRQ(irq_n);
        }
    }
}
 8003bf8:	bd70      	pop	{r4, r5, r6, pc}
        vector = (uint32_t)&uart1_irq;
 8003bfa:	482b      	ldr	r0, [pc, #172]	; (8003ca8 <serial_irq_set+0x100>)
        irq_n = USART1_IRQn;
 8003bfc:	241b      	movs	r4, #27
 8003bfe:	e7db      	b.n	8003bb8 <serial_irq_set+0x10>
        vector = (uint32_t)&uart2_irq;
 8003c00:	482a      	ldr	r0, [pc, #168]	; (8003cac <serial_irq_set+0x104>)
        irq_n = USART2_IRQn;
 8003c02:	241c      	movs	r4, #28
 8003c04:	e7db      	b.n	8003bbe <serial_irq_set+0x16>
        vector = (uint32_t)&uart3_8_irq;
 8003c06:	482a      	ldr	r0, [pc, #168]	; (8003cb0 <serial_irq_set+0x108>)
        irq_n = USART3_4_IRQn;
 8003c08:	241d      	movs	r4, #29
 8003c0a:	e7db      	b.n	8003bc4 <serial_irq_set+0x1c>
        vector = (uint32_t)&uart3_8_irq;
 8003c0c:	4828      	ldr	r0, [pc, #160]	; (8003cb0 <serial_irq_set+0x108>)
        irq_n = USART3_4_IRQn;
 8003c0e:	241d      	movs	r4, #29
 8003c10:	e7db      	b.n	8003bca <serial_irq_set+0x22>
            __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003c12:	00eb      	lsls	r3, r5, #3
 8003c14:	1b5d      	subs	r5, r3, r5
 8003c16:	012b      	lsls	r3, r5, #4
 8003c18:	4a21      	ldr	r2, [pc, #132]	; (8003ca0 <serial_irq_set+0xf8>)
 8003c1a:	589a      	ldr	r2, [r3, r2]
 8003c1c:	6813      	ldr	r3, [r2, #0]
 8003c1e:	2180      	movs	r1, #128	; 0x80
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	e7de      	b.n	8003be4 <serial_irq_set+0x3c>
        if (irq == RxIrq) {
 8003c26:	2900      	cmp	r1, #0
 8003c28:	d11d      	bne.n	8003c66 <serial_irq_set+0xbe>
            __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c2a:	491d      	ldr	r1, [pc, #116]	; (8003ca0 <serial_irq_set+0xf8>)
 8003c2c:	00eb      	lsls	r3, r5, #3
 8003c2e:	1b58      	subs	r0, r3, r5
 8003c30:	0102      	lsls	r2, r0, #4
 8003c32:	5850      	ldr	r0, [r2, r1]
 8003c34:	6802      	ldr	r2, [r0, #0]
 8003c36:	2620      	movs	r6, #32
 8003c38:	43b2      	bics	r2, r6
 8003c3a:	6002      	str	r2, [r0, #0]
            if ((huart->Instance->CR1 & USART_CR1_TXEIE) == 0) {
 8003c3c:	1b5d      	subs	r5, r3, r5
 8003c3e:	012b      	lsls	r3, r5, #4
 8003c40:	585b      	ldr	r3, [r3, r1]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	d51f      	bpl.n	8003c88 <serial_irq_set+0xe0>
        int all_disabled = 0;
 8003c48:	2300      	movs	r3, #0
        if (all_disabled) {
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0d4      	beq.n	8003bf8 <serial_irq_set+0x50>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003c4e:	2c00      	cmp	r4, #0
 8003c50:	dbd2      	blt.n	8003bf8 <serial_irq_set+0x50>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c52:	2301      	movs	r3, #1
 8003c54:	40a3      	lsls	r3, r4
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	4912      	ldr	r1, [pc, #72]	; (8003ca4 <serial_irq_set+0xfc>)
 8003c5a:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c60:	f3bf 8f6f 	isb	sy
}
 8003c64:	e7c8      	b.n	8003bf8 <serial_irq_set+0x50>
            __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c66:	490e      	ldr	r1, [pc, #56]	; (8003ca0 <serial_irq_set+0xf8>)
 8003c68:	00eb      	lsls	r3, r5, #3
 8003c6a:	1b58      	subs	r0, r3, r5
 8003c6c:	0102      	lsls	r2, r0, #4
 8003c6e:	5850      	ldr	r0, [r2, r1]
 8003c70:	6802      	ldr	r2, [r0, #0]
 8003c72:	2680      	movs	r6, #128	; 0x80
 8003c74:	43b2      	bics	r2, r6
 8003c76:	6002      	str	r2, [r0, #0]
            if ((huart->Instance->CR1 & USART_CR1_RXNEIE) == 0) {
 8003c78:	1b5d      	subs	r5, r3, r5
 8003c7a:	012b      	lsls	r3, r5, #4
 8003c7c:	585b      	ldr	r3, [r3, r1]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	069b      	lsls	r3, r3, #26
 8003c82:	d503      	bpl.n	8003c8c <serial_irq_set+0xe4>
        int all_disabled = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e7e0      	b.n	8003c4a <serial_irq_set+0xa2>
                all_disabled = 1;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e7de      	b.n	8003c4a <serial_irq_set+0xa2>
                all_disabled = 1;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e7dc      	b.n	8003c4a <serial_irq_set+0xa2>
 8003c90:	40013800 	.word	0x40013800
 8003c94:	40004400 	.word	0x40004400
 8003c98:	40004800 	.word	0x40004800
 8003c9c:	40004c00 	.word	0x40004c00
 8003ca0:	20000ba4 	.word	0x20000ba4
 8003ca4:	e000e100 	.word	0xe000e100
 8003ca8:	08003b81 	.word	0x08003b81
 8003cac:	08003b71 	.word	0x08003b71
 8003cb0:	08003b41 	.word	0x08003b41

08003cb4 <serial_getc>:
/******************************************************************************
 * READ/WRITE
 ******************************************************************************/

int serial_getc(serial_t *obj)
{
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	0004      	movs	r4, r0
    struct serial_s *obj_s = SERIAL_S(obj);
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8003cb8:	6845      	ldr	r5, [r0, #4]

    while (!serial_readable(obj));
 8003cba:	0020      	movs	r0, r4
 8003cbc:	f000 f9e2 	bl	8004084 <serial_readable>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d0fa      	beq.n	8003cba <serial_getc+0x6>
    return (int)(huart->Instance->RDR & (uint16_t)0xFF);
 8003cc4:	00eb      	lsls	r3, r5, #3
 8003cc6:	1b5b      	subs	r3, r3, r5
 8003cc8:	011a      	lsls	r2, r3, #4
 8003cca:	4b03      	ldr	r3, [pc, #12]	; (8003cd8 <serial_getc+0x24>)
 8003ccc:	58d3      	ldr	r3, [r2, r3]
 8003cce:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8003cd0:	23ff      	movs	r3, #255	; 0xff
 8003cd2:	4018      	ands	r0, r3
}
 8003cd4:	bd70      	pop	{r4, r5, r6, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	20000ba4 	.word	0x20000ba4

08003cdc <serial_putc>:

void serial_putc(serial_t *obj, int c)
{
 8003cdc:	b570      	push	{r4, r5, r6, lr}
 8003cde:	0004      	movs	r4, r0
 8003ce0:	000e      	movs	r6, r1
    struct serial_s *obj_s = SERIAL_S(obj);
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8003ce2:	6845      	ldr	r5, [r0, #4]

    while (!serial_writable(obj));
 8003ce4:	0020      	movs	r0, r4
 8003ce6:	f000 f9e5 	bl	80040b4 <serial_writable>
 8003cea:	2800      	cmp	r0, #0
 8003cec:	d0fa      	beq.n	8003ce4 <serial_putc+0x8>
    huart->Instance->TDR = (uint32_t)(c & (uint16_t)0xFF);
 8003cee:	00eb      	lsls	r3, r5, #3
 8003cf0:	1b5b      	subs	r3, r3, r5
 8003cf2:	011a      	lsls	r2, r3, #4
 8003cf4:	4b02      	ldr	r3, [pc, #8]	; (8003d00 <serial_putc+0x24>)
 8003cf6:	58d3      	ldr	r3, [r2, r3]
 8003cf8:	21ff      	movs	r1, #255	; 0xff
 8003cfa:	4031      	ands	r1, r6
 8003cfc:	8519      	strh	r1, [r3, #40]	; 0x28
}
 8003cfe:	bd70      	pop	{r4, r5, r6, pc}
 8003d00:	20000ba4 	.word	0x20000ba4

08003d04 <analogin_read>:
    value = ((value << 4) & (uint16_t)0xFFF0) | ((value >> 8) & (uint16_t)0x000F);
    return value;
}

float analogin_read(analogin_t *obj)
{
 8003d04:	b510      	push	{r4, lr}
    uint16_t value = adc_read(obj);
 8003d06:	f7fe fded 	bl	80028e4 <adc_read>
    return (float)value * (1.0f / (float)0xFFF); // 12 bits range
 8003d0a:	f7fc fce5 	bl	80006d8 <__aeabi_ui2f>
 8003d0e:	4902      	ldr	r1, [pc, #8]	; (8003d18 <analogin_read+0x14>)
 8003d10:	f7fc fba2 	bl	8000458 <__aeabi_fmul>
}
 8003d14:	bd10      	pop	{r4, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	39800801 	.word	0x39800801

08003d1c <Set_GPIO_Clock>:

extern const uint32_t ll_pin_defines[16];

// Enable GPIO clock and return GPIO base address
GPIO_TypeDef *Set_GPIO_Clock(uint32_t port_idx)
{
 8003d1c:	b500      	push	{lr}
 8003d1e:	b087      	sub	sp, #28
    uint32_t gpio_add = 0;
    switch (port_idx) {
 8003d20:	2805      	cmp	r0, #5
 8003d22:	d841      	bhi.n	8003da8 <Set_GPIO_Clock+0x8c>
 8003d24:	0080      	lsls	r0, r0, #2
 8003d26:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <Set_GPIO_Clock+0x98>)
 8003d28:	581b      	ldr	r3, [r3, r0]
 8003d2a:	469f      	mov	pc, r3
        case PortA:
            gpio_add = GPIOA_BASE;
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2c:	4a22      	ldr	r2, [pc, #136]	; (8003db8 <Set_GPIO_Clock+0x9c>)
 8003d2e:	6951      	ldr	r1, [r2, #20]
 8003d30:	2080      	movs	r0, #128	; 0x80
 8003d32:	0280      	lsls	r0, r0, #10
 8003d34:	4301      	orrs	r1, r0
 8003d36:	6151      	str	r1, [r2, #20]
 8003d38:	6953      	ldr	r3, [r2, #20]
 8003d3a:	4003      	ands	r3, r0
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	9b01      	ldr	r3, [sp, #4]
            gpio_add = GPIOA_BASE;
 8003d40:	2090      	movs	r0, #144	; 0x90
 8003d42:	05c0      	lsls	r0, r0, #23
        default:
            error("Pinmap error: wrong port number.");
            break;
    }
    return (GPIO_TypeDef *) gpio_add;
}
 8003d44:	b007      	add	sp, #28
 8003d46:	bd00      	pop	{pc}
            __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d48:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <Set_GPIO_Clock+0x9c>)
 8003d4a:	6951      	ldr	r1, [r2, #20]
 8003d4c:	2080      	movs	r0, #128	; 0x80
 8003d4e:	02c0      	lsls	r0, r0, #11
 8003d50:	4301      	orrs	r1, r0
 8003d52:	6151      	str	r1, [r2, #20]
 8003d54:	6953      	ldr	r3, [r2, #20]
 8003d56:	4003      	ands	r3, r0
 8003d58:	9302      	str	r3, [sp, #8]
 8003d5a:	9b02      	ldr	r3, [sp, #8]
            gpio_add = GPIOB_BASE;
 8003d5c:	4817      	ldr	r0, [pc, #92]	; (8003dbc <Set_GPIO_Clock+0xa0>)
            break;
 8003d5e:	e7f1      	b.n	8003d44 <Set_GPIO_Clock+0x28>
            __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d60:	4a15      	ldr	r2, [pc, #84]	; (8003db8 <Set_GPIO_Clock+0x9c>)
 8003d62:	6951      	ldr	r1, [r2, #20]
 8003d64:	2080      	movs	r0, #128	; 0x80
 8003d66:	0300      	lsls	r0, r0, #12
 8003d68:	4301      	orrs	r1, r0
 8003d6a:	6151      	str	r1, [r2, #20]
 8003d6c:	6953      	ldr	r3, [r2, #20]
 8003d6e:	4003      	ands	r3, r0
 8003d70:	9303      	str	r3, [sp, #12]
 8003d72:	9b03      	ldr	r3, [sp, #12]
            gpio_add = GPIOC_BASE;
 8003d74:	4812      	ldr	r0, [pc, #72]	; (8003dc0 <Set_GPIO_Clock+0xa4>)
            break;
 8003d76:	e7e5      	b.n	8003d44 <Set_GPIO_Clock+0x28>
            __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d78:	4a0f      	ldr	r2, [pc, #60]	; (8003db8 <Set_GPIO_Clock+0x9c>)
 8003d7a:	6951      	ldr	r1, [r2, #20]
 8003d7c:	2080      	movs	r0, #128	; 0x80
 8003d7e:	0340      	lsls	r0, r0, #13
 8003d80:	4301      	orrs	r1, r0
 8003d82:	6151      	str	r1, [r2, #20]
 8003d84:	6953      	ldr	r3, [r2, #20]
 8003d86:	4003      	ands	r3, r0
 8003d88:	9304      	str	r3, [sp, #16]
 8003d8a:	9b04      	ldr	r3, [sp, #16]
            gpio_add = GPIOD_BASE;
 8003d8c:	480d      	ldr	r0, [pc, #52]	; (8003dc4 <Set_GPIO_Clock+0xa8>)
            break;
 8003d8e:	e7d9      	b.n	8003d44 <Set_GPIO_Clock+0x28>
            __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d90:	4a09      	ldr	r2, [pc, #36]	; (8003db8 <Set_GPIO_Clock+0x9c>)
 8003d92:	6951      	ldr	r1, [r2, #20]
 8003d94:	2080      	movs	r0, #128	; 0x80
 8003d96:	03c0      	lsls	r0, r0, #15
 8003d98:	4301      	orrs	r1, r0
 8003d9a:	6151      	str	r1, [r2, #20]
 8003d9c:	6953      	ldr	r3, [r2, #20]
 8003d9e:	4003      	ands	r3, r0
 8003da0:	9305      	str	r3, [sp, #20]
 8003da2:	9b05      	ldr	r3, [sp, #20]
            gpio_add = GPIOF_BASE;
 8003da4:	4808      	ldr	r0, [pc, #32]	; (8003dc8 <Set_GPIO_Clock+0xac>)
            break;
 8003da6:	e7cd      	b.n	8003d44 <Set_GPIO_Clock+0x28>
            error("Pinmap error: wrong port number.");
 8003da8:	4808      	ldr	r0, [pc, #32]	; (8003dcc <Set_GPIO_Clock+0xb0>)
 8003daa:	f7fd ffe1 	bl	8001d70 <error>
    uint32_t gpio_add = 0;
 8003dae:	2000      	movs	r0, #0
            break;
 8003db0:	e7c8      	b.n	8003d44 <Set_GPIO_Clock+0x28>
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	080063e0 	.word	0x080063e0
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	48000400 	.word	0x48000400
 8003dc0:	48000800 	.word	0x48000800
 8003dc4:	48000c00 	.word	0x48000c00
 8003dc8:	48001400 	.word	0x48001400
 8003dcc:	080063f8 	.word	0x080063f8

08003dd0 <gpio_set>:

uint32_t gpio_set(PinName pin)
{
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	0004      	movs	r4, r0
    MBED_ASSERT(pin != (PinName)NC);

    pin_function(pin, STM_PIN_DATA(STM_MODE_INPUT, GPIO_NOPULL, 0));
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	f000 f885 	bl	8003ee4 <pin_function>

    return (uint32_t)(1 << ((uint32_t)pin & 0xF)); // Return the pin mask
 8003dda:	230f      	movs	r3, #15
 8003ddc:	401c      	ands	r4, r3
 8003dde:	2001      	movs	r0, #1
 8003de0:	40a0      	lsls	r0, r4
}
 8003de2:	bd10      	pop	{r4, pc}

08003de4 <gpio_init>:


void gpio_init(gpio_t *obj, PinName pin)
{
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	0004      	movs	r4, r0
 8003de8:	000e      	movs	r6, r1
    obj->pin = pin;
 8003dea:	8221      	strh	r1, [r4, #16]
    if (pin == (PinName)NC) {
 8003dec:	1c4b      	adds	r3, r1, #1
 8003dee:	d018      	beq.n	8003e22 <gpio_init+0x3e>
        return;
    }

    uint32_t port_index = STM_PORT(pin);
 8003df0:	090b      	lsrs	r3, r1, #4
 8003df2:	200f      	movs	r0, #15
 8003df4:	4018      	ands	r0, r3

    // Enable GPIO clock
    GPIO_TypeDef *gpio = Set_GPIO_Clock(port_index);
 8003df6:	f7ff ff91 	bl	8003d1c <Set_GPIO_Clock>
 8003dfa:	0005      	movs	r5, r0

    // Fill GPIO object structure for future use
    obj->mask    = gpio_set(pin);
 8003dfc:	0030      	movs	r0, r6
 8003dfe:	f7ff ffe7 	bl	8003dd0 <gpio_set>
 8003e02:	6020      	str	r0, [r4, #0]
    obj->gpio  = gpio;
 8003e04:	6165      	str	r5, [r4, #20]
    obj->ll_pin  = ll_pin_defines[STM_PIN(obj->pin)];
 8003e06:	8a22      	ldrh	r2, [r4, #16]
 8003e08:	230f      	movs	r3, #15
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4a05      	ldr	r2, [pc, #20]	; (8003e24 <gpio_init+0x40>)
 8003e10:	589b      	ldr	r3, [r3, r2]
 8003e12:	61a3      	str	r3, [r4, #24]
    obj->reg_in  = &gpio->IDR;
 8003e14:	002b      	movs	r3, r5
 8003e16:	3310      	adds	r3, #16
 8003e18:	6063      	str	r3, [r4, #4]
    obj->reg_set = &gpio->BSRR;
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	60a3      	str	r3, [r4, #8]
#ifdef GPIO_IP_WITHOUT_BRR
    obj->reg_clr = &gpio->BSRR;
#else
    obj->reg_clr = &gpio->BRR;
 8003e1e:	3528      	adds	r5, #40	; 0x28
 8003e20:	60e5      	str	r5, [r4, #12]
#endif
}
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
 8003e24:	0800641c 	.word	0x0800641c

08003e28 <gpio_mode>:

void gpio_mode(gpio_t *obj, PinMode mode)
{
 8003e28:	b510      	push	{r4, lr}
    pin_mode(obj->pin, mode);
 8003e2a:	2310      	movs	r3, #16
 8003e2c:	5ec0      	ldrsh	r0, [r0, r3]
 8003e2e:	f000 f8e3 	bl	8003ff8 <pin_mode>
}
 8003e32:	bd10      	pop	{r4, pc}

08003e34 <gpio_dir>:

inline void gpio_dir(gpio_t *obj, PinDirection direction)
{
 8003e34:	b510      	push	{r4, lr}
    if (direction == PIN_INPUT) {
 8003e36:	2900      	cmp	r1, #0
 8003e38:	d009      	beq.n	8003e4e <gpio_dir+0x1a>
        LL_GPIO_SetPinMode(obj->gpio, obj->ll_pin, LL_GPIO_MODE_INPUT);
    } else {
        LL_GPIO_SetPinMode(obj->gpio, obj->ll_pin, LL_GPIO_MODE_OUTPUT);
 8003e3a:	6944      	ldr	r4, [r0, #20]
 8003e3c:	6983      	ldr	r3, [r0, #24]
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8003e3e:	6822      	ldr	r2, [r4, #0]
 8003e40:	435b      	muls	r3, r3
 8003e42:	0059      	lsls	r1, r3, #1
 8003e44:	18c9      	adds	r1, r1, r3
 8003e46:	438a      	bics	r2, r1
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	6023      	str	r3, [r4, #0]
    }
}
 8003e4c:	bd10      	pop	{r4, pc}
        LL_GPIO_SetPinMode(obj->gpio, obj->ll_pin, LL_GPIO_MODE_INPUT);
 8003e4e:	6944      	ldr	r4, [r0, #20]
 8003e50:	6983      	ldr	r3, [r0, #24]
 8003e52:	6822      	ldr	r2, [r4, #0]
 8003e54:	435b      	muls	r3, r3
 8003e56:	0059      	lsls	r1, r3, #1
 8003e58:	18cb      	adds	r3, r1, r3
 8003e5a:	439a      	bics	r2, r3
 8003e5c:	6022      	str	r2, [r4, #0]
 8003e5e:	e7f5      	b.n	8003e4c <gpio_dir+0x18>

08003e60 <HAL_InitTick>:
#endif

// Overwrite default HAL functions defined as "weak"

HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e60:	b510      	push	{r4, lr}
#if TIM_MST_BIT_WIDTH == 16
    init_16bit_timer();
 8003e62:	f000 fa69 	bl	8004338 <init_16bit_timer>
#else
    init_32bit_timer();
#endif
    return HAL_OK;
}
 8003e66:	2000      	movs	r0, #0
 8003e68:	bd10      	pop	{r4, pc}
	...

08003e6c <HAL_GetTick>:

uint32_t HAL_GetTick()
{
 8003e6c:	b510      	push	{r4, lr}
#if TIM_MST_BIT_WIDTH == 16
    uint32_t new_time;
    if (mbed_sdk_inited) {
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <HAL_GetTick+0x4c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d111      	bne.n	8003e9a <HAL_GetTick+0x2e>
        new_time = ticker_read_us(get_us_ticker_data()) + prev_time;
        prev_time = 0; // Use this time only once
        return (new_time / 1000);
    }
    else {
        new_time = us_ticker_read();
 8003e76:	f000 fadd 	bl	8004434 <us_ticker_read>
 8003e7a:	0001      	movs	r1, r0
        elapsed_time += (new_time - prev_time) & 0xFFFF; // Only use the lower 16 bits
 8003e7c:	4a0f      	ldr	r2, [pc, #60]	; (8003ebc <HAL_GetTick+0x50>)
 8003e7e:	6813      	ldr	r3, [r2, #0]
 8003e80:	1ac3      	subs	r3, r0, r3
 8003e82:	041b      	lsls	r3, r3, #16
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	4c0e      	ldr	r4, [pc, #56]	; (8003ec0 <HAL_GetTick+0x54>)
 8003e88:	6820      	ldr	r0, [r4, #0]
 8003e8a:	1818      	adds	r0, r3, r0
 8003e8c:	6020      	str	r0, [r4, #0]
        prev_time = new_time;
 8003e8e:	6011      	str	r1, [r2, #0]
        return (elapsed_time / 1000);
 8003e90:	21fa      	movs	r1, #250	; 0xfa
 8003e92:	0089      	lsls	r1, r1, #2
 8003e94:	f7fc f94a 	bl	800012c <__udivsi3>
    }
    else {
        return (us_ticker_read() / 1000);
    }
#endif
}
 8003e98:	bd10      	pop	{r4, pc}
        new_time = ticker_read_us(get_us_ticker_data()) + prev_time;
 8003e9a:	f7fd fcdb 	bl	8001854 <get_us_ticker_data>
 8003e9e:	f7fd fcc6 	bl	800182e <ticker_read_us>
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_GetTick+0x50>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4694      	mov	ip, r2
 8003ea8:	4460      	add	r0, ip
        prev_time = 0; // Use this time only once
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
        return (new_time / 1000);
 8003eae:	21fa      	movs	r1, #250	; 0xfa
 8003eb0:	0089      	lsls	r1, r1, #2
 8003eb2:	f7fc f93b 	bl	800012c <__udivsi3>
 8003eb6:	e7ef      	b.n	8003e98 <HAL_GetTick+0x2c>
 8003eb8:	20000b68 	.word	0x20000b68
 8003ebc:	20000b64 	.word	0x20000b64
 8003ec0:	20000b60 	.word	0x20000b60

08003ec4 <mbed_sdk_init>:

int mbed_sdk_inited = 0;

// This function is called after RAM initialization and before main.
void mbed_sdk_init()
{
 8003ec4:	b510      	push	{r4, lr}
        SCB_EnableDCache();
    }
#endif /* TARGET_STM32F7 */

    // Update the SystemCoreClock variable.
    SystemCoreClockUpdate();
 8003ec6:	f7ff fdaf 	bl	8003a28 <SystemCoreClockUpdate>
    HAL_Init();
 8003eca:	f7fe fd75 	bl	80029b8 <HAL_Init>

    /* Configure the System clock source, PLL Multiplier and Divider factors,
       AHB/APBx prescalers and Flash settings */
    SetSysClock();
 8003ece:	f7fe fc91 	bl	80027f4 <SetSysClock>
    SystemCoreClockUpdate();
 8003ed2:	f7ff fda9 	bl	8003a28 <SystemCoreClockUpdate>

    mbed_sdk_inited = 1;
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	4b01      	ldr	r3, [pc, #4]	; (8003ee0 <mbed_sdk_init+0x1c>)
 8003eda:	601a      	str	r2, [r3, #0]
}
 8003edc:	bd10      	pop	{r4, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	20000b68 	.word	0x20000b68

08003ee4 <pin_function>:

/**
 * Configure pin (mode, speed, output type and pull-up/pull-down)
 */
void pin_function(PinName pin, int data)
{
 8003ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee6:	46d6      	mov	lr, sl
 8003ee8:	464f      	mov	r7, r9
 8003eea:	4646      	mov	r6, r8
 8003eec:	b5c0      	push	{r6, r7, lr}
 8003eee:	0007      	movs	r7, r0
 8003ef0:	000e      	movs	r6, r1
    MBED_ASSERT(pin != (PinName)NC);

    // Get the pin informations
    uint32_t mode  = STM_PIN_FUNCTION(data);
 8003ef2:	2507      	movs	r5, #7
 8003ef4:	400d      	ands	r5, r1
    uint32_t afnum = STM_PIN_AFNUM(data);
 8003ef6:	120b      	asrs	r3, r1, #8
 8003ef8:	200f      	movs	r0, #15
 8003efa:	4003      	ands	r3, r0
 8003efc:	4698      	mov	r8, r3
    uint32_t port = STM_PORT(pin);
 8003efe:	093b      	lsrs	r3, r7, #4
 8003f00:	4018      	ands	r0, r3
    uint32_t ll_pin  = ll_pin_defines[STM_PIN(pin)];
 8003f02:	230f      	movs	r3, #15
 8003f04:	403b      	ands	r3, r7
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4a3a      	ldr	r2, [pc, #232]	; (8003ff4 <pin_function+0x110>)
 8003f0a:	589c      	ldr	r4, [r3, r2]
    uint32_t ll_mode = 0;

    // Enable GPIO clock
    GPIO_TypeDef *gpio = Set_GPIO_Clock(port);
 8003f0c:	f7ff ff06 	bl	8003d1c <Set_GPIO_Clock>
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8003f10:	6883      	ldr	r3, [r0, #8]
 8003f12:	4699      	mov	r9, r3
 8003f14:	0022      	movs	r2, r4
 8003f16:	4362      	muls	r2, r4
 8003f18:	0053      	lsls	r3, r2, #1
 8003f1a:	469a      	mov	sl, r3
 8003f1c:	4492      	add	sl, r2
 8003f1e:	4653      	mov	r3, sl
 8003f20:	43d9      	mvns	r1, r3
 8003f22:	468c      	mov	ip, r1
 8003f24:	464b      	mov	r3, r9
 8003f26:	400b      	ands	r3, r1
 8003f28:	0019      	movs	r1, r3
 8003f2a:	4653      	mov	r3, sl
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinSpeed(gpio, ll_pin, LL_GPIO_SPEED_FREQ_HIGH);
#if defined (TARGET_STM32F1)
    }
#endif

    switch (mode) {
 8003f30:	2d02      	cmp	r5, #2
 8003f32:	d005      	beq.n	8003f40 <pin_function+0x5c>
 8003f34:	2d03      	cmp	r5, #3
 8003f36:	d027      	beq.n	8003f88 <pin_function+0xa4>
 8003f38:	2d01      	cmp	r5, #1
 8003f3a:	d025      	beq.n	8003f88 <pin_function+0xa4>
    uint32_t ll_mode = 0;
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	e024      	b.n	8003f8a <pin_function+0xa6>
 8003f40:	230f      	movs	r3, #15
 8003f42:	401f      	ands	r7, r3
    }
}

static inline void stm_pin_SetAFPin(GPIO_TypeDef *gpio, PinName pin, uint32_t afnum)
{
    uint32_t ll_pin  = ll_pin_defines[STM_PIN(pin)];
 8003f44:	00b9      	lsls	r1, r7, #2
 8003f46:	4b2b      	ldr	r3, [pc, #172]	; (8003ff4 <pin_function+0x110>)
 8003f48:	58c9      	ldr	r1, [r1, r3]

    if (STM_PIN(pin) > 7) {
 8003f4a:	2f07      	cmp	r7, #7
 8003f4c:	d80d      	bhi.n	8003f6a <pin_function+0x86>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003f4e:	6a07      	ldr	r7, [r0, #32]
 8003f50:	000b      	movs	r3, r1
 8003f52:	434b      	muls	r3, r1
 8003f54:	434b      	muls	r3, r1
 8003f56:	434b      	muls	r3, r1
 8003f58:	0119      	lsls	r1, r3, #4
 8003f5a:	1ac9      	subs	r1, r1, r3
 8003f5c:	438f      	bics	r7, r1
 8003f5e:	4641      	mov	r1, r8
 8003f60:	434b      	muls	r3, r1
 8003f62:	433b      	orrs	r3, r7
 8003f64:	6203      	str	r3, [r0, #32]
            break;
        case STM_PIN_OUTPUT:
            ll_mode = LL_GPIO_MODE_OUTPUT;
            break;
        case STM_PIN_ALTERNATE:
            ll_mode = LL_GPIO_MODE_ALTERNATE;
 8003f66:	0029      	movs	r1, r5
 8003f68:	e00f      	b.n	8003f8a <pin_function+0xa6>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003f6a:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8003f6c:	0a0b      	lsrs	r3, r1, #8
 8003f6e:	0019      	movs	r1, r3
 8003f70:	4359      	muls	r1, r3
 8003f72:	4359      	muls	r1, r3
 8003f74:	434b      	muls	r3, r1
 8003f76:	0119      	lsls	r1, r3, #4
 8003f78:	1ac9      	subs	r1, r1, r3
 8003f7a:	438f      	bics	r7, r1
 8003f7c:	4641      	mov	r1, r8
 8003f7e:	434b      	muls	r3, r1
 8003f80:	433b      	orrs	r3, r7
 8003f82:	6243      	str	r3, [r0, #36]	; 0x24
 8003f84:	0029      	movs	r1, r5
 8003f86:	e000      	b.n	8003f8a <pin_function+0xa6>
            ll_mode = LL_GPIO_MODE_OUTPUT;
 8003f88:	0029      	movs	r1, r5
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8003f8a:	6803      	ldr	r3, [r0, #0]
 8003f8c:	4667      	mov	r7, ip
 8003f8e:	403b      	ands	r3, r7
 8003f90:	434a      	muls	r2, r1
 8003f92:	4313      	orrs	r3, r2
 8003f94:	6003      	str	r3, [r0, #0]
        LL_GPIO_DisablePinAnalogControl(gpio, ll_pin);
    }
#endif

    /*  For now by default use Speed HIGH for output or alt modes */
    if ((mode == STM_PIN_OUTPUT) || (mode == STM_PIN_ALTERNATE)) {
 8003f96:	3d01      	subs	r5, #1
 8003f98:	2d01      	cmp	r5, #1
 8003f9a:	d90d      	bls.n	8003fb8 <pin_function+0xd4>
        } else {
            LL_GPIO_SetPinOutputType(gpio, ll_pin, LL_GPIO_OUTPUT_PUSHPULL);
        }
    }

    stm_pin_PullConfig(gpio, ll_pin, STM_PIN_PUPD(data));
 8003f9c:	1136      	asrs	r6, r6, #4
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	401e      	ands	r6, r3
    switch (pull_config) {
 8003fa2:	2e01      	cmp	r6, #1
 8003fa4:	d012      	beq.n	8003fcc <pin_function+0xe8>
 8003fa6:	2e02      	cmp	r6, #2
 8003fa8:	d01c      	beq.n	8003fe4 <pin_function+0x100>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8003faa:	68c3      	ldr	r3, [r0, #12]
 8003fac:	4364      	muls	r4, r4
 8003fae:	0062      	lsls	r2, r4, #1
 8003fb0:	1914      	adds	r4, r2, r4
 8003fb2:	43a3      	bics	r3, r4
 8003fb4:	60c3      	str	r3, [r0, #12]

    stm_pin_DisconnectDebug(pin);
}
 8003fb6:	e010      	b.n	8003fda <pin_function+0xf6>
        if (STM_PIN_OD(data)) {
 8003fb8:	0733      	lsls	r3, r6, #28
 8003fba:	d403      	bmi.n	8003fc4 <pin_function+0xe0>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003fbc:	6843      	ldr	r3, [r0, #4]
 8003fbe:	43a3      	bics	r3, r4
 8003fc0:	6043      	str	r3, [r0, #4]
 8003fc2:	e7eb      	b.n	8003f9c <pin_function+0xb8>
 8003fc4:	6843      	ldr	r3, [r0, #4]
 8003fc6:	4323      	orrs	r3, r4
 8003fc8:	6043      	str	r3, [r0, #4]
 8003fca:	e7e7      	b.n	8003f9c <pin_function+0xb8>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8003fcc:	68c3      	ldr	r3, [r0, #12]
 8003fce:	4364      	muls	r4, r4
 8003fd0:	0062      	lsls	r2, r4, #1
 8003fd2:	1912      	adds	r2, r2, r4
 8003fd4:	4393      	bics	r3, r2
 8003fd6:	431c      	orrs	r4, r3
 8003fd8:	60c4      	str	r4, [r0, #12]
}
 8003fda:	bc1c      	pop	{r2, r3, r4}
 8003fdc:	4690      	mov	r8, r2
 8003fde:	4699      	mov	r9, r3
 8003fe0:	46a2      	mov	sl, r4
 8003fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe4:	68c3      	ldr	r3, [r0, #12]
 8003fe6:	4364      	muls	r4, r4
 8003fe8:	0062      	lsls	r2, r4, #1
 8003fea:	1914      	adds	r4, r2, r4
 8003fec:	43a3      	bics	r3, r4
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60c3      	str	r3, [r0, #12]
 8003ff2:	e7f2      	b.n	8003fda <pin_function+0xf6>
 8003ff4:	0800641c 	.word	0x0800641c

08003ff8 <pin_mode>:

/**
 * Configure pin pull-up/pull-down
 */
void pin_mode(PinName pin, PinMode mode)
{
 8003ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffa:	46c6      	mov	lr, r8
 8003ffc:	b500      	push	{lr}
 8003ffe:	0003      	movs	r3, r0
 8004000:	000f      	movs	r7, r1
    MBED_ASSERT(pin != (PinName)NC);

    uint32_t port_index = STM_PORT(pin);
 8004002:	0902      	lsrs	r2, r0, #4
 8004004:	200f      	movs	r0, #15
 8004006:	4010      	ands	r0, r2
    uint32_t ll_pin  = ll_pin_defines[STM_PIN(pin)];
 8004008:	220f      	movs	r2, #15
 800400a:	4013      	ands	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4a1c      	ldr	r2, [pc, #112]	; (8004080 <pin_mode+0x88>)
 8004010:	589b      	ldr	r3, [r3, r2]
 8004012:	4698      	mov	r8, r3
    // Enable GPIO clock
    GPIO_TypeDef *gpio = Set_GPIO_Clock(port_index);
 8004014:	f7ff fe82 	bl	8003d1c <Set_GPIO_Clock>
 8004018:	0006      	movs	r6, r0
  return (uint32_t)(READ_BIT(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0)) / (Pin * Pin));
 800401a:	6800      	ldr	r0, [r0, #0]
 800401c:	4644      	mov	r4, r8
 800401e:	4364      	muls	r4, r4
 8004020:	0065      	lsls	r5, r4, #1
 8004022:	192d      	adds	r5, r5, r4
 8004024:	4028      	ands	r0, r5
 8004026:	0021      	movs	r1, r4
 8004028:	f7fc f880 	bl	800012c <__udivsi3>
    uint32_t function = LL_GPIO_GetPinMode(gpio, ll_pin);

    if ((function == LL_GPIO_MODE_OUTPUT) || (function == LL_GPIO_MODE_ALTERNATE)) {
 800402c:	3801      	subs	r0, #1
 800402e:	2801      	cmp	r0, #1
 8004030:	d90d      	bls.n	800404e <pin_mode+0x56>
        } else {
            LL_GPIO_SetPinOutputType(gpio, ll_pin, LL_GPIO_OUTPUT_PUSHPULL);
        }
    }

    if ((mode == OpenDrainPullUp) || (mode == PullUp)) {
 8004032:	2f03      	cmp	r7, #3
 8004034:	d019      	beq.n	800406a <pin_mode+0x72>
 8004036:	2f01      	cmp	r7, #1
 8004038:	d017      	beq.n	800406a <pin_mode+0x72>
        stm_pin_PullConfig(gpio, ll_pin, GPIO_PULLUP);
    } else if ((mode == OpenDrainPullDown) || (mode == PullDown)) {
 800403a:	2f05      	cmp	r7, #5
 800403c:	d01a      	beq.n	8004074 <pin_mode+0x7c>
 800403e:	2f02      	cmp	r7, #2
 8004040:	d018      	beq.n	8004074 <pin_mode+0x7c>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8004042:	68f3      	ldr	r3, [r6, #12]
 8004044:	43ab      	bics	r3, r5
 8004046:	60f3      	str	r3, [r6, #12]
        stm_pin_PullConfig(gpio, ll_pin, GPIO_PULLDOWN);
    } else {
        stm_pin_PullConfig(gpio, ll_pin, GPIO_NOPULL);
    }
}
 8004048:	bc04      	pop	{r2}
 800404a:	4690      	mov	r8, r2
 800404c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((mode == OpenDrainNoPull) || (mode == OpenDrainPullUp) || (mode == OpenDrainPullDown)) {
 800404e:	1efb      	subs	r3, r7, #3
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d804      	bhi.n	8004060 <pin_mode+0x68>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004056:	6873      	ldr	r3, [r6, #4]
 8004058:	4642      	mov	r2, r8
 800405a:	431a      	orrs	r2, r3
 800405c:	6072      	str	r2, [r6, #4]
 800405e:	e7e8      	b.n	8004032 <pin_mode+0x3a>
 8004060:	6873      	ldr	r3, [r6, #4]
 8004062:	4642      	mov	r2, r8
 8004064:	4393      	bics	r3, r2
 8004066:	6073      	str	r3, [r6, #4]
 8004068:	e7e3      	b.n	8004032 <pin_mode+0x3a>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800406a:	68f3      	ldr	r3, [r6, #12]
 800406c:	43ab      	bics	r3, r5
 800406e:	431c      	orrs	r4, r3
 8004070:	60f4      	str	r4, [r6, #12]
 8004072:	e7e9      	b.n	8004048 <pin_mode+0x50>
 8004074:	68f3      	ldr	r3, [r6, #12]
 8004076:	43ab      	bics	r3, r5
 8004078:	0064      	lsls	r4, r4, #1
 800407a:	431c      	orrs	r4, r3
 800407c:	60f4      	str	r4, [r6, #12]
 800407e:	e7e3      	b.n	8004048 <pin_mode+0x50>
 8004080:	0800641c 	.word	0x0800641c

08004084 <serial_readable>:
 ******************************************************************************/

int serial_readable(serial_t *obj)
{
    struct serial_s *obj_s = SERIAL_S(obj);
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8004084:	6842      	ldr	r2, [r0, #4]
    /*  To avoid a target blocking case, let's check for
     *  possible OVERRUN error and discard it
     */
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8004086:	00d3      	lsls	r3, r2, #3
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	0119      	lsls	r1, r3, #4
 800408c:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <serial_readable+0x2c>)
 800408e:	58cb      	ldr	r3, [r1, r3]
 8004090:	69d9      	ldr	r1, [r3, #28]
 8004092:	0709      	lsls	r1, r1, #28
 8004094:	d501      	bpl.n	800409a <serial_readable+0x16>
        __HAL_UART_CLEAR_OREFLAG(huart);
 8004096:	2108      	movs	r1, #8
 8004098:	6219      	str	r1, [r3, #32]
    }
    // Check if data is received
    return (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE) != RESET) ? 1 : 0;
 800409a:	00d3      	lsls	r3, r2, #3
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	011a      	lsls	r2, r3, #4
 80040a0:	4b03      	ldr	r3, [pc, #12]	; (80040b0 <serial_readable+0x2c>)
 80040a2:	58d3      	ldr	r3, [r2, r3]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	2020      	movs	r0, #32
 80040a8:	4018      	ands	r0, r3
 80040aa:	1e43      	subs	r3, r0, #1
 80040ac:	4198      	sbcs	r0, r3
}
 80040ae:	4770      	bx	lr
 80040b0:	20000ba4 	.word	0x20000ba4

080040b4 <serial_writable>:

int serial_writable(serial_t *obj)
{
    struct serial_s *obj_s = SERIAL_S(obj);
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 80040b4:	6842      	ldr	r2, [r0, #4]

    // Check if data is transmitted
    return (__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE) != RESET) ? 1 : 0;
 80040b6:	00d3      	lsls	r3, r2, #3
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	011a      	lsls	r2, r3, #4
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <serial_writable+0x18>)
 80040be:	58d3      	ldr	r3, [r2, r3]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	2080      	movs	r0, #128	; 0x80
 80040c4:	4018      	ands	r0, r3
 80040c6:	1e43      	subs	r3, r0, #1
 80040c8:	4198      	sbcs	r0, r3
}
 80040ca:	4770      	bx	lr
 80040cc:	20000ba4 	.word	0x20000ba4

080040d0 <init_uart>:
/******************************************************************************
 * UTILITY FUNCTIONS
 ******************************************************************************/

HAL_StatusTypeDef init_uart(serial_t *obj)
{
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	0003      	movs	r3, r0
    struct serial_s *obj_s = SERIAL_S(obj);
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 80040d4:	6841      	ldr	r1, [r0, #4]
 80040d6:	00ca      	lsls	r2, r1, #3
 80040d8:	1a54      	subs	r4, r2, r1
 80040da:	0120      	lsls	r0, r4, #4
 80040dc:	4c1b      	ldr	r4, [pc, #108]	; (800414c <init_uart+0x7c>)
 80040de:	1900      	adds	r0, r0, r4
    huart->Instance = (USART_TypeDef *)(obj_s->uart);
 80040e0:	1a52      	subs	r2, r2, r1
 80040e2:	0115      	lsls	r5, r2, #4
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	512a      	str	r2, [r5, r4]

    huart->Init.BaudRate     = obj_s->baudrate;
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	6042      	str	r2, [r0, #4]
    huart->Init.WordLength   = obj_s->databits;
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	6082      	str	r2, [r0, #8]
    huart->Init.StopBits     = obj_s->stopbits;
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	60c2      	str	r2, [r0, #12]
    huart->Init.Parity       = obj_s->parity;
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	6102      	str	r2, [r0, #16]
#if DEVICE_SERIAL_FC
    huart->Init.HwFlowCtl    = obj_s->hw_flow_ctl;
 80040f8:	6a1a      	ldr	r2, [r3, #32]
 80040fa:	6182      	str	r2, [r0, #24]
#else
    huart->Init.HwFlowCtl    = UART_HWCONTROL_NONE;
#endif
    huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80040fc:	2200      	movs	r2, #0
 80040fe:	61c2      	str	r2, [r0, #28]
    huart->TxXferCount       = 0;
 8004100:	0004      	movs	r4, r0
 8004102:	3452      	adds	r4, #82	; 0x52
 8004104:	8022      	strh	r2, [r4, #0]
    huart->TxXferSize        = 0;
 8004106:	3c02      	subs	r4, #2
 8004108:	8022      	strh	r2, [r4, #0]
    huart->RxXferCount       = 0;
 800410a:	340a      	adds	r4, #10
 800410c:	8022      	strh	r2, [r4, #0]
    huart->RxXferSize        = 0;
 800410e:	3c02      	subs	r4, #2
 8004110:	8022      	strh	r2, [r4, #0]

    if (obj_s->pin_rx == NC) {
 8004112:	241a      	movs	r4, #26
 8004114:	5f1a      	ldrsh	r2, [r3, r4]
 8004116:	3201      	adds	r2, #1
 8004118:	d00d      	beq.n	8004136 <init_uart+0x66>
        huart->Init.Mode = UART_MODE_TX;
    } else if (obj_s->pin_tx == NC) {
 800411a:	2218      	movs	r2, #24
 800411c:	5e9b      	ldrsh	r3, [r3, r2]
 800411e:	3301      	adds	r3, #1
 8004120:	d00c      	beq.n	800413c <init_uart+0x6c>
        huart->Init.Mode = UART_MODE_RX;
    } else {
        huart->Init.Mode = UART_MODE_TX_RX;
 8004122:	00cb      	lsls	r3, r1, #3
 8004124:	1a59      	subs	r1, r3, r1
 8004126:	010a      	lsls	r2, r1, #4
 8004128:	4b08      	ldr	r3, [pc, #32]	; (800414c <init_uart+0x7c>)
 800412a:	189b      	adds	r3, r3, r2
 800412c:	220c      	movs	r2, #12
 800412e:	615a      	str	r2, [r3, #20]
            HAL_UARTEx_DisableStopMode(huart);
        }
    }
#endif

    return HAL_UART_Init(huart);
 8004130:	f7ff fc42 	bl	80039b8 <HAL_UART_Init>
}
 8004134:	bd70      	pop	{r4, r5, r6, pc}
        huart->Init.Mode = UART_MODE_TX;
 8004136:	2208      	movs	r2, #8
 8004138:	6142      	str	r2, [r0, #20]
 800413a:	e7f9      	b.n	8004130 <init_uart+0x60>
        huart->Init.Mode = UART_MODE_RX;
 800413c:	00cb      	lsls	r3, r1, #3
 800413e:	1a59      	subs	r1, r3, r1
 8004140:	010a      	lsls	r2, r1, #4
 8004142:	4b02      	ldr	r3, [pc, #8]	; (800414c <init_uart+0x7c>)
 8004144:	189b      	adds	r3, r3, r2
 8004146:	2204      	movs	r2, #4
 8004148:	615a      	str	r2, [r3, #20]
 800414a:	e7f1      	b.n	8004130 <init_uart+0x60>
 800414c:	20000ba4 	.word	0x20000ba4

08004150 <serial_baud>:
{
 8004150:	b510      	push	{r4, lr}
    obj_s->baudrate = baudrate;
 8004152:	6081      	str	r1, [r0, #8]
    if (init_uart(obj) != HAL_OK) {
 8004154:	f7ff ffbc 	bl	80040d0 <init_uart>
}
 8004158:	bd10      	pop	{r4, pc}
	...

0800415c <get_uart_index>:
int8_t get_uart_index(UARTName uart_name)
{
    uint8_t index = 0;

#if defined(USART1_BASE)
    if (uart_name == UART_1) {
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <get_uart_index+0x30>)
 800415e:	4298      	cmp	r0, r3
 8004160:	d00a      	beq.n	8004178 <get_uart_index+0x1c>
    }
    index++;
#endif

#if defined(USART2_BASE)
    if (uart_name == UART_2) {
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <get_uart_index+0x34>)
 8004164:	4298      	cmp	r0, r3
 8004166:	d009      	beq.n	800417c <get_uart_index+0x20>
    }
    index++;
#endif

#if defined(USART3_BASE)
    if (uart_name == UART_3) {
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <get_uart_index+0x38>)
 800416a:	4298      	cmp	r0, r3
 800416c:	d008      	beq.n	8004180 <get_uart_index+0x24>
    }
    index++;
#endif

#if defined(USART4_BASE)
    if (uart_name == UART_4) {
 800416e:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <get_uart_index+0x3c>)
 8004170:	4298      	cmp	r0, r3
 8004172:	d107      	bne.n	8004184 <get_uart_index+0x28>
        return index;
 8004174:	2003      	movs	r0, #3
    }
    index++;
#endif

    return -1;
}
 8004176:	4770      	bx	lr
        return index;
 8004178:	2000      	movs	r0, #0
 800417a:	e7fc      	b.n	8004176 <get_uart_index+0x1a>
        return index;
 800417c:	2001      	movs	r0, #1
 800417e:	e7fa      	b.n	8004176 <get_uart_index+0x1a>
        return index;
 8004180:	2002      	movs	r0, #2
 8004182:	e7f8      	b.n	8004176 <get_uart_index+0x1a>
    return -1;
 8004184:	2001      	movs	r0, #1
 8004186:	4240      	negs	r0, r0
 8004188:	e7f5      	b.n	8004176 <get_uart_index+0x1a>
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	40013800 	.word	0x40013800
 8004190:	40004400 	.word	0x40004400
 8004194:	40004800 	.word	0x40004800
 8004198:	40004c00 	.word	0x40004c00

0800419c <serial_init>:
{
 800419c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419e:	b085      	sub	sp, #20
 80041a0:	0004      	movs	r4, r0
 80041a2:	000d      	movs	r5, r1
 80041a4:	0016      	movs	r6, r2
    UARTName uart_tx = (UARTName)pinmap_peripheral(tx, PinMap_UART_TX);
 80041a6:	4948      	ldr	r1, [pc, #288]	; (80042c8 <serial_init+0x12c>)
 80041a8:	0028      	movs	r0, r5
 80041aa:	f7fd f869 	bl	8001280 <pinmap_peripheral>
 80041ae:	0007      	movs	r7, r0
    UARTName uart_rx = (UARTName)pinmap_peripheral(rx, PinMap_UART_RX);
 80041b0:	4946      	ldr	r1, [pc, #280]	; (80042cc <serial_init+0x130>)
 80041b2:	0030      	movs	r0, r6
 80041b4:	f7fd f864 	bl	8001280 <pinmap_peripheral>
 80041b8:	0001      	movs	r1, r0
    obj_s->uart = (UARTName)pinmap_merge(uart_tx, uart_rx);
 80041ba:	0038      	movs	r0, r7
 80041bc:	f7fd f83a 	bl	8001234 <pinmap_merge>
 80041c0:	6020      	str	r0, [r4, #0]
    if ((tx == STDIO_UART_TX) || (rx == STDIO_UART_RX)) {
 80041c2:	2d02      	cmp	r5, #2
 80041c4:	d00e      	beq.n	80041e4 <serial_init+0x48>
 80041c6:	2e03      	cmp	r6, #3
 80041c8:	d00e      	beq.n	80041e8 <serial_init+0x4c>
        if (uart_tx == pinmap_peripheral(STDIO_UART_TX, PinMap_UART_TX)) {
 80041ca:	493f      	ldr	r1, [pc, #252]	; (80042c8 <serial_init+0x12c>)
 80041cc:	2002      	movs	r0, #2
 80041ce:	f7fd f857 	bl	8001280 <pinmap_peripheral>
 80041d2:	4287      	cmp	r7, r0
 80041d4:	d001      	beq.n	80041da <serial_init+0x3e>
    uint8_t stdio_config = 0;
 80041d6:	2700      	movs	r7, #0
 80041d8:	e007      	b.n	80041ea <serial_init+0x4e>
            error("Error: new serial object is using same UART as STDIO");
 80041da:	483d      	ldr	r0, [pc, #244]	; (80042d0 <serial_init+0x134>)
 80041dc:	f7fd fdc8 	bl	8001d70 <error>
    uint8_t stdio_config = 0;
 80041e0:	2700      	movs	r7, #0
 80041e2:	e002      	b.n	80041ea <serial_init+0x4e>
        stdio_config = 1;
 80041e4:	2701      	movs	r7, #1
 80041e6:	e000      	b.n	80041ea <serial_init+0x4e>
 80041e8:	2701      	movs	r7, #1
    if (obj_s->uart == UART_1) {
 80041ea:	4b3a      	ldr	r3, [pc, #232]	; (80042d4 <serial_init+0x138>)
 80041ec:	6822      	ldr	r2, [r4, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d034      	beq.n	800425c <serial_init+0xc0>
    if (obj_s->uart == UART_2) {
 80041f2:	4b39      	ldr	r3, [pc, #228]	; (80042d8 <serial_init+0x13c>)
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d03b      	beq.n	8004272 <serial_init+0xd6>
    if (obj_s->uart == UART_3) {
 80041fa:	4b38      	ldr	r3, [pc, #224]	; (80042dc <serial_init+0x140>)
 80041fc:	6822      	ldr	r2, [r4, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d042      	beq.n	8004288 <serial_init+0xec>
    if (obj_s->uart == UART_4) {
 8004202:	4b37      	ldr	r3, [pc, #220]	; (80042e0 <serial_init+0x144>)
 8004204:	6822      	ldr	r2, [r4, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d049      	beq.n	800429e <serial_init+0x102>
    obj_s->index = get_uart_index(obj_s->uart);
 800420a:	6820      	ldr	r0, [r4, #0]
 800420c:	f7ff ffa6 	bl	800415c <get_uart_index>
 8004210:	6060      	str	r0, [r4, #4]
    pinmap_pinout(tx, PinMap_UART_TX);
 8004212:	492d      	ldr	r1, [pc, #180]	; (80042c8 <serial_init+0x12c>)
 8004214:	0028      	movs	r0, r5
 8004216:	f7fc ffeb 	bl	80011f0 <pinmap_pinout>
    pinmap_pinout(rx, PinMap_UART_RX);
 800421a:	492c      	ldr	r1, [pc, #176]	; (80042cc <serial_init+0x130>)
 800421c:	0030      	movs	r0, r6
 800421e:	f7fc ffe7 	bl	80011f0 <pinmap_pinout>
    if (tx != NC) {
 8004222:	1c6b      	adds	r3, r5, #1
 8004224:	d003      	beq.n	800422e <serial_init+0x92>
        pin_mode(tx, PullUp);
 8004226:	2101      	movs	r1, #1
 8004228:	0028      	movs	r0, r5
 800422a:	f7ff fee5 	bl	8003ff8 <pin_mode>
    if (rx != NC) {
 800422e:	1c73      	adds	r3, r6, #1
 8004230:	d003      	beq.n	800423a <serial_init+0x9e>
        pin_mode(rx, PullUp);
 8004232:	2101      	movs	r1, #1
 8004234:	0030      	movs	r0, r6
 8004236:	f7ff fedf 	bl	8003ff8 <pin_mode>
    obj_s->baudrate = 9600; // baudrate default value
 800423a:	2396      	movs	r3, #150	; 0x96
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	60a3      	str	r3, [r4, #8]
    obj_s->databits = UART_WORDLENGTH_8B;
 8004240:	2300      	movs	r3, #0
 8004242:	60e3      	str	r3, [r4, #12]
    obj_s->stopbits = UART_STOPBITS_1;
 8004244:	6123      	str	r3, [r4, #16]
    obj_s->parity   = UART_PARITY_NONE;
 8004246:	6163      	str	r3, [r4, #20]
    obj_s->hw_flow_ctl = UART_HWCONTROL_NONE;
 8004248:	6223      	str	r3, [r4, #32]
    obj_s->pin_tx = tx;
 800424a:	8325      	strh	r5, [r4, #24]
    obj_s->pin_rx = rx;
 800424c:	8366      	strh	r6, [r4, #26]
    init_uart(obj); /* init_uart will be called again in serial_baud function, so don't worry if init_uart returns HAL_ERROR */
 800424e:	0020      	movs	r0, r4
 8004250:	f7ff ff3e 	bl	80040d0 <init_uart>
    if (stdio_config) {
 8004254:	2f00      	cmp	r7, #0
 8004256:	d12d      	bne.n	80042b4 <serial_init+0x118>
}
 8004258:	b005      	add	sp, #20
 800425a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_USART1_CLK_ENABLE();
 800425c:	4a21      	ldr	r2, [pc, #132]	; (80042e4 <serial_init+0x148>)
 800425e:	6991      	ldr	r1, [r2, #24]
 8004260:	2080      	movs	r0, #128	; 0x80
 8004262:	01c0      	lsls	r0, r0, #7
 8004264:	4301      	orrs	r1, r0
 8004266:	6191      	str	r1, [r2, #24]
 8004268:	6993      	ldr	r3, [r2, #24]
 800426a:	4003      	ands	r3, r0
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	9b00      	ldr	r3, [sp, #0]
 8004270:	e7bf      	b.n	80041f2 <serial_init+0x56>
        __HAL_RCC_USART2_CLK_ENABLE();
 8004272:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <serial_init+0x148>)
 8004274:	69d1      	ldr	r1, [r2, #28]
 8004276:	2080      	movs	r0, #128	; 0x80
 8004278:	0280      	lsls	r0, r0, #10
 800427a:	4301      	orrs	r1, r0
 800427c:	61d1      	str	r1, [r2, #28]
 800427e:	69d3      	ldr	r3, [r2, #28]
 8004280:	4003      	ands	r3, r0
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	9b01      	ldr	r3, [sp, #4]
 8004286:	e7b8      	b.n	80041fa <serial_init+0x5e>
        __HAL_RCC_USART3_CLK_ENABLE();
 8004288:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <serial_init+0x148>)
 800428a:	69d1      	ldr	r1, [r2, #28]
 800428c:	2080      	movs	r0, #128	; 0x80
 800428e:	02c0      	lsls	r0, r0, #11
 8004290:	4301      	orrs	r1, r0
 8004292:	61d1      	str	r1, [r2, #28]
 8004294:	69d3      	ldr	r3, [r2, #28]
 8004296:	4003      	ands	r3, r0
 8004298:	9302      	str	r3, [sp, #8]
 800429a:	9b02      	ldr	r3, [sp, #8]
 800429c:	e7b1      	b.n	8004202 <serial_init+0x66>
        __HAL_RCC_USART4_CLK_ENABLE();
 800429e:	4a11      	ldr	r2, [pc, #68]	; (80042e4 <serial_init+0x148>)
 80042a0:	69d1      	ldr	r1, [r2, #28]
 80042a2:	2080      	movs	r0, #128	; 0x80
 80042a4:	0300      	lsls	r0, r0, #12
 80042a6:	4301      	orrs	r1, r0
 80042a8:	61d1      	str	r1, [r2, #28]
 80042aa:	69d3      	ldr	r3, [r2, #28]
 80042ac:	4003      	ands	r3, r0
 80042ae:	9303      	str	r3, [sp, #12]
 80042b0:	9b03      	ldr	r3, [sp, #12]
 80042b2:	e7aa      	b.n	800420a <serial_init+0x6e>
        stdio_uart_inited = 1;
 80042b4:	2201      	movs	r2, #1
 80042b6:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <serial_init+0x14c>)
 80042b8:	601a      	str	r2, [r3, #0]
        memcpy(&stdio_uart, obj, sizeof(serial_t));
 80042ba:	324b      	adds	r2, #75	; 0x4b
 80042bc:	0021      	movs	r1, r4
 80042be:	480b      	ldr	r0, [pc, #44]	; (80042ec <serial_init+0x150>)
 80042c0:	f001 f97e 	bl	80055c0 <memcpy>
}
 80042c4:	e7c8      	b.n	8004258 <serial_init+0xbc>
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	080062bc 	.word	0x080062bc
 80042cc:	08006244 	.word	0x08006244
 80042d0:	0800645c 	.word	0x0800645c
 80042d4:	40013800 	.word	0x40013800
 80042d8:	40004400 	.word	0x40004400
 80042dc:	40004800 	.word	0x40004800
 80042e0:	40004c00 	.word	0x40004c00
 80042e4:	40021000 	.word	0x40021000
 80042e8:	20000b6c 	.word	0x20000b6c
 80042ec:	20000d64 	.word	0x20000d64

080042f0 <timer_update_irq_handler>:
{
#else
void timer_irq_handler(void)
{
#endif
    TimMasterHandle.Instance = TIM_MST;
 80042f0:	4a01      	ldr	r2, [pc, #4]	; (80042f8 <timer_update_irq_handler+0x8>)
 80042f2:	4b02      	ldr	r3, [pc, #8]	; (80042fc <timer_update_irq_handler+0xc>)
 80042f4:	601a      	str	r2, [r3, #0]

#if defined(TARGET_STM32F0)
} // end timer_update_irq_handler function
 80042f6:	4770      	bx	lr
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	20000db4 	.word	0x20000db4

08004300 <timer_oc_irq_handler>:

void timer_oc_irq_handler(void)
{
 8004300:	b510      	push	{r4, lr}
    TimMasterHandle.Instance = TIM_MST;
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <timer_oc_irq_handler+0x28>)
 8004304:	4a09      	ldr	r2, [pc, #36]	; (800432c <timer_oc_irq_handler+0x2c>)
 8004306:	6013      	str	r3, [r2, #0]
#endif
    if (__HAL_TIM_GET_FLAG(&TimMasterHandle, TIM_FLAG_CC1) == SET) {
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	079b      	lsls	r3, r3, #30
 800430c:	d503      	bpl.n	8004316 <timer_oc_irq_handler+0x16>
        if (__HAL_TIM_GET_IT_SOURCE(&TimMasterHandle, TIM_IT_CC1) == SET) {
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <timer_oc_irq_handler+0x28>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	079b      	lsls	r3, r3, #30
 8004314:	d400      	bmi.n	8004318 <timer_oc_irq_handler+0x18>
            __HAL_TIM_CLEAR_IT(&TimMasterHandle, TIM_IT_CC1);
            us_ticker_irq_handler();
        }
    }
}
 8004316:	bd10      	pop	{r4, pc}
            __HAL_TIM_CLEAR_IT(&TimMasterHandle, TIM_IT_CC1);
 8004318:	2203      	movs	r2, #3
 800431a:	4252      	negs	r2, r2
 800431c:	4b02      	ldr	r3, [pc, #8]	; (8004328 <timer_oc_irq_handler+0x28>)
 800431e:	611a      	str	r2, [r3, #16]
            us_ticker_irq_handler();
 8004320:	f7fd fa9c 	bl	800185c <us_ticker_irq_handler>
}
 8004324:	e7f7      	b.n	8004316 <timer_oc_irq_handler+0x16>
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	40012c00 	.word	0x40012c00
 800432c:	20000db4 	.word	0x20000db4

08004330 <us_ticker_get_info>:
}
 8004330:	4800      	ldr	r0, [pc, #0]	; (8004334 <us_ticker_get_info+0x4>)
 8004332:	4770      	bx	lr
 8004334:	08006494 	.word	0x08006494

08004338 <init_16bit_timer>:

void init_16bit_timer(void)
{
 8004338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433a:	b083      	sub	sp, #12
    // Enable timer clock
    TIM_MST_RCC;
 800433c:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <init_16bit_timer+0xb0>)
 800433e:	6999      	ldr	r1, [r3, #24]
 8004340:	2280      	movs	r2, #128	; 0x80
 8004342:	0112      	lsls	r2, r2, #4
 8004344:	4311      	orrs	r1, r2
 8004346:	6199      	str	r1, [r3, #24]
 8004348:	6999      	ldr	r1, [r3, #24]
 800434a:	4011      	ands	r1, r2
 800434c:	9101      	str	r1, [sp, #4]
 800434e:	9901      	ldr	r1, [sp, #4]

    // Reset timer
    TIM_MST_RESET_ON;
 8004350:	68d9      	ldr	r1, [r3, #12]
 8004352:	430a      	orrs	r2, r1
 8004354:	60da      	str	r2, [r3, #12]
    TIM_MST_RESET_OFF;
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	4924      	ldr	r1, [pc, #144]	; (80043ec <init_16bit_timer+0xb4>)
 800435a:	400a      	ands	r2, r1
 800435c:	60da      	str	r2, [r3, #12]

    // Update the SystemCoreClock variable
    SystemCoreClockUpdate();
 800435e:	f7ff fb63 	bl	8003a28 <SystemCoreClockUpdate>

    // Configure time base
    TimMasterHandle.Instance           = TIM_MST;
 8004362:	4c23      	ldr	r4, [pc, #140]	; (80043f0 <init_16bit_timer+0xb8>)
 8004364:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <init_16bit_timer+0xbc>)
 8004366:	6023      	str	r3, [r4, #0]
    TimMasterHandle.Init.Period        = 0xFFFF;
 8004368:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <init_16bit_timer+0xc0>)
 800436a:	60e3      	str	r3, [r4, #12]
    TimMasterHandle.Init.Prescaler     = (uint32_t)(SystemCoreClock / 1000000) - 1; // 1 us tick
 800436c:	4b23      	ldr	r3, [pc, #140]	; (80043fc <init_16bit_timer+0xc4>)
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	4923      	ldr	r1, [pc, #140]	; (8004400 <init_16bit_timer+0xc8>)
 8004372:	f7fb fedb 	bl	800012c <__udivsi3>
 8004376:	3801      	subs	r0, #1
 8004378:	6060      	str	r0, [r4, #4]
    TimMasterHandle.Init.ClockDivision = 0;
 800437a:	2500      	movs	r5, #0
 800437c:	6125      	str	r5, [r4, #16]
    TimMasterHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 800437e:	60a5      	str	r5, [r4, #8]
#if !defined(TARGET_STM32L0) && !defined(TARGET_STM32L1)
    TimMasterHandle.Init.RepetitionCounter = 0;
 8004380:	6165      	str	r5, [r4, #20]
#endif
#ifdef TIM_AUTORELOAD_PRELOAD_DISABLE
    TimMasterHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004382:	61a5      	str	r5, [r4, #24]
#endif
    HAL_TIM_Base_Init(&TimMasterHandle);
 8004384:	0020      	movs	r0, r4
 8004386:	f7ff f959 	bl	800363c <HAL_TIM_Base_Init>

    // Configure output compare channel 1 for mbed timeout (enabled later when used)
    HAL_TIM_OC_Start(&TimMasterHandle, TIM_CHANNEL_1);
 800438a:	2100      	movs	r1, #0
 800438c:	0020      	movs	r0, r4
 800438e:	f7ff f97b 	bl	8003688 <HAL_TIM_OC_Start>

    // Output compare channel 1 interrupt for mbed timeout
#if defined(TARGET_STM32F0)
    NVIC_SetVector(TIM_MST_UP_IRQ, (uint32_t)timer_update_irq_handler);
 8004392:	491c      	ldr	r1, [pc, #112]	; (8004404 <init_16bit_timer+0xcc>)
 8004394:	200d      	movs	r0, #13
 8004396:	f7fe f95f 	bl	8002658 <NVIC_SetVector>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800439a:	4e1b      	ldr	r6, [pc, #108]	; (8004408 <init_16bit_timer+0xd0>)
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	019b      	lsls	r3, r3, #6
 80043a0:	6033      	str	r3, [r6, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043a2:	27c3      	movs	r7, #195	; 0xc3
 80043a4:	00bf      	lsls	r7, r7, #2
 80043a6:	59f3      	ldr	r3, [r6, r7]
 80043a8:	4a18      	ldr	r2, [pc, #96]	; (800440c <init_16bit_timer+0xd4>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	51f3      	str	r3, [r6, r7]
    NVIC_EnableIRQ(TIM_MST_UP_IRQ);
    NVIC_SetPriority(TIM_MST_UP_IRQ, 0);
    NVIC_SetVector(TIM_MST_OC_IRQ, (uint32_t)timer_oc_irq_handler);
 80043ae:	4918      	ldr	r1, [pc, #96]	; (8004410 <init_16bit_timer+0xd8>)
 80043b0:	200e      	movs	r0, #14
 80043b2:	f7fe f951 	bl	8002658 <NVIC_SetVector>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	01db      	lsls	r3, r3, #7
 80043ba:	6033      	str	r3, [r6, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043bc:	59f3      	ldr	r3, [r6, r7]
 80043be:	4a15      	ldr	r2, [pc, #84]	; (8004414 <init_16bit_timer+0xdc>)
 80043c0:	401a      	ands	r2, r3
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	03db      	lsls	r3, r3, #15
 80043c6:	4313      	orrs	r3, r2
 80043c8:	51f3      	str	r3, [r6, r7]
    NVIC_SetVector(TIM_MST_IRQ, (uint32_t)timer_irq_handler);
    NVIC_EnableIRQ(TIM_MST_IRQ);
#endif

    // Enable timer
    HAL_TIM_Base_Start(&TimMasterHandle);
 80043ca:	0020      	movs	r0, r4
 80043cc:	f7ff f8df 	bl	800358e <HAL_TIM_Base_Start>
    // Define the FREEZE_TIMER_ON_DEBUG macro in mbed_app.json for example
#if !defined(NDEBUG) && defined(FREEZE_TIMER_ON_DEBUG) && defined(TIM_MST_DBGMCU_FREEZE)
    TIM_MST_DBGMCU_FREEZE;
#endif

    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 80043d0:	6822      	ldr	r2, [r4, #0]
 80043d2:	68d3      	ldr	r3, [r2, #12]
 80043d4:	2102      	movs	r1, #2
 80043d6:	438b      	bics	r3, r1
 80043d8:	60d3      	str	r3, [r2, #12]

    // Used by HAL_GetTick()
    prev_time = 0;
 80043da:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <init_16bit_timer+0xe0>)
 80043dc:	601d      	str	r5, [r3, #0]
    elapsed_time = 0;
 80043de:	4b0f      	ldr	r3, [pc, #60]	; (800441c <init_16bit_timer+0xe4>)
 80043e0:	601d      	str	r5, [r3, #0]
}
 80043e2:	b003      	add	sp, #12
 80043e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	40021000 	.word	0x40021000
 80043ec:	fffff7ff 	.word	0xfffff7ff
 80043f0:	20000db4 	.word	0x20000db4
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	0000ffff 	.word	0x0000ffff
 80043fc:	200001cc 	.word	0x200001cc
 8004400:	000f4240 	.word	0x000f4240
 8004404:	080042f1 	.word	0x080042f1
 8004408:	e000e100 	.word	0xe000e100
 800440c:	ffff00ff 	.word	0xffff00ff
 8004410:	08004301 	.word	0x08004301
 8004414:	ff00ffff 	.word	0xff00ffff
 8004418:	20000b64 	.word	0x20000b64
 800441c:	20000b60 	.word	0x20000b60

08004420 <us_ticker_init>:
#endif // 16-bit/32-bit timer

void us_ticker_init(void)
{
    // Timer is already initialized in HAL_InitTick()
    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 8004420:	4b03      	ldr	r3, [pc, #12]	; (8004430 <us_ticker_init+0x10>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68d3      	ldr	r3, [r2, #12]
 8004426:	2102      	movs	r1, #2
 8004428:	438b      	bics	r3, r1
 800442a:	60d3      	str	r3, [r2, #12]
}
 800442c:	4770      	bx	lr
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	20000db4 	.word	0x20000db4

08004434 <us_ticker_read>:

uint32_t us_ticker_read()
{
    return TIM_MST->CNT;
 8004434:	4b01      	ldr	r3, [pc, #4]	; (800443c <us_ticker_read+0x8>)
 8004436:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8004438:	4770      	bx	lr
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	40012c00 	.word	0x40012c00

08004440 <us_ticker_set_interrupt>:
void us_ticker_set_interrupt(timestamp_t timestamp)
{
    // NOTE: This function must be called with interrupts disabled to keep our
    //       timer interrupt setup atomic
    // Set new output compare value
    __HAL_TIM_SET_COMPARE(&TimMasterHandle, TIM_CHANNEL_1, (uint32_t)timestamp);
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <us_ticker_set_interrupt+0x18>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6358      	str	r0, [r3, #52]	; 0x34
    // Ensure the compare event starts clear
    __HAL_TIM_CLEAR_FLAG(&TimMasterHandle, TIM_FLAG_CC1);
 8004446:	2203      	movs	r2, #3
 8004448:	4252      	negs	r2, r2
 800444a:	611a      	str	r2, [r3, #16]
    // Enable IT
    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	2102      	movs	r1, #2
 8004450:	430a      	orrs	r2, r1
 8004452:	60da      	str	r2, [r3, #12]
}
 8004454:	4770      	bx	lr
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	20000db4 	.word	0x20000db4

0800445c <us_ticker_fire_interrupt>:

void us_ticker_fire_interrupt(void)
{
    __HAL_TIM_CLEAR_FLAG(&TimMasterHandle, TIM_FLAG_CC1);
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <us_ticker_fire_interrupt+0x1c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2203      	movs	r2, #3
 8004462:	4252      	negs	r2, r2
 8004464:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_CC1G);
 8004466:	6959      	ldr	r1, [r3, #20]
 8004468:	2002      	movs	r0, #2
 800446a:	4301      	orrs	r1, r0
 800446c:	6159      	str	r1, [r3, #20]
    LL_TIM_GenerateEvent_CC1(TimMasterHandle.Instance);
    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	4302      	orrs	r2, r0
 8004472:	60da      	str	r2, [r3, #12]
}
 8004474:	4770      	bx	lr
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	20000db4 	.word	0x20000db4

0800447c <us_ticker_disable_interrupt>:

void us_ticker_disable_interrupt(void)
{
    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <us_ticker_disable_interrupt+0x10>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68d3      	ldr	r3, [r2, #12]
 8004482:	2102      	movs	r1, #2
 8004484:	438b      	bics	r3, r1
 8004486:	60d3      	str	r3, [r2, #12]
}
 8004488:	4770      	bx	lr
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	20000db4 	.word	0x20000db4

08004490 <us_ticker_clear_interrupt>:

/* NOTE: must be called with interrupts disabled! */
void us_ticker_clear_interrupt(void)
{
    __HAL_TIM_CLEAR_FLAG(&TimMasterHandle, TIM_FLAG_CC1);
 8004490:	4b02      	ldr	r3, [pc, #8]	; (800449c <us_ticker_clear_interrupt+0xc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2203      	movs	r2, #3
 8004496:	4252      	negs	r2, r2
 8004498:	611a      	str	r2, [r3, #16]
}
 800449a:	4770      	bx	lr
 800449c:	20000db4 	.word	0x20000db4

080044a0 <__errno>:
 80044a0:	4b01      	ldr	r3, [pc, #4]	; (80044a8 <__errno+0x8>)
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	4770      	bx	lr
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	200001d0 	.word	0x200001d0

080044ac <exit>:
 80044ac:	b510      	push	{r4, lr}
 80044ae:	2100      	movs	r1, #0
 80044b0:	0004      	movs	r4, r0
 80044b2:	f001 fbe7 	bl	8005c84 <__call_exitprocs>
 80044b6:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <exit+0x1c>)
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d000      	beq.n	80044c2 <exit+0x16>
 80044c0:	4798      	blx	r3
 80044c2:	0020      	movs	r0, r4
 80044c4:	f7fe f814 	bl	80024f0 <_exit>
 80044c8:	080064fc 	.word	0x080064fc

080044cc <_fclose_r>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	0005      	movs	r5, r0
 80044d0:	1e0c      	subs	r4, r1, #0
 80044d2:	d102      	bne.n	80044da <_fclose_r+0xe>
 80044d4:	2600      	movs	r6, #0
 80044d6:	0030      	movs	r0, r6
 80044d8:	bd70      	pop	{r4, r5, r6, pc}
 80044da:	2800      	cmp	r0, #0
 80044dc:	d004      	beq.n	80044e8 <_fclose_r+0x1c>
 80044de:	6983      	ldr	r3, [r0, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <_fclose_r+0x1c>
 80044e4:	f000 f9bc 	bl	8004860 <__sinit>
 80044e8:	4b2e      	ldr	r3, [pc, #184]	; (80045a4 <_fclose_r+0xd8>)
 80044ea:	429c      	cmp	r4, r3
 80044ec:	d115      	bne.n	800451a <_fclose_r+0x4e>
 80044ee:	686c      	ldr	r4, [r5, #4]
 80044f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044f2:	07db      	lsls	r3, r3, #31
 80044f4:	d405      	bmi.n	8004502 <_fclose_r+0x36>
 80044f6:	89a3      	ldrh	r3, [r4, #12]
 80044f8:	059b      	lsls	r3, r3, #22
 80044fa:	d402      	bmi.n	8004502 <_fclose_r+0x36>
 80044fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044fe:	f000 fdd1 	bl	80050a4 <__retarget_lock_acquire_recursive>
 8004502:	220c      	movs	r2, #12
 8004504:	5ea3      	ldrsh	r3, [r4, r2]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d111      	bne.n	800452e <_fclose_r+0x62>
 800450a:	2601      	movs	r6, #1
 800450c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800450e:	401e      	ands	r6, r3
 8004510:	d1e0      	bne.n	80044d4 <_fclose_r+0x8>
 8004512:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004514:	f000 fdc7 	bl	80050a6 <__retarget_lock_release_recursive>
 8004518:	e7dd      	b.n	80044d6 <_fclose_r+0xa>
 800451a:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <_fclose_r+0xdc>)
 800451c:	429c      	cmp	r4, r3
 800451e:	d101      	bne.n	8004524 <_fclose_r+0x58>
 8004520:	68ac      	ldr	r4, [r5, #8]
 8004522:	e7e5      	b.n	80044f0 <_fclose_r+0x24>
 8004524:	4b21      	ldr	r3, [pc, #132]	; (80045ac <_fclose_r+0xe0>)
 8004526:	429c      	cmp	r4, r3
 8004528:	d1e2      	bne.n	80044f0 <_fclose_r+0x24>
 800452a:	68ec      	ldr	r4, [r5, #12]
 800452c:	e7e0      	b.n	80044f0 <_fclose_r+0x24>
 800452e:	0021      	movs	r1, r4
 8004530:	0028      	movs	r0, r5
 8004532:	f000 f847 	bl	80045c4 <__sflush_r>
 8004536:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004538:	0006      	movs	r6, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d006      	beq.n	800454c <_fclose_r+0x80>
 800453e:	6a21      	ldr	r1, [r4, #32]
 8004540:	0028      	movs	r0, r5
 8004542:	4798      	blx	r3
 8004544:	2800      	cmp	r0, #0
 8004546:	da01      	bge.n	800454c <_fclose_r+0x80>
 8004548:	2601      	movs	r6, #1
 800454a:	4276      	negs	r6, r6
 800454c:	89a3      	ldrh	r3, [r4, #12]
 800454e:	061b      	lsls	r3, r3, #24
 8004550:	d503      	bpl.n	800455a <_fclose_r+0x8e>
 8004552:	6921      	ldr	r1, [r4, #16]
 8004554:	0028      	movs	r0, r5
 8004556:	f000 faf9 	bl	8004b4c <_free_r>
 800455a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800455c:	2900      	cmp	r1, #0
 800455e:	d008      	beq.n	8004572 <_fclose_r+0xa6>
 8004560:	0023      	movs	r3, r4
 8004562:	3344      	adds	r3, #68	; 0x44
 8004564:	4299      	cmp	r1, r3
 8004566:	d002      	beq.n	800456e <_fclose_r+0xa2>
 8004568:	0028      	movs	r0, r5
 800456a:	f000 faef 	bl	8004b4c <_free_r>
 800456e:	2300      	movs	r3, #0
 8004570:	6363      	str	r3, [r4, #52]	; 0x34
 8004572:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004574:	2900      	cmp	r1, #0
 8004576:	d004      	beq.n	8004582 <_fclose_r+0xb6>
 8004578:	0028      	movs	r0, r5
 800457a:	f000 fae7 	bl	8004b4c <_free_r>
 800457e:	2300      	movs	r3, #0
 8004580:	64a3      	str	r3, [r4, #72]	; 0x48
 8004582:	f000 f94d 	bl	8004820 <__sfp_lock_acquire>
 8004586:	2300      	movs	r3, #0
 8004588:	81a3      	strh	r3, [r4, #12]
 800458a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800458c:	07db      	lsls	r3, r3, #31
 800458e:	d402      	bmi.n	8004596 <_fclose_r+0xca>
 8004590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004592:	f000 fd88 	bl	80050a6 <__retarget_lock_release_recursive>
 8004596:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004598:	f000 fd83 	bl	80050a2 <__retarget_lock_close_recursive>
 800459c:	f000 f948 	bl	8004830 <__sfp_lock_release>
 80045a0:	e799      	b.n	80044d6 <_fclose_r+0xa>
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	080064bc 	.word	0x080064bc
 80045a8:	080064dc 	.word	0x080064dc
 80045ac:	0800649c 	.word	0x0800649c

080045b0 <fclose>:
 80045b0:	b510      	push	{r4, lr}
 80045b2:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <fclose+0x10>)
 80045b4:	0001      	movs	r1, r0
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	f7ff ff88 	bl	80044cc <_fclose_r>
 80045bc:	bd10      	pop	{r4, pc}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	200001d0 	.word	0x200001d0

080045c4 <__sflush_r>:
 80045c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045c6:	220c      	movs	r2, #12
 80045c8:	5e8b      	ldrsh	r3, [r1, r2]
 80045ca:	000c      	movs	r4, r1
 80045cc:	b299      	uxth	r1, r3
 80045ce:	0005      	movs	r5, r0
 80045d0:	070a      	lsls	r2, r1, #28
 80045d2:	d500      	bpl.n	80045d6 <__sflush_r+0x12>
 80045d4:	e068      	b.n	80046a8 <__sflush_r+0xe4>
 80045d6:	2280      	movs	r2, #128	; 0x80
 80045d8:	0112      	lsls	r2, r2, #4
 80045da:	431a      	orrs	r2, r3
 80045dc:	6863      	ldr	r3, [r4, #4]
 80045de:	81a2      	strh	r2, [r4, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	dc04      	bgt.n	80045ee <__sflush_r+0x2a>
 80045e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	dc01      	bgt.n	80045ee <__sflush_r+0x2a>
 80045ea:	2000      	movs	r0, #0
 80045ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80045f0:	2f00      	cmp	r7, #0
 80045f2:	d0fa      	beq.n	80045ea <__sflush_r+0x26>
 80045f4:	2300      	movs	r3, #0
 80045f6:	682e      	ldr	r6, [r5, #0]
 80045f8:	602b      	str	r3, [r5, #0]
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	015b      	lsls	r3, r3, #5
 80045fe:	401a      	ands	r2, r3
 8004600:	d038      	beq.n	8004674 <__sflush_r+0xb0>
 8004602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	075b      	lsls	r3, r3, #29
 8004608:	d506      	bpl.n	8004618 <__sflush_r+0x54>
 800460a:	6863      	ldr	r3, [r4, #4]
 800460c:	1ac0      	subs	r0, r0, r3
 800460e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <__sflush_r+0x54>
 8004614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004616:	1ac0      	subs	r0, r0, r3
 8004618:	0002      	movs	r2, r0
 800461a:	6a21      	ldr	r1, [r4, #32]
 800461c:	2300      	movs	r3, #0
 800461e:	0028      	movs	r0, r5
 8004620:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004622:	47b8      	blx	r7
 8004624:	89a1      	ldrh	r1, [r4, #12]
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	d106      	bne.n	8004638 <__sflush_r+0x74>
 800462a:	682b      	ldr	r3, [r5, #0]
 800462c:	2b1d      	cmp	r3, #29
 800462e:	d835      	bhi.n	800469c <__sflush_r+0xd8>
 8004630:	4a2e      	ldr	r2, [pc, #184]	; (80046ec <__sflush_r+0x128>)
 8004632:	40da      	lsrs	r2, r3
 8004634:	07d3      	lsls	r3, r2, #31
 8004636:	d531      	bpl.n	800469c <__sflush_r+0xd8>
 8004638:	2200      	movs	r2, #0
 800463a:	4b2d      	ldr	r3, [pc, #180]	; (80046f0 <__sflush_r+0x12c>)
 800463c:	6062      	str	r2, [r4, #4]
 800463e:	400b      	ands	r3, r1
 8004640:	6922      	ldr	r2, [r4, #16]
 8004642:	b21b      	sxth	r3, r3
 8004644:	81a3      	strh	r3, [r4, #12]
 8004646:	6022      	str	r2, [r4, #0]
 8004648:	04db      	lsls	r3, r3, #19
 800464a:	d505      	bpl.n	8004658 <__sflush_r+0x94>
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	d102      	bne.n	8004656 <__sflush_r+0x92>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d100      	bne.n	8004658 <__sflush_r+0x94>
 8004656:	6560      	str	r0, [r4, #84]	; 0x54
 8004658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800465a:	602e      	str	r6, [r5, #0]
 800465c:	2900      	cmp	r1, #0
 800465e:	d0c4      	beq.n	80045ea <__sflush_r+0x26>
 8004660:	0023      	movs	r3, r4
 8004662:	3344      	adds	r3, #68	; 0x44
 8004664:	4299      	cmp	r1, r3
 8004666:	d002      	beq.n	800466e <__sflush_r+0xaa>
 8004668:	0028      	movs	r0, r5
 800466a:	f000 fa6f 	bl	8004b4c <_free_r>
 800466e:	2000      	movs	r0, #0
 8004670:	6360      	str	r0, [r4, #52]	; 0x34
 8004672:	e7bb      	b.n	80045ec <__sflush_r+0x28>
 8004674:	2301      	movs	r3, #1
 8004676:	6a21      	ldr	r1, [r4, #32]
 8004678:	0028      	movs	r0, r5
 800467a:	47b8      	blx	r7
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d1c1      	bne.n	8004604 <__sflush_r+0x40>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0be      	beq.n	8004604 <__sflush_r+0x40>
 8004686:	2b1d      	cmp	r3, #29
 8004688:	d001      	beq.n	800468e <__sflush_r+0xca>
 800468a:	2b16      	cmp	r3, #22
 800468c:	d101      	bne.n	8004692 <__sflush_r+0xce>
 800468e:	602e      	str	r6, [r5, #0]
 8004690:	e7ab      	b.n	80045ea <__sflush_r+0x26>
 8004692:	2340      	movs	r3, #64	; 0x40
 8004694:	89a2      	ldrh	r2, [r4, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	81a3      	strh	r3, [r4, #12]
 800469a:	e7a7      	b.n	80045ec <__sflush_r+0x28>
 800469c:	2340      	movs	r3, #64	; 0x40
 800469e:	430b      	orrs	r3, r1
 80046a0:	2001      	movs	r0, #1
 80046a2:	81a3      	strh	r3, [r4, #12]
 80046a4:	4240      	negs	r0, r0
 80046a6:	e7a1      	b.n	80045ec <__sflush_r+0x28>
 80046a8:	6927      	ldr	r7, [r4, #16]
 80046aa:	2f00      	cmp	r7, #0
 80046ac:	d09d      	beq.n	80045ea <__sflush_r+0x26>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	6027      	str	r7, [r4, #0]
 80046b2:	1bdb      	subs	r3, r3, r7
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	2300      	movs	r3, #0
 80046b8:	078a      	lsls	r2, r1, #30
 80046ba:	d100      	bne.n	80046be <__sflush_r+0xfa>
 80046bc:	6963      	ldr	r3, [r4, #20]
 80046be:	60a3      	str	r3, [r4, #8]
 80046c0:	9b01      	ldr	r3, [sp, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	dc00      	bgt.n	80046c8 <__sflush_r+0x104>
 80046c6:	e790      	b.n	80045ea <__sflush_r+0x26>
 80046c8:	9b01      	ldr	r3, [sp, #4]
 80046ca:	003a      	movs	r2, r7
 80046cc:	6a21      	ldr	r1, [r4, #32]
 80046ce:	0028      	movs	r0, r5
 80046d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046d2:	47b0      	blx	r6
 80046d4:	2800      	cmp	r0, #0
 80046d6:	dc03      	bgt.n	80046e0 <__sflush_r+0x11c>
 80046d8:	2340      	movs	r3, #64	; 0x40
 80046da:	89a2      	ldrh	r2, [r4, #12]
 80046dc:	4313      	orrs	r3, r2
 80046de:	e7df      	b.n	80046a0 <__sflush_r+0xdc>
 80046e0:	9b01      	ldr	r3, [sp, #4]
 80046e2:	183f      	adds	r7, r7, r0
 80046e4:	1a1b      	subs	r3, r3, r0
 80046e6:	9301      	str	r3, [sp, #4]
 80046e8:	e7ea      	b.n	80046c0 <__sflush_r+0xfc>
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	20400001 	.word	0x20400001
 80046f0:	fffff7ff 	.word	0xfffff7ff

080046f4 <_fflush_r>:
 80046f4:	690b      	ldr	r3, [r1, #16]
 80046f6:	b570      	push	{r4, r5, r6, lr}
 80046f8:	0005      	movs	r5, r0
 80046fa:	000c      	movs	r4, r1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <_fflush_r+0x12>
 8004700:	2500      	movs	r5, #0
 8004702:	0028      	movs	r0, r5
 8004704:	bd70      	pop	{r4, r5, r6, pc}
 8004706:	2800      	cmp	r0, #0
 8004708:	d004      	beq.n	8004714 <_fflush_r+0x20>
 800470a:	6983      	ldr	r3, [r0, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <_fflush_r+0x20>
 8004710:	f000 f8a6 	bl	8004860 <__sinit>
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <_fflush_r+0x74>)
 8004716:	429c      	cmp	r4, r3
 8004718:	d11b      	bne.n	8004752 <_fflush_r+0x5e>
 800471a:	686c      	ldr	r4, [r5, #4]
 800471c:	220c      	movs	r2, #12
 800471e:	5ea3      	ldrsh	r3, [r4, r2]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0ed      	beq.n	8004700 <_fflush_r+0xc>
 8004724:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004726:	07d2      	lsls	r2, r2, #31
 8004728:	d404      	bmi.n	8004734 <_fflush_r+0x40>
 800472a:	059b      	lsls	r3, r3, #22
 800472c:	d402      	bmi.n	8004734 <_fflush_r+0x40>
 800472e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004730:	f000 fcb8 	bl	80050a4 <__retarget_lock_acquire_recursive>
 8004734:	0028      	movs	r0, r5
 8004736:	0021      	movs	r1, r4
 8004738:	f7ff ff44 	bl	80045c4 <__sflush_r>
 800473c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800473e:	0005      	movs	r5, r0
 8004740:	07db      	lsls	r3, r3, #31
 8004742:	d4de      	bmi.n	8004702 <_fflush_r+0xe>
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	059b      	lsls	r3, r3, #22
 8004748:	d4db      	bmi.n	8004702 <_fflush_r+0xe>
 800474a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800474c:	f000 fcab 	bl	80050a6 <__retarget_lock_release_recursive>
 8004750:	e7d7      	b.n	8004702 <_fflush_r+0xe>
 8004752:	4b06      	ldr	r3, [pc, #24]	; (800476c <_fflush_r+0x78>)
 8004754:	429c      	cmp	r4, r3
 8004756:	d101      	bne.n	800475c <_fflush_r+0x68>
 8004758:	68ac      	ldr	r4, [r5, #8]
 800475a:	e7df      	b.n	800471c <_fflush_r+0x28>
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <_fflush_r+0x7c>)
 800475e:	429c      	cmp	r4, r3
 8004760:	d1dc      	bne.n	800471c <_fflush_r+0x28>
 8004762:	68ec      	ldr	r4, [r5, #12]
 8004764:	e7da      	b.n	800471c <_fflush_r+0x28>
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	080064bc 	.word	0x080064bc
 800476c:	080064dc 	.word	0x080064dc
 8004770:	0800649c 	.word	0x0800649c

08004774 <fflush>:
 8004774:	b510      	push	{r4, lr}
 8004776:	1e01      	subs	r1, r0, #0
 8004778:	d105      	bne.n	8004786 <fflush+0x12>
 800477a:	4b05      	ldr	r3, [pc, #20]	; (8004790 <fflush+0x1c>)
 800477c:	4905      	ldr	r1, [pc, #20]	; (8004794 <fflush+0x20>)
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	f000 fc48 	bl	8005014 <_fwalk_reent>
 8004784:	bd10      	pop	{r4, pc}
 8004786:	4b04      	ldr	r3, [pc, #16]	; (8004798 <fflush+0x24>)
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	f7ff ffb3 	bl	80046f4 <_fflush_r>
 800478e:	e7f9      	b.n	8004784 <fflush+0x10>
 8004790:	080064fc 	.word	0x080064fc
 8004794:	080046f5 	.word	0x080046f5
 8004798:	200001d0 	.word	0x200001d0

0800479c <_cleanup_r>:
 800479c:	b510      	push	{r4, lr}
 800479e:	4902      	ldr	r1, [pc, #8]	; (80047a8 <_cleanup_r+0xc>)
 80047a0:	f000 fc38 	bl	8005014 <_fwalk_reent>
 80047a4:	bd10      	pop	{r4, pc}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	080044cd 	.word	0x080044cd

080047ac <std.isra.0>:
 80047ac:	2300      	movs	r3, #0
 80047ae:	b510      	push	{r4, lr}
 80047b0:	0004      	movs	r4, r0
 80047b2:	6003      	str	r3, [r0, #0]
 80047b4:	6043      	str	r3, [r0, #4]
 80047b6:	6083      	str	r3, [r0, #8]
 80047b8:	8181      	strh	r1, [r0, #12]
 80047ba:	6643      	str	r3, [r0, #100]	; 0x64
 80047bc:	81c2      	strh	r2, [r0, #14]
 80047be:	6103      	str	r3, [r0, #16]
 80047c0:	6143      	str	r3, [r0, #20]
 80047c2:	6183      	str	r3, [r0, #24]
 80047c4:	0019      	movs	r1, r3
 80047c6:	2208      	movs	r2, #8
 80047c8:	305c      	adds	r0, #92	; 0x5c
 80047ca:	f000 ff02 	bl	80055d2 <memset>
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <std.isra.0+0x38>)
 80047d0:	6224      	str	r4, [r4, #32]
 80047d2:	6263      	str	r3, [r4, #36]	; 0x24
 80047d4:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <std.isra.0+0x3c>)
 80047d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <std.isra.0+0x40>)
 80047da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047dc:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <std.isra.0+0x44>)
 80047de:	6323      	str	r3, [r4, #48]	; 0x30
 80047e0:	bd10      	pop	{r4, pc}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	080059c9 	.word	0x080059c9
 80047e8:	080059f1 	.word	0x080059f1
 80047ec:	08005a29 	.word	0x08005a29
 80047f0:	08005a55 	.word	0x08005a55

080047f4 <__sfmoreglue>:
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	2568      	movs	r5, #104	; 0x68
 80047f8:	1e4a      	subs	r2, r1, #1
 80047fa:	4355      	muls	r5, r2
 80047fc:	000e      	movs	r6, r1
 80047fe:	0029      	movs	r1, r5
 8004800:	3174      	adds	r1, #116	; 0x74
 8004802:	f000 fcd9 	bl	80051b8 <_malloc_r>
 8004806:	1e04      	subs	r4, r0, #0
 8004808:	d008      	beq.n	800481c <__sfmoreglue+0x28>
 800480a:	2100      	movs	r1, #0
 800480c:	002a      	movs	r2, r5
 800480e:	6001      	str	r1, [r0, #0]
 8004810:	6046      	str	r6, [r0, #4]
 8004812:	300c      	adds	r0, #12
 8004814:	60a0      	str	r0, [r4, #8]
 8004816:	3268      	adds	r2, #104	; 0x68
 8004818:	f000 fedb 	bl	80055d2 <memset>
 800481c:	0020      	movs	r0, r4
 800481e:	bd70      	pop	{r4, r5, r6, pc}

08004820 <__sfp_lock_acquire>:
 8004820:	b510      	push	{r4, lr}
 8004822:	4802      	ldr	r0, [pc, #8]	; (800482c <__sfp_lock_acquire+0xc>)
 8004824:	f000 fc3e 	bl	80050a4 <__retarget_lock_acquire_recursive>
 8004828:	bd10      	pop	{r4, pc}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	20000e04 	.word	0x20000e04

08004830 <__sfp_lock_release>:
 8004830:	b510      	push	{r4, lr}
 8004832:	4802      	ldr	r0, [pc, #8]	; (800483c <__sfp_lock_release+0xc>)
 8004834:	f000 fc37 	bl	80050a6 <__retarget_lock_release_recursive>
 8004838:	bd10      	pop	{r4, pc}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	20000e04 	.word	0x20000e04

08004840 <__sinit_lock_acquire>:
 8004840:	b510      	push	{r4, lr}
 8004842:	4802      	ldr	r0, [pc, #8]	; (800484c <__sinit_lock_acquire+0xc>)
 8004844:	f000 fc2e 	bl	80050a4 <__retarget_lock_acquire_recursive>
 8004848:	bd10      	pop	{r4, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	20000dff 	.word	0x20000dff

08004850 <__sinit_lock_release>:
 8004850:	b510      	push	{r4, lr}
 8004852:	4802      	ldr	r0, [pc, #8]	; (800485c <__sinit_lock_release+0xc>)
 8004854:	f000 fc27 	bl	80050a6 <__retarget_lock_release_recursive>
 8004858:	bd10      	pop	{r4, pc}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	20000dff 	.word	0x20000dff

08004860 <__sinit>:
 8004860:	b513      	push	{r0, r1, r4, lr}
 8004862:	0004      	movs	r4, r0
 8004864:	f7ff ffec 	bl	8004840 <__sinit_lock_acquire>
 8004868:	69a3      	ldr	r3, [r4, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <__sinit+0x14>
 800486e:	f7ff ffef 	bl	8004850 <__sinit_lock_release>
 8004872:	bd13      	pop	{r0, r1, r4, pc}
 8004874:	4a15      	ldr	r2, [pc, #84]	; (80048cc <__sinit+0x6c>)
 8004876:	62a2      	str	r2, [r4, #40]	; 0x28
 8004878:	0022      	movs	r2, r4
 800487a:	32d8      	adds	r2, #216	; 0xd8
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	6053      	str	r3, [r2, #4]
 8004880:	6093      	str	r3, [r2, #8]
 8004882:	4b13      	ldr	r3, [pc, #76]	; (80048d0 <__sinit+0x70>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	429c      	cmp	r4, r3
 800488a:	d101      	bne.n	8004890 <__sinit+0x30>
 800488c:	2301      	movs	r3, #1
 800488e:	61a3      	str	r3, [r4, #24]
 8004890:	0020      	movs	r0, r4
 8004892:	f000 f81f 	bl	80048d4 <__sfp>
 8004896:	6060      	str	r0, [r4, #4]
 8004898:	0020      	movs	r0, r4
 800489a:	f000 f81b 	bl	80048d4 <__sfp>
 800489e:	60a0      	str	r0, [r4, #8]
 80048a0:	0020      	movs	r0, r4
 80048a2:	f000 f817 	bl	80048d4 <__sfp>
 80048a6:	2200      	movs	r2, #0
 80048a8:	60e0      	str	r0, [r4, #12]
 80048aa:	2104      	movs	r1, #4
 80048ac:	6860      	ldr	r0, [r4, #4]
 80048ae:	f7ff ff7d 	bl	80047ac <std.isra.0>
 80048b2:	2201      	movs	r2, #1
 80048b4:	2109      	movs	r1, #9
 80048b6:	68a0      	ldr	r0, [r4, #8]
 80048b8:	f7ff ff78 	bl	80047ac <std.isra.0>
 80048bc:	2202      	movs	r2, #2
 80048be:	2112      	movs	r1, #18
 80048c0:	68e0      	ldr	r0, [r4, #12]
 80048c2:	f7ff ff73 	bl	80047ac <std.isra.0>
 80048c6:	2301      	movs	r3, #1
 80048c8:	61a3      	str	r3, [r4, #24]
 80048ca:	e7d0      	b.n	800486e <__sinit+0xe>
 80048cc:	0800479d 	.word	0x0800479d
 80048d0:	080064fc 	.word	0x080064fc

080048d4 <__sfp>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	0007      	movs	r7, r0
 80048d8:	f7ff ffa2 	bl	8004820 <__sfp_lock_acquire>
 80048dc:	4b20      	ldr	r3, [pc, #128]	; (8004960 <__sfp+0x8c>)
 80048de:	681e      	ldr	r6, [r3, #0]
 80048e0:	69b3      	ldr	r3, [r6, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d102      	bne.n	80048ec <__sfp+0x18>
 80048e6:	0030      	movs	r0, r6
 80048e8:	f7ff ffba 	bl	8004860 <__sinit>
 80048ec:	36d8      	adds	r6, #216	; 0xd8
 80048ee:	68b4      	ldr	r4, [r6, #8]
 80048f0:	6873      	ldr	r3, [r6, #4]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	d504      	bpl.n	8004900 <__sfp+0x2c>
 80048f6:	6833      	ldr	r3, [r6, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <__sfp+0x38>
 80048fc:	6836      	ldr	r6, [r6, #0]
 80048fe:	e7f6      	b.n	80048ee <__sfp+0x1a>
 8004900:	220c      	movs	r2, #12
 8004902:	5ea5      	ldrsh	r5, [r4, r2]
 8004904:	2d00      	cmp	r5, #0
 8004906:	d00e      	beq.n	8004926 <__sfp+0x52>
 8004908:	3468      	adds	r4, #104	; 0x68
 800490a:	e7f2      	b.n	80048f2 <__sfp+0x1e>
 800490c:	2104      	movs	r1, #4
 800490e:	0038      	movs	r0, r7
 8004910:	f7ff ff70 	bl	80047f4 <__sfmoreglue>
 8004914:	1e04      	subs	r4, r0, #0
 8004916:	6030      	str	r0, [r6, #0]
 8004918:	d1f0      	bne.n	80048fc <__sfp+0x28>
 800491a:	f7ff ff89 	bl	8004830 <__sfp_lock_release>
 800491e:	230c      	movs	r3, #12
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	0020      	movs	r0, r4
 8004924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004926:	2301      	movs	r3, #1
 8004928:	0020      	movs	r0, r4
 800492a:	425b      	negs	r3, r3
 800492c:	81e3      	strh	r3, [r4, #14]
 800492e:	3302      	adds	r3, #2
 8004930:	81a3      	strh	r3, [r4, #12]
 8004932:	3058      	adds	r0, #88	; 0x58
 8004934:	6665      	str	r5, [r4, #100]	; 0x64
 8004936:	f000 fbb3 	bl	80050a0 <__retarget_lock_init_recursive>
 800493a:	f7ff ff79 	bl	8004830 <__sfp_lock_release>
 800493e:	0020      	movs	r0, r4
 8004940:	6025      	str	r5, [r4, #0]
 8004942:	60a5      	str	r5, [r4, #8]
 8004944:	6065      	str	r5, [r4, #4]
 8004946:	6125      	str	r5, [r4, #16]
 8004948:	6165      	str	r5, [r4, #20]
 800494a:	61a5      	str	r5, [r4, #24]
 800494c:	2208      	movs	r2, #8
 800494e:	0029      	movs	r1, r5
 8004950:	305c      	adds	r0, #92	; 0x5c
 8004952:	f000 fe3e 	bl	80055d2 <memset>
 8004956:	6365      	str	r5, [r4, #52]	; 0x34
 8004958:	63a5      	str	r5, [r4, #56]	; 0x38
 800495a:	64a5      	str	r5, [r4, #72]	; 0x48
 800495c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800495e:	e7e0      	b.n	8004922 <__sfp+0x4e>
 8004960:	080064fc 	.word	0x080064fc

08004964 <_fopen_r>:
 8004964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004966:	000f      	movs	r7, r1
 8004968:	0011      	movs	r1, r2
 800496a:	aa01      	add	r2, sp, #4
 800496c:	0005      	movs	r5, r0
 800496e:	f001 fa1d 	bl	8005dac <__sflags>
 8004972:	1e06      	subs	r6, r0, #0
 8004974:	d102      	bne.n	800497c <_fopen_r+0x18>
 8004976:	2400      	movs	r4, #0
 8004978:	0020      	movs	r0, r4
 800497a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800497c:	0028      	movs	r0, r5
 800497e:	f7ff ffa9 	bl	80048d4 <__sfp>
 8004982:	1e04      	subs	r4, r0, #0
 8004984:	d0f7      	beq.n	8004976 <_fopen_r+0x12>
 8004986:	23db      	movs	r3, #219	; 0xdb
 8004988:	0039      	movs	r1, r7
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	9a01      	ldr	r2, [sp, #4]
 800498e:	0028      	movs	r0, r5
 8004990:	f000 fe28 	bl	80055e4 <_open_r>
 8004994:	1e07      	subs	r7, r0, #0
 8004996:	da09      	bge.n	80049ac <_fopen_r+0x48>
 8004998:	2500      	movs	r5, #0
 800499a:	f7ff ff41 	bl	8004820 <__sfp_lock_acquire>
 800499e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049a0:	81a5      	strh	r5, [r4, #12]
 80049a2:	f000 fb7e 	bl	80050a2 <__retarget_lock_close_recursive>
 80049a6:	f7ff ff43 	bl	8004830 <__sfp_lock_release>
 80049aa:	e7e4      	b.n	8004976 <_fopen_r+0x12>
 80049ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049ae:	07db      	lsls	r3, r3, #31
 80049b0:	d405      	bmi.n	80049be <_fopen_r+0x5a>
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	059b      	lsls	r3, r3, #22
 80049b6:	d402      	bmi.n	80049be <_fopen_r+0x5a>
 80049b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ba:	f000 fb73 	bl	80050a4 <__retarget_lock_acquire_recursive>
 80049be:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <_fopen_r+0x94>)
 80049c0:	81e7      	strh	r7, [r4, #14]
 80049c2:	6263      	str	r3, [r4, #36]	; 0x24
 80049c4:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <_fopen_r+0x98>)
 80049c6:	81a6      	strh	r6, [r4, #12]
 80049c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80049ca:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <_fopen_r+0x9c>)
 80049cc:	6224      	str	r4, [r4, #32]
 80049ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049d0:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <_fopen_r+0xa0>)
 80049d2:	6323      	str	r3, [r4, #48]	; 0x30
 80049d4:	05f3      	lsls	r3, r6, #23
 80049d6:	d505      	bpl.n	80049e4 <_fopen_r+0x80>
 80049d8:	2302      	movs	r3, #2
 80049da:	2200      	movs	r2, #0
 80049dc:	0021      	movs	r1, r4
 80049de:	0028      	movs	r0, r5
 80049e0:	f000 f968 	bl	8004cb4 <_fseek_r>
 80049e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049e6:	07db      	lsls	r3, r3, #31
 80049e8:	d4c6      	bmi.n	8004978 <_fopen_r+0x14>
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	059b      	lsls	r3, r3, #22
 80049ee:	d4c3      	bmi.n	8004978 <_fopen_r+0x14>
 80049f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f2:	f000 fb58 	bl	80050a6 <__retarget_lock_release_recursive>
 80049f6:	e7bf      	b.n	8004978 <_fopen_r+0x14>
 80049f8:	080059c9 	.word	0x080059c9
 80049fc:	080059f1 	.word	0x080059f1
 8004a00:	08005a29 	.word	0x08005a29
 8004a04:	08005a55 	.word	0x08005a55

08004a08 <fopen>:
 8004a08:	b510      	push	{r4, lr}
 8004a0a:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <fopen+0x10>)
 8004a0c:	000a      	movs	r2, r1
 8004a0e:	0001      	movs	r1, r0
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	f7ff ffa7 	bl	8004964 <_fopen_r>
 8004a16:	bd10      	pop	{r4, pc}
 8004a18:	200001d0 	.word	0x200001d0

08004a1c <_fputc_r>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	0005      	movs	r5, r0
 8004a20:	000e      	movs	r6, r1
 8004a22:	0014      	movs	r4, r2
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d004      	beq.n	8004a32 <_fputc_r+0x16>
 8004a28:	6983      	ldr	r3, [r0, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <_fputc_r+0x16>
 8004a2e:	f7ff ff17 	bl	8004860 <__sinit>
 8004a32:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <_fputc_r+0x68>)
 8004a34:	429c      	cmp	r4, r3
 8004a36:	d11a      	bne.n	8004a6e <_fputc_r+0x52>
 8004a38:	686c      	ldr	r4, [r5, #4]
 8004a3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a3c:	07db      	lsls	r3, r3, #31
 8004a3e:	d405      	bmi.n	8004a4c <_fputc_r+0x30>
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	059b      	lsls	r3, r3, #22
 8004a44:	d402      	bmi.n	8004a4c <_fputc_r+0x30>
 8004a46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a48:	f000 fb2c 	bl	80050a4 <__retarget_lock_acquire_recursive>
 8004a4c:	0028      	movs	r0, r5
 8004a4e:	0022      	movs	r2, r4
 8004a50:	0031      	movs	r1, r6
 8004a52:	f000 fddb 	bl	800560c <_putc_r>
 8004a56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a58:	0005      	movs	r5, r0
 8004a5a:	07db      	lsls	r3, r3, #31
 8004a5c:	d405      	bmi.n	8004a6a <_fputc_r+0x4e>
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	059b      	lsls	r3, r3, #22
 8004a62:	d402      	bmi.n	8004a6a <_fputc_r+0x4e>
 8004a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a66:	f000 fb1e 	bl	80050a6 <__retarget_lock_release_recursive>
 8004a6a:	0028      	movs	r0, r5
 8004a6c:	bd70      	pop	{r4, r5, r6, pc}
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <_fputc_r+0x6c>)
 8004a70:	429c      	cmp	r4, r3
 8004a72:	d101      	bne.n	8004a78 <_fputc_r+0x5c>
 8004a74:	68ac      	ldr	r4, [r5, #8]
 8004a76:	e7e0      	b.n	8004a3a <_fputc_r+0x1e>
 8004a78:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <_fputc_r+0x70>)
 8004a7a:	429c      	cmp	r4, r3
 8004a7c:	d1dd      	bne.n	8004a3a <_fputc_r+0x1e>
 8004a7e:	68ec      	ldr	r4, [r5, #12]
 8004a80:	e7db      	b.n	8004a3a <_fputc_r+0x1e>
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	080064bc 	.word	0x080064bc
 8004a88:	080064dc 	.word	0x080064dc
 8004a8c:	0800649c 	.word	0x0800649c

08004a90 <fputc>:
 8004a90:	b510      	push	{r4, lr}
 8004a92:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <fputc+0x10>)
 8004a94:	000a      	movs	r2, r1
 8004a96:	0001      	movs	r1, r0
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	f7ff ffbf 	bl	8004a1c <_fputc_r>
 8004a9e:	bd10      	pop	{r4, pc}
 8004aa0:	200001d0 	.word	0x200001d0

08004aa4 <_malloc_trim_r>:
 8004aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aa6:	4f25      	ldr	r7, [pc, #148]	; (8004b3c <_malloc_trim_r+0x98>)
 8004aa8:	000c      	movs	r4, r1
 8004aaa:	0005      	movs	r5, r0
 8004aac:	f7fd fd78 	bl	80025a0 <__malloc_lock>
 8004ab0:	0038      	movs	r0, r7
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	4e22      	ldr	r6, [pc, #136]	; (8004b40 <_malloc_trim_r+0x9c>)
 8004ab6:	3811      	subs	r0, #17
 8004ab8:	68b3      	ldr	r3, [r6, #8]
 8004aba:	1b00      	subs	r0, r0, r4
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	0039      	movs	r1, r7
 8004ac0:	4393      	bics	r3, r2
 8004ac2:	18c0      	adds	r0, r0, r3
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	f7fb fb31 	bl	800012c <__udivsi3>
 8004aca:	1e44      	subs	r4, r0, #1
 8004acc:	437c      	muls	r4, r7
 8004ace:	42bc      	cmp	r4, r7
 8004ad0:	da04      	bge.n	8004adc <_malloc_trim_r+0x38>
 8004ad2:	0028      	movs	r0, r5
 8004ad4:	f7fd fd68 	bl	80025a8 <__malloc_unlock>
 8004ad8:	2000      	movs	r0, #0
 8004ada:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004adc:	2100      	movs	r1, #0
 8004ade:	0028      	movs	r0, r5
 8004ae0:	f000 fe88 	bl	80057f4 <_sbrk_r>
 8004ae4:	68b3      	ldr	r3, [r6, #8]
 8004ae6:	9a01      	ldr	r2, [sp, #4]
 8004ae8:	189b      	adds	r3, r3, r2
 8004aea:	4298      	cmp	r0, r3
 8004aec:	d1f1      	bne.n	8004ad2 <_malloc_trim_r+0x2e>
 8004aee:	4261      	negs	r1, r4
 8004af0:	0028      	movs	r0, r5
 8004af2:	f000 fe7f 	bl	80057f4 <_sbrk_r>
 8004af6:	1c43      	adds	r3, r0, #1
 8004af8:	d110      	bne.n	8004b1c <_malloc_trim_r+0x78>
 8004afa:	2100      	movs	r1, #0
 8004afc:	0028      	movs	r0, r5
 8004afe:	f000 fe79 	bl	80057f4 <_sbrk_r>
 8004b02:	68b2      	ldr	r2, [r6, #8]
 8004b04:	1a81      	subs	r1, r0, r2
 8004b06:	290f      	cmp	r1, #15
 8004b08:	dde3      	ble.n	8004ad2 <_malloc_trim_r+0x2e>
 8004b0a:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <_malloc_trim_r+0xa0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	1ac0      	subs	r0, r0, r3
 8004b10:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <_malloc_trim_r+0xa4>)
 8004b12:	6018      	str	r0, [r3, #0]
 8004b14:	2301      	movs	r3, #1
 8004b16:	430b      	orrs	r3, r1
 8004b18:	6053      	str	r3, [r2, #4]
 8004b1a:	e7da      	b.n	8004ad2 <_malloc_trim_r+0x2e>
 8004b1c:	68b2      	ldr	r2, [r6, #8]
 8004b1e:	2601      	movs	r6, #1
 8004b20:	9b01      	ldr	r3, [sp, #4]
 8004b22:	0028      	movs	r0, r5
 8004b24:	1b1b      	subs	r3, r3, r4
 8004b26:	4333      	orrs	r3, r6
 8004b28:	6053      	str	r3, [r2, #4]
 8004b2a:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <_malloc_trim_r+0xa4>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	1b14      	subs	r4, r2, r4
 8004b30:	601c      	str	r4, [r3, #0]
 8004b32:	f7fd fd39 	bl	80025a8 <__malloc_unlock>
 8004b36:	0030      	movs	r0, r6
 8004b38:	e7cf      	b.n	8004ada <_malloc_trim_r+0x36>
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	00001000 	.word	0x00001000
 8004b40:	200002c4 	.word	0x200002c4
 8004b44:	200006cc 	.word	0x200006cc
 8004b48:	20000b70 	.word	0x20000b70

08004b4c <_free_r>:
 8004b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b4e:	1e0d      	subs	r5, r1, #0
 8004b50:	9001      	str	r0, [sp, #4]
 8004b52:	d02d      	beq.n	8004bb0 <_free_r+0x64>
 8004b54:	f7fd fd24 	bl	80025a0 <__malloc_lock>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	0029      	movs	r1, r5
 8004b5c:	469c      	mov	ip, r3
 8004b5e:	3908      	subs	r1, #8
 8004b60:	684f      	ldr	r7, [r1, #4]
 8004b62:	4662      	mov	r2, ip
 8004b64:	003b      	movs	r3, r7
 8004b66:	4666      	mov	r6, ip
 8004b68:	4393      	bics	r3, r2
 8004b6a:	18c8      	adds	r0, r1, r3
 8004b6c:	6845      	ldr	r5, [r0, #4]
 8004b6e:	3202      	adds	r2, #2
 8004b70:	4395      	bics	r5, r2
 8004b72:	4a4a      	ldr	r2, [pc, #296]	; (8004c9c <_free_r+0x150>)
 8004b74:	4037      	ands	r7, r6
 8004b76:	6896      	ldr	r6, [r2, #8]
 8004b78:	42b0      	cmp	r0, r6
 8004b7a:	d11a      	bne.n	8004bb2 <_free_r+0x66>
 8004b7c:	195b      	adds	r3, r3, r5
 8004b7e:	2f00      	cmp	r7, #0
 8004b80:	d106      	bne.n	8004b90 <_free_r+0x44>
 8004b82:	6808      	ldr	r0, [r1, #0]
 8004b84:	1a09      	subs	r1, r1, r0
 8004b86:	688d      	ldr	r5, [r1, #8]
 8004b88:	181b      	adds	r3, r3, r0
 8004b8a:	68c8      	ldr	r0, [r1, #12]
 8004b8c:	60e8      	str	r0, [r5, #12]
 8004b8e:	6085      	str	r5, [r0, #8]
 8004b90:	2001      	movs	r0, #1
 8004b92:	4318      	orrs	r0, r3
 8004b94:	6048      	str	r0, [r1, #4]
 8004b96:	6091      	str	r1, [r2, #8]
 8004b98:	4a41      	ldr	r2, [pc, #260]	; (8004ca0 <_free_r+0x154>)
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d304      	bcc.n	8004baa <_free_r+0x5e>
 8004ba0:	4b40      	ldr	r3, [pc, #256]	; (8004ca4 <_free_r+0x158>)
 8004ba2:	9801      	ldr	r0, [sp, #4]
 8004ba4:	6819      	ldr	r1, [r3, #0]
 8004ba6:	f7ff ff7d 	bl	8004aa4 <_malloc_trim_r>
 8004baa:	9801      	ldr	r0, [sp, #4]
 8004bac:	f7fd fcfc 	bl	80025a8 <__malloc_unlock>
 8004bb0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004bb2:	2600      	movs	r6, #0
 8004bb4:	6045      	str	r5, [r0, #4]
 8004bb6:	42b7      	cmp	r7, r6
 8004bb8:	d109      	bne.n	8004bce <_free_r+0x82>
 8004bba:	680f      	ldr	r7, [r1, #0]
 8004bbc:	4c3a      	ldr	r4, [pc, #232]	; (8004ca8 <_free_r+0x15c>)
 8004bbe:	1bc9      	subs	r1, r1, r7
 8004bc0:	19db      	adds	r3, r3, r7
 8004bc2:	688f      	ldr	r7, [r1, #8]
 8004bc4:	42a7      	cmp	r7, r4
 8004bc6:	d02b      	beq.n	8004c20 <_free_r+0xd4>
 8004bc8:	68cc      	ldr	r4, [r1, #12]
 8004bca:	60fc      	str	r4, [r7, #12]
 8004bcc:	60a7      	str	r7, [r4, #8]
 8004bce:	1947      	adds	r7, r0, r5
 8004bd0:	687c      	ldr	r4, [r7, #4]
 8004bd2:	2701      	movs	r7, #1
 8004bd4:	423c      	tst	r4, r7
 8004bd6:	d10b      	bne.n	8004bf0 <_free_r+0xa4>
 8004bd8:	195b      	adds	r3, r3, r5
 8004bda:	6885      	ldr	r5, [r0, #8]
 8004bdc:	2e00      	cmp	r6, #0
 8004bde:	d121      	bne.n	8004c24 <_free_r+0xd8>
 8004be0:	4c31      	ldr	r4, [pc, #196]	; (8004ca8 <_free_r+0x15c>)
 8004be2:	42a5      	cmp	r5, r4
 8004be4:	d11e      	bne.n	8004c24 <_free_r+0xd8>
 8004be6:	003e      	movs	r6, r7
 8004be8:	6151      	str	r1, [r2, #20]
 8004bea:	6111      	str	r1, [r2, #16]
 8004bec:	60cd      	str	r5, [r1, #12]
 8004bee:	608d      	str	r5, [r1, #8]
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	0005      	movs	r5, r0
 8004bf4:	431d      	orrs	r5, r3
 8004bf6:	604d      	str	r5, [r1, #4]
 8004bf8:	50cb      	str	r3, [r1, r3]
 8004bfa:	2e00      	cmp	r6, #0
 8004bfc:	d1d5      	bne.n	8004baa <_free_r+0x5e>
 8004bfe:	4d2b      	ldr	r5, [pc, #172]	; (8004cac <_free_r+0x160>)
 8004c00:	42ab      	cmp	r3, r5
 8004c02:	d813      	bhi.n	8004c2c <_free_r+0xe0>
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	109d      	asrs	r5, r3, #2
 8004c08:	40a8      	lsls	r0, r5
 8004c0a:	6854      	ldr	r4, [r2, #4]
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	4320      	orrs	r0, r4
 8004c10:	6050      	str	r0, [r2, #4]
 8004c12:	189a      	adds	r2, r3, r2
 8004c14:	6893      	ldr	r3, [r2, #8]
 8004c16:	60ca      	str	r2, [r1, #12]
 8004c18:	608b      	str	r3, [r1, #8]
 8004c1a:	6091      	str	r1, [r2, #8]
 8004c1c:	60d9      	str	r1, [r3, #12]
 8004c1e:	e7c4      	b.n	8004baa <_free_r+0x5e>
 8004c20:	4666      	mov	r6, ip
 8004c22:	e7d4      	b.n	8004bce <_free_r+0x82>
 8004c24:	68c0      	ldr	r0, [r0, #12]
 8004c26:	60e8      	str	r0, [r5, #12]
 8004c28:	6085      	str	r5, [r0, #8]
 8004c2a:	e7e1      	b.n	8004bf0 <_free_r+0xa4>
 8004c2c:	0a5d      	lsrs	r5, r3, #9
 8004c2e:	2d04      	cmp	r5, #4
 8004c30:	d812      	bhi.n	8004c58 <_free_r+0x10c>
 8004c32:	0998      	lsrs	r0, r3, #6
 8004c34:	3038      	adds	r0, #56	; 0x38
 8004c36:	00c6      	lsls	r6, r0, #3
 8004c38:	18b6      	adds	r6, r6, r2
 8004c3a:	68b5      	ldr	r5, [r6, #8]
 8004c3c:	2703      	movs	r7, #3
 8004c3e:	42ae      	cmp	r6, r5
 8004c40:	d125      	bne.n	8004c8e <_free_r+0x142>
 8004c42:	2301      	movs	r3, #1
 8004c44:	1080      	asrs	r0, r0, #2
 8004c46:	4083      	lsls	r3, r0
 8004c48:	6850      	ldr	r0, [r2, #4]
 8004c4a:	4303      	orrs	r3, r0
 8004c4c:	6053      	str	r3, [r2, #4]
 8004c4e:	60ce      	str	r6, [r1, #12]
 8004c50:	608d      	str	r5, [r1, #8]
 8004c52:	60b1      	str	r1, [r6, #8]
 8004c54:	60e9      	str	r1, [r5, #12]
 8004c56:	e7a8      	b.n	8004baa <_free_r+0x5e>
 8004c58:	2d14      	cmp	r5, #20
 8004c5a:	d802      	bhi.n	8004c62 <_free_r+0x116>
 8004c5c:	0028      	movs	r0, r5
 8004c5e:	305b      	adds	r0, #91	; 0x5b
 8004c60:	e7e9      	b.n	8004c36 <_free_r+0xea>
 8004c62:	2d54      	cmp	r5, #84	; 0x54
 8004c64:	d802      	bhi.n	8004c6c <_free_r+0x120>
 8004c66:	0b18      	lsrs	r0, r3, #12
 8004c68:	306e      	adds	r0, #110	; 0x6e
 8004c6a:	e7e4      	b.n	8004c36 <_free_r+0xea>
 8004c6c:	20aa      	movs	r0, #170	; 0xaa
 8004c6e:	0040      	lsls	r0, r0, #1
 8004c70:	4285      	cmp	r5, r0
 8004c72:	d802      	bhi.n	8004c7a <_free_r+0x12e>
 8004c74:	0bd8      	lsrs	r0, r3, #15
 8004c76:	3077      	adds	r0, #119	; 0x77
 8004c78:	e7dd      	b.n	8004c36 <_free_r+0xea>
 8004c7a:	4e0d      	ldr	r6, [pc, #52]	; (8004cb0 <_free_r+0x164>)
 8004c7c:	207e      	movs	r0, #126	; 0x7e
 8004c7e:	42b5      	cmp	r5, r6
 8004c80:	d8d9      	bhi.n	8004c36 <_free_r+0xea>
 8004c82:	0c98      	lsrs	r0, r3, #18
 8004c84:	307c      	adds	r0, #124	; 0x7c
 8004c86:	e7d6      	b.n	8004c36 <_free_r+0xea>
 8004c88:	68ad      	ldr	r5, [r5, #8]
 8004c8a:	42ae      	cmp	r6, r5
 8004c8c:	d003      	beq.n	8004c96 <_free_r+0x14a>
 8004c8e:	686a      	ldr	r2, [r5, #4]
 8004c90:	43ba      	bics	r2, r7
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d3f8      	bcc.n	8004c88 <_free_r+0x13c>
 8004c96:	68ee      	ldr	r6, [r5, #12]
 8004c98:	e7d9      	b.n	8004c4e <_free_r+0x102>
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	200002c4 	.word	0x200002c4
 8004ca0:	200006d0 	.word	0x200006d0
 8004ca4:	20000ba0 	.word	0x20000ba0
 8004ca8:	200002cc 	.word	0x200002cc
 8004cac:	000001ff 	.word	0x000001ff
 8004cb0:	00000554 	.word	0x00000554

08004cb4 <_fseek_r>:
 8004cb4:	b510      	push	{r4, lr}
 8004cb6:	f000 f801 	bl	8004cbc <_fseeko_r>
 8004cba:	bd10      	pop	{r4, pc}

08004cbc <_fseeko_r>:
 8004cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cbe:	b095      	sub	sp, #84	; 0x54
 8004cc0:	0006      	movs	r6, r0
 8004cc2:	000c      	movs	r4, r1
 8004cc4:	9202      	str	r2, [sp, #8]
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d004      	beq.n	8004cd6 <_fseeko_r+0x1a>
 8004ccc:	6983      	ldr	r3, [r0, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <_fseeko_r+0x1a>
 8004cd2:	f7ff fdc5 	bl	8004860 <__sinit>
 8004cd6:	4bb2      	ldr	r3, [pc, #712]	; (8004fa0 <_fseeko_r+0x2e4>)
 8004cd8:	429c      	cmp	r4, r3
 8004cda:	d120      	bne.n	8004d1e <_fseeko_r+0x62>
 8004cdc:	6874      	ldr	r4, [r6, #4]
 8004cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ce0:	07db      	lsls	r3, r3, #31
 8004ce2:	d405      	bmi.n	8004cf0 <_fseeko_r+0x34>
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	059b      	lsls	r3, r3, #22
 8004ce8:	d402      	bmi.n	8004cf0 <_fseeko_r+0x34>
 8004cea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cec:	f000 f9da 	bl	80050a4 <__retarget_lock_acquire_recursive>
 8004cf0:	2284      	movs	r2, #132	; 0x84
 8004cf2:	89a3      	ldrh	r3, [r4, #12]
 8004cf4:	0052      	lsls	r2, r2, #1
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d103      	bne.n	8004d04 <_fseeko_r+0x48>
 8004cfc:	0021      	movs	r1, r4
 8004cfe:	0030      	movs	r0, r6
 8004d00:	f7ff fcf8 	bl	80046f4 <_fflush_r>
 8004d04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d112      	bne.n	8004d32 <_fseeko_r+0x76>
 8004d0c:	331d      	adds	r3, #29
 8004d0e:	6033      	str	r3, [r6, #0]
 8004d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d12:	07db      	lsls	r3, r3, #31
 8004d14:	d400      	bmi.n	8004d18 <_fseeko_r+0x5c>
 8004d16:	e137      	b.n	8004f88 <_fseeko_r+0x2cc>
 8004d18:	2501      	movs	r5, #1
 8004d1a:	426d      	negs	r5, r5
 8004d1c:	e0ee      	b.n	8004efc <_fseeko_r+0x240>
 8004d1e:	4ba1      	ldr	r3, [pc, #644]	; (8004fa4 <_fseeko_r+0x2e8>)
 8004d20:	429c      	cmp	r4, r3
 8004d22:	d101      	bne.n	8004d28 <_fseeko_r+0x6c>
 8004d24:	68b4      	ldr	r4, [r6, #8]
 8004d26:	e7da      	b.n	8004cde <_fseeko_r+0x22>
 8004d28:	4b9f      	ldr	r3, [pc, #636]	; (8004fa8 <_fseeko_r+0x2ec>)
 8004d2a:	429c      	cmp	r4, r3
 8004d2c:	d1d7      	bne.n	8004cde <_fseeko_r+0x22>
 8004d2e:	68f4      	ldr	r4, [r6, #12]
 8004d30:	e7d5      	b.n	8004cde <_fseeko_r+0x22>
 8004d32:	9b00      	ldr	r3, [sp, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d007      	beq.n	8004d48 <_fseeko_r+0x8c>
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d001      	beq.n	8004d40 <_fseeko_r+0x84>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d178      	bne.n	8004e32 <_fseeko_r+0x176>
 8004d40:	2300      	movs	r3, #0
 8004d42:	9303      	str	r3, [sp, #12]
 8004d44:	001d      	movs	r5, r3
 8004d46:	e01a      	b.n	8004d7e <_fseeko_r+0xc2>
 8004d48:	0021      	movs	r1, r4
 8004d4a:	0030      	movs	r0, r6
 8004d4c:	f7ff fcd2 	bl	80046f4 <_fflush_r>
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	89a2      	ldrh	r2, [r4, #12]
 8004d54:	015b      	lsls	r3, r3, #5
 8004d56:	401a      	ands	r2, r3
 8004d58:	d04d      	beq.n	8004df6 <_fseeko_r+0x13a>
 8004d5a:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	075a      	lsls	r2, r3, #29
 8004d60:	d55e      	bpl.n	8004e20 <_fseeko_r+0x164>
 8004d62:	6863      	ldr	r3, [r4, #4]
 8004d64:	1aed      	subs	r5, r5, r3
 8004d66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <_fseeko_r+0xb4>
 8004d6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d6e:	1aed      	subs	r5, r5, r3
 8004d70:	9b02      	ldr	r3, [sp, #8]
 8004d72:	195b      	adds	r3, r3, r5
 8004d74:	9302      	str	r3, [sp, #8]
 8004d76:	9b00      	ldr	r3, [sp, #0]
 8004d78:	9303      	str	r3, [sp, #12]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	6923      	ldr	r3, [r4, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d103      	bne.n	8004d8c <_fseeko_r+0xd0>
 8004d84:	0021      	movs	r1, r4
 8004d86:	0030      	movs	r0, r6
 8004d88:	f000 f9be 	bl	8005108 <__smakebuf_r>
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	4a87      	ldr	r2, [pc, #540]	; (8004fac <_fseeko_r+0x2f0>)
 8004d90:	4213      	tst	r3, r2
 8004d92:	d10c      	bne.n	8004dae <_fseeko_r+0xf2>
 8004d94:	2780      	movs	r7, #128	; 0x80
 8004d96:	00ff      	lsls	r7, r7, #3
 8004d98:	423b      	tst	r3, r7
 8004d9a:	d162      	bne.n	8004e62 <_fseeko_r+0x1a6>
 8004d9c:	4b84      	ldr	r3, [pc, #528]	; (8004fb0 <_fseeko_r+0x2f4>)
 8004d9e:	9a01      	ldr	r2, [sp, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d048      	beq.n	8004e36 <_fseeko_r+0x17a>
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	89a2      	ldrh	r2, [r4, #12]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	4313      	orrs	r3, r2
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	0021      	movs	r1, r4
 8004db0:	0030      	movs	r0, r6
 8004db2:	f7ff fc9f 	bl	80046f4 <_fflush_r>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d1aa      	bne.n	8004d10 <_fseeko_r+0x54>
 8004dba:	9b00      	ldr	r3, [sp, #0]
 8004dbc:	9a02      	ldr	r2, [sp, #8]
 8004dbe:	6a21      	ldr	r1, [r4, #32]
 8004dc0:	0030      	movs	r0, r6
 8004dc2:	9d01      	ldr	r5, [sp, #4]
 8004dc4:	47a8      	blx	r5
 8004dc6:	1c43      	adds	r3, r0, #1
 8004dc8:	d0a2      	beq.n	8004d10 <_fseeko_r+0x54>
 8004dca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dcc:	2900      	cmp	r1, #0
 8004dce:	d008      	beq.n	8004de2 <_fseeko_r+0x126>
 8004dd0:	0023      	movs	r3, r4
 8004dd2:	3344      	adds	r3, #68	; 0x44
 8004dd4:	4299      	cmp	r1, r3
 8004dd6:	d002      	beq.n	8004dde <_fseeko_r+0x122>
 8004dd8:	0030      	movs	r0, r6
 8004dda:	f7ff feb7 	bl	8004b4c <_free_r>
 8004dde:	2300      	movs	r3, #0
 8004de0:	6363      	str	r3, [r4, #52]	; 0x34
 8004de2:	2100      	movs	r1, #0
 8004de4:	6923      	ldr	r3, [r4, #16]
 8004de6:	4a73      	ldr	r2, [pc, #460]	; (8004fb4 <_fseeko_r+0x2f8>)
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	6061      	str	r1, [r4, #4]
 8004dee:	4013      	ands	r3, r2
 8004df0:	81a3      	strh	r3, [r4, #12]
 8004df2:	2208      	movs	r2, #8
 8004df4:	e079      	b.n	8004eea <_fseeko_r+0x22e>
 8004df6:	9d01      	ldr	r5, [sp, #4]
 8004df8:	9b00      	ldr	r3, [sp, #0]
 8004dfa:	6a21      	ldr	r1, [r4, #32]
 8004dfc:	0030      	movs	r0, r6
 8004dfe:	47a8      	blx	r5
 8004e00:	0005      	movs	r5, r0
 8004e02:	1c43      	adds	r3, r0, #1
 8004e04:	d1aa      	bne.n	8004d5c <_fseeko_r+0xa0>
 8004e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e08:	9a00      	ldr	r2, [sp, #0]
 8004e0a:	4213      	tst	r3, r2
 8004e0c:	d000      	beq.n	8004e10 <_fseeko_r+0x154>
 8004e0e:	e783      	b.n	8004d18 <_fseeko_r+0x5c>
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	059b      	lsls	r3, r3, #22
 8004e14:	d500      	bpl.n	8004e18 <_fseeko_r+0x15c>
 8004e16:	e77f      	b.n	8004d18 <_fseeko_r+0x5c>
 8004e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e1a:	f000 f944 	bl	80050a6 <__retarget_lock_release_recursive>
 8004e1e:	e06d      	b.n	8004efc <_fseeko_r+0x240>
 8004e20:	071b      	lsls	r3, r3, #28
 8004e22:	d5a5      	bpl.n	8004d70 <_fseeko_r+0xb4>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0a2      	beq.n	8004d70 <_fseeko_r+0xb4>
 8004e2a:	6922      	ldr	r2, [r4, #16]
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	18ed      	adds	r5, r5, r3
 8004e30:	e79e      	b.n	8004d70 <_fseeko_r+0xb4>
 8004e32:	2316      	movs	r3, #22
 8004e34:	e76b      	b.n	8004d0e <_fseeko_r+0x52>
 8004e36:	230e      	movs	r3, #14
 8004e38:	5ee1      	ldrsh	r1, [r4, r3]
 8004e3a:	2900      	cmp	r1, #0
 8004e3c:	dbb2      	blt.n	8004da4 <_fseeko_r+0xe8>
 8004e3e:	aa05      	add	r2, sp, #20
 8004e40:	0030      	movs	r0, r6
 8004e42:	f000 f8b9 	bl	8004fb8 <_fstat_r>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d1ac      	bne.n	8004da4 <_fseeko_r+0xe8>
 8004e4a:	22f0      	movs	r2, #240	; 0xf0
 8004e4c:	9b06      	ldr	r3, [sp, #24]
 8004e4e:	0212      	lsls	r2, r2, #8
 8004e50:	4013      	ands	r3, r2
 8004e52:	2280      	movs	r2, #128	; 0x80
 8004e54:	0212      	lsls	r2, r2, #8
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d1a4      	bne.n	8004da4 <_fseeko_r+0xe8>
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	6527      	str	r7, [r4, #80]	; 0x50
 8004e5e:	431f      	orrs	r7, r3
 8004e60:	81a7      	strh	r7, [r4, #12]
 8004e62:	9b00      	ldr	r3, [sp, #0]
 8004e64:	9f02      	ldr	r7, [sp, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <_fseeko_r+0x1c4>
 8004e6a:	230e      	movs	r3, #14
 8004e6c:	5ee1      	ldrsh	r1, [r4, r3]
 8004e6e:	aa05      	add	r2, sp, #20
 8004e70:	0030      	movs	r0, r6
 8004e72:	f000 f8a1 	bl	8004fb8 <_fstat_r>
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d199      	bne.n	8004dae <_fseeko_r+0xf2>
 8004e7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004e7c:	9b02      	ldr	r3, [sp, #8]
 8004e7e:	19df      	adds	r7, r3, r7
 8004e80:	9b03      	ldr	r3, [sp, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10a      	bne.n	8004e9c <_fseeko_r+0x1e0>
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	04db      	lsls	r3, r3, #19
 8004e8a:	d53a      	bpl.n	8004f02 <_fseeko_r+0x246>
 8004e8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e8e:	6863      	ldr	r3, [r4, #4]
 8004e90:	1ac5      	subs	r5, r0, r3
 8004e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <_fseeko_r+0x1e0>
 8004e98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e9a:	1aed      	subs	r5, r5, r3
 8004e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e9e:	6923      	ldr	r3, [r4, #16]
 8004ea0:	2900      	cmp	r1, #0
 8004ea2:	d037      	beq.n	8004f14 <_fseeko_r+0x258>
 8004ea4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	6862      	ldr	r2, [r4, #4]
 8004eaa:	18ad      	adds	r5, r5, r2
 8004eac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004eae:	1aed      	subs	r5, r5, r3
 8004eb0:	189b      	adds	r3, r3, r2
 8004eb2:	42af      	cmp	r7, r5
 8004eb4:	db33      	blt.n	8004f1e <_fseeko_r+0x262>
 8004eb6:	18ea      	adds	r2, r5, r3
 8004eb8:	42ba      	cmp	r2, r7
 8004eba:	d930      	bls.n	8004f1e <_fseeko_r+0x262>
 8004ebc:	6922      	ldr	r2, [r4, #16]
 8004ebe:	1b7f      	subs	r7, r7, r5
 8004ec0:	19d2      	adds	r2, r2, r7
 8004ec2:	1bdf      	subs	r7, r3, r7
 8004ec4:	6022      	str	r2, [r4, #0]
 8004ec6:	6067      	str	r7, [r4, #4]
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	d008      	beq.n	8004ede <_fseeko_r+0x222>
 8004ecc:	0023      	movs	r3, r4
 8004ece:	3344      	adds	r3, #68	; 0x44
 8004ed0:	4299      	cmp	r1, r3
 8004ed2:	d002      	beq.n	8004eda <_fseeko_r+0x21e>
 8004ed4:	0030      	movs	r0, r6
 8004ed6:	f7ff fe39 	bl	8004b4c <_free_r>
 8004eda:	2300      	movs	r3, #0
 8004edc:	6363      	str	r3, [r4, #52]	; 0x34
 8004ede:	2220      	movs	r2, #32
 8004ee0:	89a3      	ldrh	r3, [r4, #12]
 8004ee2:	4393      	bics	r3, r2
 8004ee4:	81a3      	strh	r3, [r4, #12]
 8004ee6:	3a18      	subs	r2, #24
 8004ee8:	2100      	movs	r1, #0
 8004eea:	0020      	movs	r0, r4
 8004eec:	2501      	movs	r5, #1
 8004eee:	305c      	adds	r0, #92	; 0x5c
 8004ef0:	f000 fb6f 	bl	80055d2 <memset>
 8004ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ef6:	401d      	ands	r5, r3
 8004ef8:	d04e      	beq.n	8004f98 <_fseeko_r+0x2dc>
 8004efa:	2500      	movs	r5, #0
 8004efc:	0028      	movs	r0, r5
 8004efe:	b015      	add	sp, #84	; 0x54
 8004f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f02:	2301      	movs	r3, #1
 8004f04:	9a03      	ldr	r2, [sp, #12]
 8004f06:	6a21      	ldr	r1, [r4, #32]
 8004f08:	0030      	movs	r0, r6
 8004f0a:	9d01      	ldr	r5, [sp, #4]
 8004f0c:	47a8      	blx	r5
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	d1bd      	bne.n	8004e8e <_fseeko_r+0x1d2>
 8004f12:	e74c      	b.n	8004dae <_fseeko_r+0xf2>
 8004f14:	6822      	ldr	r2, [r4, #0]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	1aed      	subs	r5, r5, r3
 8004f1a:	6862      	ldr	r2, [r4, #4]
 8004f1c:	e7c8      	b.n	8004eb0 <_fseeko_r+0x1f4>
 8004f1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f20:	6a21      	ldr	r1, [r4, #32]
 8004f22:	425d      	negs	r5, r3
 8004f24:	403d      	ands	r5, r7
 8004f26:	9503      	str	r5, [sp, #12]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	002a      	movs	r2, r5
 8004f2c:	0030      	movs	r0, r6
 8004f2e:	9d01      	ldr	r5, [sp, #4]
 8004f30:	47a8      	blx	r5
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	d100      	bne.n	8004f38 <_fseeko_r+0x27c>
 8004f36:	e73a      	b.n	8004dae <_fseeko_r+0xf2>
 8004f38:	2500      	movs	r5, #0
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f3e:	6065      	str	r5, [r4, #4]
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	42a9      	cmp	r1, r5
 8004f44:	d007      	beq.n	8004f56 <_fseeko_r+0x29a>
 8004f46:	0023      	movs	r3, r4
 8004f48:	3344      	adds	r3, #68	; 0x44
 8004f4a:	4299      	cmp	r1, r3
 8004f4c:	d002      	beq.n	8004f54 <_fseeko_r+0x298>
 8004f4e:	0030      	movs	r0, r6
 8004f50:	f7ff fdfc 	bl	8004b4c <_free_r>
 8004f54:	6365      	str	r5, [r4, #52]	; 0x34
 8004f56:	2220      	movs	r2, #32
 8004f58:	89a3      	ldrh	r3, [r4, #12]
 8004f5a:	4393      	bics	r3, r2
 8004f5c:	81a3      	strh	r3, [r4, #12]
 8004f5e:	9b03      	ldr	r3, [sp, #12]
 8004f60:	1aff      	subs	r7, r7, r3
 8004f62:	d00f      	beq.n	8004f84 <_fseeko_r+0x2c8>
 8004f64:	0021      	movs	r1, r4
 8004f66:	0030      	movs	r0, r6
 8004f68:	f000 fba6 	bl	80056b8 <__srefill_r>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d000      	beq.n	8004f72 <_fseeko_r+0x2b6>
 8004f70:	e71d      	b.n	8004dae <_fseeko_r+0xf2>
 8004f72:	6865      	ldr	r5, [r4, #4]
 8004f74:	42af      	cmp	r7, r5
 8004f76:	d900      	bls.n	8004f7a <_fseeko_r+0x2be>
 8004f78:	e719      	b.n	8004dae <_fseeko_r+0xf2>
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	19db      	adds	r3, r3, r7
 8004f7e:	1bef      	subs	r7, r5, r7
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	6067      	str	r7, [r4, #4]
 8004f84:	2208      	movs	r2, #8
 8004f86:	e7af      	b.n	8004ee8 <_fseeko_r+0x22c>
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	059b      	lsls	r3, r3, #22
 8004f8c:	d500      	bpl.n	8004f90 <_fseeko_r+0x2d4>
 8004f8e:	e6c3      	b.n	8004d18 <_fseeko_r+0x5c>
 8004f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f92:	f000 f888 	bl	80050a6 <__retarget_lock_release_recursive>
 8004f96:	e6bf      	b.n	8004d18 <_fseeko_r+0x5c>
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	059b      	lsls	r3, r3, #22
 8004f9c:	d4ad      	bmi.n	8004efa <_fseeko_r+0x23e>
 8004f9e:	e73b      	b.n	8004e18 <_fseeko_r+0x15c>
 8004fa0:	080064bc 	.word	0x080064bc
 8004fa4:	080064dc 	.word	0x080064dc
 8004fa8:	0800649c 	.word	0x0800649c
 8004fac:	0000081a 	.word	0x0000081a
 8004fb0:	08005a29 	.word	0x08005a29
 8004fb4:	fffff7df 	.word	0xfffff7df

08004fb8 <_fstat_r>:
 8004fb8:	2300      	movs	r3, #0
 8004fba:	b570      	push	{r4, r5, r6, lr}
 8004fbc:	4c06      	ldr	r4, [pc, #24]	; (8004fd8 <_fstat_r+0x20>)
 8004fbe:	0005      	movs	r5, r0
 8004fc0:	0008      	movs	r0, r1
 8004fc2:	0011      	movs	r1, r2
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	f7fd fa62 	bl	800248e <_fstat>
 8004fca:	1c43      	adds	r3, r0, #1
 8004fcc:	d103      	bne.n	8004fd6 <_fstat_r+0x1e>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d000      	beq.n	8004fd6 <_fstat_r+0x1e>
 8004fd4:	602b      	str	r3, [r5, #0]
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	20000e08 	.word	0x20000e08

08004fdc <_fwalk>:
 8004fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fde:	30d8      	adds	r0, #216	; 0xd8
 8004fe0:	0004      	movs	r4, r0
 8004fe2:	2600      	movs	r6, #0
 8004fe4:	9101      	str	r1, [sp, #4]
 8004fe6:	2c00      	cmp	r4, #0
 8004fe8:	d101      	bne.n	8004fee <_fwalk+0x12>
 8004fea:	0030      	movs	r0, r6
 8004fec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fee:	68a5      	ldr	r5, [r4, #8]
 8004ff0:	6867      	ldr	r7, [r4, #4]
 8004ff2:	3f01      	subs	r7, #1
 8004ff4:	d501      	bpl.n	8004ffa <_fwalk+0x1e>
 8004ff6:	6824      	ldr	r4, [r4, #0]
 8004ff8:	e7f5      	b.n	8004fe6 <_fwalk+0xa>
 8004ffa:	89ab      	ldrh	r3, [r5, #12]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d907      	bls.n	8005010 <_fwalk+0x34>
 8005000:	220e      	movs	r2, #14
 8005002:	5eab      	ldrsh	r3, [r5, r2]
 8005004:	3301      	adds	r3, #1
 8005006:	d003      	beq.n	8005010 <_fwalk+0x34>
 8005008:	0028      	movs	r0, r5
 800500a:	9b01      	ldr	r3, [sp, #4]
 800500c:	4798      	blx	r3
 800500e:	4306      	orrs	r6, r0
 8005010:	3568      	adds	r5, #104	; 0x68
 8005012:	e7ee      	b.n	8004ff2 <_fwalk+0x16>

08005014 <_fwalk_reent>:
 8005014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005016:	0004      	movs	r4, r0
 8005018:	0007      	movs	r7, r0
 800501a:	2600      	movs	r6, #0
 800501c:	9101      	str	r1, [sp, #4]
 800501e:	34d8      	adds	r4, #216	; 0xd8
 8005020:	2c00      	cmp	r4, #0
 8005022:	d101      	bne.n	8005028 <_fwalk_reent+0x14>
 8005024:	0030      	movs	r0, r6
 8005026:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	68a5      	ldr	r5, [r4, #8]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	9b00      	ldr	r3, [sp, #0]
 8005030:	3b01      	subs	r3, #1
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	d501      	bpl.n	800503a <_fwalk_reent+0x26>
 8005036:	6824      	ldr	r4, [r4, #0]
 8005038:	e7f2      	b.n	8005020 <_fwalk_reent+0xc>
 800503a:	89ab      	ldrh	r3, [r5, #12]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d908      	bls.n	8005052 <_fwalk_reent+0x3e>
 8005040:	220e      	movs	r2, #14
 8005042:	5eab      	ldrsh	r3, [r5, r2]
 8005044:	3301      	adds	r3, #1
 8005046:	d004      	beq.n	8005052 <_fwalk_reent+0x3e>
 8005048:	0029      	movs	r1, r5
 800504a:	0038      	movs	r0, r7
 800504c:	9b01      	ldr	r3, [sp, #4]
 800504e:	4798      	blx	r3
 8005050:	4306      	orrs	r6, r0
 8005052:	3568      	adds	r5, #104	; 0x68
 8005054:	e7eb      	b.n	800502e <_fwalk_reent+0x1a>
	...

08005058 <__libc_init_array>:
 8005058:	b570      	push	{r4, r5, r6, lr}
 800505a:	2600      	movs	r6, #0
 800505c:	4d0c      	ldr	r5, [pc, #48]	; (8005090 <__libc_init_array+0x38>)
 800505e:	4c0d      	ldr	r4, [pc, #52]	; (8005094 <__libc_init_array+0x3c>)
 8005060:	1b64      	subs	r4, r4, r5
 8005062:	10a4      	asrs	r4, r4, #2
 8005064:	42a6      	cmp	r6, r4
 8005066:	d109      	bne.n	800507c <__libc_init_array+0x24>
 8005068:	2600      	movs	r6, #0
 800506a:	f000 ff15 	bl	8005e98 <_init>
 800506e:	4d0a      	ldr	r5, [pc, #40]	; (8005098 <__libc_init_array+0x40>)
 8005070:	4c0a      	ldr	r4, [pc, #40]	; (800509c <__libc_init_array+0x44>)
 8005072:	1b64      	subs	r4, r4, r5
 8005074:	10a4      	asrs	r4, r4, #2
 8005076:	42a6      	cmp	r6, r4
 8005078:	d105      	bne.n	8005086 <__libc_init_array+0x2e>
 800507a:	bd70      	pop	{r4, r5, r6, pc}
 800507c:	00b3      	lsls	r3, r6, #2
 800507e:	58eb      	ldr	r3, [r5, r3]
 8005080:	4798      	blx	r3
 8005082:	3601      	adds	r6, #1
 8005084:	e7ee      	b.n	8005064 <__libc_init_array+0xc>
 8005086:	00b3      	lsls	r3, r6, #2
 8005088:	58eb      	ldr	r3, [r5, r3]
 800508a:	4798      	blx	r3
 800508c:	3601      	adds	r6, #1
 800508e:	e7f2      	b.n	8005076 <__libc_init_array+0x1e>
 8005090:	200006d8 	.word	0x200006d8
 8005094:	200006d8 	.word	0x200006d8
 8005098:	200006d8 	.word	0x200006d8
 800509c:	200006e4 	.word	0x200006e4

080050a0 <__retarget_lock_init_recursive>:
 80050a0:	4770      	bx	lr

080050a2 <__retarget_lock_close_recursive>:
 80050a2:	4770      	bx	lr

080050a4 <__retarget_lock_acquire_recursive>:
 80050a4:	4770      	bx	lr

080050a6 <__retarget_lock_release_recursive>:
 80050a6:	4770      	bx	lr

080050a8 <__swhatbuf_r>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	000e      	movs	r6, r1
 80050ac:	001d      	movs	r5, r3
 80050ae:	230e      	movs	r3, #14
 80050b0:	5ec9      	ldrsh	r1, [r1, r3]
 80050b2:	b090      	sub	sp, #64	; 0x40
 80050b4:	0014      	movs	r4, r2
 80050b6:	2900      	cmp	r1, #0
 80050b8:	da0a      	bge.n	80050d0 <__swhatbuf_r+0x28>
 80050ba:	2300      	movs	r3, #0
 80050bc:	2280      	movs	r2, #128	; 0x80
 80050be:	602b      	str	r3, [r5, #0]
 80050c0:	89b0      	ldrh	r0, [r6, #12]
 80050c2:	4010      	ands	r0, r2
 80050c4:	4298      	cmp	r0, r3
 80050c6:	d117      	bne.n	80050f8 <__swhatbuf_r+0x50>
 80050c8:	2380      	movs	r3, #128	; 0x80
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	e016      	b.n	80050fe <__swhatbuf_r+0x56>
 80050d0:	aa01      	add	r2, sp, #4
 80050d2:	f7ff ff71 	bl	8004fb8 <_fstat_r>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	dbef      	blt.n	80050ba <__swhatbuf_r+0x12>
 80050da:	22f0      	movs	r2, #240	; 0xf0
 80050dc:	9b02      	ldr	r3, [sp, #8]
 80050de:	0212      	lsls	r2, r2, #8
 80050e0:	4013      	ands	r3, r2
 80050e2:	4a08      	ldr	r2, [pc, #32]	; (8005104 <__swhatbuf_r+0x5c>)
 80050e4:	2080      	movs	r0, #128	; 0x80
 80050e6:	189b      	adds	r3, r3, r2
 80050e8:	425a      	negs	r2, r3
 80050ea:	4153      	adcs	r3, r2
 80050ec:	602b      	str	r3, [r5, #0]
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	0100      	lsls	r0, r0, #4
 80050f6:	e002      	b.n	80050fe <__swhatbuf_r+0x56>
 80050f8:	2240      	movs	r2, #64	; 0x40
 80050fa:	0018      	movs	r0, r3
 80050fc:	6022      	str	r2, [r4, #0]
 80050fe:	b010      	add	sp, #64	; 0x40
 8005100:	bd70      	pop	{r4, r5, r6, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	ffffe000 	.word	0xffffe000

08005108 <__smakebuf_r>:
 8005108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800510a:	2602      	movs	r6, #2
 800510c:	898b      	ldrh	r3, [r1, #12]
 800510e:	0005      	movs	r5, r0
 8005110:	000c      	movs	r4, r1
 8005112:	4233      	tst	r3, r6
 8005114:	d006      	beq.n	8005124 <__smakebuf_r+0x1c>
 8005116:	0023      	movs	r3, r4
 8005118:	3347      	adds	r3, #71	; 0x47
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	6123      	str	r3, [r4, #16]
 800511e:	2301      	movs	r3, #1
 8005120:	6163      	str	r3, [r4, #20]
 8005122:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005124:	ab01      	add	r3, sp, #4
 8005126:	466a      	mov	r2, sp
 8005128:	f7ff ffbe 	bl	80050a8 <__swhatbuf_r>
 800512c:	9900      	ldr	r1, [sp, #0]
 800512e:	0007      	movs	r7, r0
 8005130:	0028      	movs	r0, r5
 8005132:	f000 f841 	bl	80051b8 <_malloc_r>
 8005136:	2800      	cmp	r0, #0
 8005138:	d108      	bne.n	800514c <__smakebuf_r+0x44>
 800513a:	220c      	movs	r2, #12
 800513c:	5ea3      	ldrsh	r3, [r4, r2]
 800513e:	059a      	lsls	r2, r3, #22
 8005140:	d4ef      	bmi.n	8005122 <__smakebuf_r+0x1a>
 8005142:	2203      	movs	r2, #3
 8005144:	4393      	bics	r3, r2
 8005146:	431e      	orrs	r6, r3
 8005148:	81a6      	strh	r6, [r4, #12]
 800514a:	e7e4      	b.n	8005116 <__smakebuf_r+0xe>
 800514c:	4b0f      	ldr	r3, [pc, #60]	; (800518c <__smakebuf_r+0x84>)
 800514e:	62ab      	str	r3, [r5, #40]	; 0x28
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	89a2      	ldrh	r2, [r4, #12]
 8005154:	6020      	str	r0, [r4, #0]
 8005156:	4313      	orrs	r3, r2
 8005158:	81a3      	strh	r3, [r4, #12]
 800515a:	9b00      	ldr	r3, [sp, #0]
 800515c:	6120      	str	r0, [r4, #16]
 800515e:	6163      	str	r3, [r4, #20]
 8005160:	9b01      	ldr	r3, [sp, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00d      	beq.n	8005182 <__smakebuf_r+0x7a>
 8005166:	230e      	movs	r3, #14
 8005168:	5ee1      	ldrsh	r1, [r4, r3]
 800516a:	0028      	movs	r0, r5
 800516c:	f000 fe58 	bl	8005e20 <_isatty_r>
 8005170:	2800      	cmp	r0, #0
 8005172:	d006      	beq.n	8005182 <__smakebuf_r+0x7a>
 8005174:	2203      	movs	r2, #3
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	4393      	bics	r3, r2
 800517a:	001a      	movs	r2, r3
 800517c:	2301      	movs	r3, #1
 800517e:	4313      	orrs	r3, r2
 8005180:	81a3      	strh	r3, [r4, #12]
 8005182:	89a0      	ldrh	r0, [r4, #12]
 8005184:	4338      	orrs	r0, r7
 8005186:	81a0      	strh	r0, [r4, #12]
 8005188:	e7cb      	b.n	8005122 <__smakebuf_r+0x1a>
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	0800479d 	.word	0x0800479d

08005190 <malloc>:
 8005190:	b510      	push	{r4, lr}
 8005192:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <malloc+0x10>)
 8005194:	0001      	movs	r1, r0
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	f000 f80e 	bl	80051b8 <_malloc_r>
 800519c:	bd10      	pop	{r4, pc}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	200001d0 	.word	0x200001d0

080051a4 <free>:
 80051a4:	b510      	push	{r4, lr}
 80051a6:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <free+0x10>)
 80051a8:	0001      	movs	r1, r0
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	f7ff fcce 	bl	8004b4c <_free_r>
 80051b0:	bd10      	pop	{r4, pc}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	200001d0 	.word	0x200001d0

080051b8 <_malloc_r>:
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ba:	000d      	movs	r5, r1
 80051bc:	b085      	sub	sp, #20
 80051be:	350b      	adds	r5, #11
 80051c0:	9001      	str	r0, [sp, #4]
 80051c2:	2d16      	cmp	r5, #22
 80051c4:	d908      	bls.n	80051d8 <_malloc_r+0x20>
 80051c6:	2307      	movs	r3, #7
 80051c8:	439d      	bics	r5, r3
 80051ca:	d506      	bpl.n	80051da <_malloc_r+0x22>
 80051cc:	230c      	movs	r3, #12
 80051ce:	9a01      	ldr	r2, [sp, #4]
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	2000      	movs	r0, #0
 80051d4:	b005      	add	sp, #20
 80051d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d8:	2510      	movs	r5, #16
 80051da:	428d      	cmp	r5, r1
 80051dc:	d3f6      	bcc.n	80051cc <_malloc_r+0x14>
 80051de:	9801      	ldr	r0, [sp, #4]
 80051e0:	f7fd f9de 	bl	80025a0 <__malloc_lock>
 80051e4:	23f8      	movs	r3, #248	; 0xf8
 80051e6:	33ff      	adds	r3, #255	; 0xff
 80051e8:	48ba      	ldr	r0, [pc, #744]	; (80054d4 <_malloc_r+0x31c>)
 80051ea:	429d      	cmp	r5, r3
 80051ec:	d81f      	bhi.n	800522e <_malloc_r+0x76>
 80051ee:	002a      	movs	r2, r5
 80051f0:	3208      	adds	r2, #8
 80051f2:	1882      	adds	r2, r0, r2
 80051f4:	0011      	movs	r1, r2
 80051f6:	6854      	ldr	r4, [r2, #4]
 80051f8:	3908      	subs	r1, #8
 80051fa:	08eb      	lsrs	r3, r5, #3
 80051fc:	428c      	cmp	r4, r1
 80051fe:	d103      	bne.n	8005208 <_malloc_r+0x50>
 8005200:	68d4      	ldr	r4, [r2, #12]
 8005202:	3302      	adds	r3, #2
 8005204:	42a2      	cmp	r2, r4
 8005206:	d029      	beq.n	800525c <_malloc_r+0xa4>
 8005208:	2303      	movs	r3, #3
 800520a:	6862      	ldr	r2, [r4, #4]
 800520c:	68a1      	ldr	r1, [r4, #8]
 800520e:	439a      	bics	r2, r3
 8005210:	0013      	movs	r3, r2
 8005212:	68e2      	ldr	r2, [r4, #12]
 8005214:	18e3      	adds	r3, r4, r3
 8005216:	60ca      	str	r2, [r1, #12]
 8005218:	6091      	str	r1, [r2, #8]
 800521a:	2201      	movs	r2, #1
 800521c:	6859      	ldr	r1, [r3, #4]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
 8005222:	9801      	ldr	r0, [sp, #4]
 8005224:	f7fd f9c0 	bl	80025a8 <__malloc_unlock>
 8005228:	0020      	movs	r0, r4
 800522a:	3008      	adds	r0, #8
 800522c:	e7d2      	b.n	80051d4 <_malloc_r+0x1c>
 800522e:	0a6a      	lsrs	r2, r5, #9
 8005230:	233f      	movs	r3, #63	; 0x3f
 8005232:	2a00      	cmp	r2, #0
 8005234:	d003      	beq.n	800523e <_malloc_r+0x86>
 8005236:	2a04      	cmp	r2, #4
 8005238:	d828      	bhi.n	800528c <_malloc_r+0xd4>
 800523a:	09ab      	lsrs	r3, r5, #6
 800523c:	3338      	adds	r3, #56	; 0x38
 800523e:	2203      	movs	r2, #3
 8005240:	4694      	mov	ip, r2
 8005242:	00d9      	lsls	r1, r3, #3
 8005244:	1809      	adds	r1, r1, r0
 8005246:	68cc      	ldr	r4, [r1, #12]
 8005248:	428c      	cmp	r4, r1
 800524a:	d006      	beq.n	800525a <_malloc_r+0xa2>
 800524c:	4666      	mov	r6, ip
 800524e:	6862      	ldr	r2, [r4, #4]
 8005250:	43b2      	bics	r2, r6
 8005252:	1b57      	subs	r7, r2, r5
 8005254:	2f0f      	cmp	r7, #15
 8005256:	dd31      	ble.n	80052bc <_malloc_r+0x104>
 8005258:	3b01      	subs	r3, #1
 800525a:	3301      	adds	r3, #1
 800525c:	0001      	movs	r1, r0
 800525e:	6904      	ldr	r4, [r0, #16]
 8005260:	3108      	adds	r1, #8
 8005262:	428c      	cmp	r4, r1
 8005264:	d04e      	beq.n	8005304 <_malloc_r+0x14c>
 8005266:	2203      	movs	r2, #3
 8005268:	6866      	ldr	r6, [r4, #4]
 800526a:	4396      	bics	r6, r2
 800526c:	0032      	movs	r2, r6
 800526e:	1b76      	subs	r6, r6, r5
 8005270:	2e0f      	cmp	r6, #15
 8005272:	dd31      	ble.n	80052d8 <_malloc_r+0x120>
 8005274:	2701      	movs	r7, #1
 8005276:	1963      	adds	r3, r4, r5
 8005278:	433d      	orrs	r5, r7
 800527a:	4337      	orrs	r7, r6
 800527c:	6065      	str	r5, [r4, #4]
 800527e:	6143      	str	r3, [r0, #20]
 8005280:	6103      	str	r3, [r0, #16]
 8005282:	60d9      	str	r1, [r3, #12]
 8005284:	6099      	str	r1, [r3, #8]
 8005286:	605f      	str	r7, [r3, #4]
 8005288:	50a6      	str	r6, [r4, r2]
 800528a:	e7ca      	b.n	8005222 <_malloc_r+0x6a>
 800528c:	2a14      	cmp	r2, #20
 800528e:	d802      	bhi.n	8005296 <_malloc_r+0xde>
 8005290:	0013      	movs	r3, r2
 8005292:	335b      	adds	r3, #91	; 0x5b
 8005294:	e7d3      	b.n	800523e <_malloc_r+0x86>
 8005296:	2a54      	cmp	r2, #84	; 0x54
 8005298:	d802      	bhi.n	80052a0 <_malloc_r+0xe8>
 800529a:	0b2b      	lsrs	r3, r5, #12
 800529c:	336e      	adds	r3, #110	; 0x6e
 800529e:	e7ce      	b.n	800523e <_malloc_r+0x86>
 80052a0:	23aa      	movs	r3, #170	; 0xaa
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d802      	bhi.n	80052ae <_malloc_r+0xf6>
 80052a8:	0beb      	lsrs	r3, r5, #15
 80052aa:	3377      	adds	r3, #119	; 0x77
 80052ac:	e7c7      	b.n	800523e <_malloc_r+0x86>
 80052ae:	498a      	ldr	r1, [pc, #552]	; (80054d8 <_malloc_r+0x320>)
 80052b0:	237e      	movs	r3, #126	; 0x7e
 80052b2:	428a      	cmp	r2, r1
 80052b4:	d8c3      	bhi.n	800523e <_malloc_r+0x86>
 80052b6:	0cab      	lsrs	r3, r5, #18
 80052b8:	337c      	adds	r3, #124	; 0x7c
 80052ba:	e7c0      	b.n	800523e <_malloc_r+0x86>
 80052bc:	68e6      	ldr	r6, [r4, #12]
 80052be:	2f00      	cmp	r7, #0
 80052c0:	db08      	blt.n	80052d4 <_malloc_r+0x11c>
 80052c2:	68a3      	ldr	r3, [r4, #8]
 80052c4:	60de      	str	r6, [r3, #12]
 80052c6:	60b3      	str	r3, [r6, #8]
 80052c8:	2301      	movs	r3, #1
 80052ca:	18a2      	adds	r2, r4, r2
 80052cc:	6851      	ldr	r1, [r2, #4]
 80052ce:	430b      	orrs	r3, r1
 80052d0:	6053      	str	r3, [r2, #4]
 80052d2:	e7a6      	b.n	8005222 <_malloc_r+0x6a>
 80052d4:	0034      	movs	r4, r6
 80052d6:	e7b7      	b.n	8005248 <_malloc_r+0x90>
 80052d8:	6141      	str	r1, [r0, #20]
 80052da:	6101      	str	r1, [r0, #16]
 80052dc:	2e00      	cmp	r6, #0
 80052de:	daf3      	bge.n	80052c8 <_malloc_r+0x110>
 80052e0:	497e      	ldr	r1, [pc, #504]	; (80054dc <_malloc_r+0x324>)
 80052e2:	428a      	cmp	r2, r1
 80052e4:	d842      	bhi.n	800536c <_malloc_r+0x1b4>
 80052e6:	08d2      	lsrs	r2, r2, #3
 80052e8:	39ff      	subs	r1, #255	; 0xff
 80052ea:	1096      	asrs	r6, r2, #2
 80052ec:	39ff      	subs	r1, #255	; 0xff
 80052ee:	40b1      	lsls	r1, r6
 80052f0:	6846      	ldr	r6, [r0, #4]
 80052f2:	00d2      	lsls	r2, r2, #3
 80052f4:	4331      	orrs	r1, r6
 80052f6:	6041      	str	r1, [r0, #4]
 80052f8:	1810      	adds	r0, r2, r0
 80052fa:	6882      	ldr	r2, [r0, #8]
 80052fc:	60e0      	str	r0, [r4, #12]
 80052fe:	60a2      	str	r2, [r4, #8]
 8005300:	6084      	str	r4, [r0, #8]
 8005302:	60d4      	str	r4, [r2, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	1099      	asrs	r1, r3, #2
 8005308:	408a      	lsls	r2, r1
 800530a:	4972      	ldr	r1, [pc, #456]	; (80054d4 <_malloc_r+0x31c>)
 800530c:	6848      	ldr	r0, [r1, #4]
 800530e:	4282      	cmp	r2, r0
 8005310:	d900      	bls.n	8005314 <_malloc_r+0x15c>
 8005312:	e097      	b.n	8005444 <_malloc_r+0x28c>
 8005314:	4210      	tst	r0, r2
 8005316:	d105      	bne.n	8005324 <_malloc_r+0x16c>
 8005318:	2403      	movs	r4, #3
 800531a:	43a3      	bics	r3, r4
 800531c:	0052      	lsls	r2, r2, #1
 800531e:	3304      	adds	r3, #4
 8005320:	4210      	tst	r0, r2
 8005322:	d0fb      	beq.n	800531c <_malloc_r+0x164>
 8005324:	469c      	mov	ip, r3
 8005326:	00d8      	lsls	r0, r3, #3
 8005328:	1808      	adds	r0, r1, r0
 800532a:	9002      	str	r0, [sp, #8]
 800532c:	9c02      	ldr	r4, [sp, #8]
 800532e:	68e4      	ldr	r4, [r4, #12]
 8005330:	9e02      	ldr	r6, [sp, #8]
 8005332:	42b4      	cmp	r4, r6
 8005334:	d158      	bne.n	80053e8 <_malloc_r+0x230>
 8005336:	0034      	movs	r4, r6
 8005338:	3408      	adds	r4, #8
 800533a:	9402      	str	r4, [sp, #8]
 800533c:	2401      	movs	r4, #1
 800533e:	44a4      	add	ip, r4
 8005340:	4664      	mov	r4, ip
 8005342:	2603      	movs	r6, #3
 8005344:	4234      	tst	r4, r6
 8005346:	d1f1      	bne.n	800532c <_malloc_r+0x174>
 8005348:	2403      	movs	r4, #3
 800534a:	4223      	tst	r3, r4
 800534c:	d174      	bne.n	8005438 <_malloc_r+0x280>
 800534e:	684b      	ldr	r3, [r1, #4]
 8005350:	4393      	bics	r3, r2
 8005352:	604b      	str	r3, [r1, #4]
 8005354:	6848      	ldr	r0, [r1, #4]
 8005356:	0052      	lsls	r2, r2, #1
 8005358:	4282      	cmp	r2, r0
 800535a:	d873      	bhi.n	8005444 <_malloc_r+0x28c>
 800535c:	2a00      	cmp	r2, #0
 800535e:	d071      	beq.n	8005444 <_malloc_r+0x28c>
 8005360:	4663      	mov	r3, ip
 8005362:	4210      	tst	r0, r2
 8005364:	d1de      	bne.n	8005324 <_malloc_r+0x16c>
 8005366:	3304      	adds	r3, #4
 8005368:	0052      	lsls	r2, r2, #1
 800536a:	e7fa      	b.n	8005362 <_malloc_r+0x1aa>
 800536c:	0a56      	lsrs	r6, r2, #9
 800536e:	2e04      	cmp	r6, #4
 8005370:	d816      	bhi.n	80053a0 <_malloc_r+0x1e8>
 8005372:	0991      	lsrs	r1, r2, #6
 8005374:	3138      	adds	r1, #56	; 0x38
 8005376:	00cf      	lsls	r7, r1, #3
 8005378:	183e      	adds	r6, r7, r0
 800537a:	2703      	movs	r7, #3
 800537c:	9602      	str	r6, [sp, #8]
 800537e:	46bc      	mov	ip, r7
 8005380:	68b6      	ldr	r6, [r6, #8]
 8005382:	9f02      	ldr	r7, [sp, #8]
 8005384:	42b7      	cmp	r7, r6
 8005386:	d127      	bne.n	80053d8 <_malloc_r+0x220>
 8005388:	2201      	movs	r2, #1
 800538a:	1089      	asrs	r1, r1, #2
 800538c:	408a      	lsls	r2, r1
 800538e:	6841      	ldr	r1, [r0, #4]
 8005390:	430a      	orrs	r2, r1
 8005392:	6042      	str	r2, [r0, #4]
 8005394:	9a02      	ldr	r2, [sp, #8]
 8005396:	60a6      	str	r6, [r4, #8]
 8005398:	60e2      	str	r2, [r4, #12]
 800539a:	6094      	str	r4, [r2, #8]
 800539c:	60f4      	str	r4, [r6, #12]
 800539e:	e7b1      	b.n	8005304 <_malloc_r+0x14c>
 80053a0:	2e14      	cmp	r6, #20
 80053a2:	d802      	bhi.n	80053aa <_malloc_r+0x1f2>
 80053a4:	0031      	movs	r1, r6
 80053a6:	315b      	adds	r1, #91	; 0x5b
 80053a8:	e7e5      	b.n	8005376 <_malloc_r+0x1be>
 80053aa:	2e54      	cmp	r6, #84	; 0x54
 80053ac:	d802      	bhi.n	80053b4 <_malloc_r+0x1fc>
 80053ae:	0b11      	lsrs	r1, r2, #12
 80053b0:	316e      	adds	r1, #110	; 0x6e
 80053b2:	e7e0      	b.n	8005376 <_malloc_r+0x1be>
 80053b4:	21aa      	movs	r1, #170	; 0xaa
 80053b6:	0049      	lsls	r1, r1, #1
 80053b8:	428e      	cmp	r6, r1
 80053ba:	d802      	bhi.n	80053c2 <_malloc_r+0x20a>
 80053bc:	0bd1      	lsrs	r1, r2, #15
 80053be:	3177      	adds	r1, #119	; 0x77
 80053c0:	e7d9      	b.n	8005376 <_malloc_r+0x1be>
 80053c2:	4f45      	ldr	r7, [pc, #276]	; (80054d8 <_malloc_r+0x320>)
 80053c4:	217e      	movs	r1, #126	; 0x7e
 80053c6:	42be      	cmp	r6, r7
 80053c8:	d8d5      	bhi.n	8005376 <_malloc_r+0x1be>
 80053ca:	0c91      	lsrs	r1, r2, #18
 80053cc:	317c      	adds	r1, #124	; 0x7c
 80053ce:	e7d2      	b.n	8005376 <_malloc_r+0x1be>
 80053d0:	68b6      	ldr	r6, [r6, #8]
 80053d2:	9902      	ldr	r1, [sp, #8]
 80053d4:	42b1      	cmp	r1, r6
 80053d6:	d004      	beq.n	80053e2 <_malloc_r+0x22a>
 80053d8:	4660      	mov	r0, ip
 80053da:	6871      	ldr	r1, [r6, #4]
 80053dc:	4381      	bics	r1, r0
 80053de:	428a      	cmp	r2, r1
 80053e0:	d3f6      	bcc.n	80053d0 <_malloc_r+0x218>
 80053e2:	68f2      	ldr	r2, [r6, #12]
 80053e4:	9202      	str	r2, [sp, #8]
 80053e6:	e7d5      	b.n	8005394 <_malloc_r+0x1dc>
 80053e8:	2603      	movs	r6, #3
 80053ea:	6867      	ldr	r7, [r4, #4]
 80053ec:	43b7      	bics	r7, r6
 80053ee:	9703      	str	r7, [sp, #12]
 80053f0:	1b7e      	subs	r6, r7, r5
 80053f2:	2e0f      	cmp	r6, #15
 80053f4:	dd11      	ble.n	800541a <_malloc_r+0x262>
 80053f6:	2201      	movs	r2, #1
 80053f8:	1963      	adds	r3, r4, r5
 80053fa:	4315      	orrs	r5, r2
 80053fc:	6065      	str	r5, [r4, #4]
 80053fe:	68e0      	ldr	r0, [r4, #12]
 8005400:	68a5      	ldr	r5, [r4, #8]
 8005402:	3108      	adds	r1, #8
 8005404:	60e8      	str	r0, [r5, #12]
 8005406:	4332      	orrs	r2, r6
 8005408:	6085      	str	r5, [r0, #8]
 800540a:	60cb      	str	r3, [r1, #12]
 800540c:	608b      	str	r3, [r1, #8]
 800540e:	60d9      	str	r1, [r3, #12]
 8005410:	6099      	str	r1, [r3, #8]
 8005412:	605a      	str	r2, [r3, #4]
 8005414:	003b      	movs	r3, r7
 8005416:	50e6      	str	r6, [r4, r3]
 8005418:	e703      	b.n	8005222 <_malloc_r+0x6a>
 800541a:	68e7      	ldr	r7, [r4, #12]
 800541c:	2e00      	cmp	r6, #0
 800541e:	db09      	blt.n	8005434 <_malloc_r+0x27c>
 8005420:	2201      	movs	r2, #1
 8005422:	9b03      	ldr	r3, [sp, #12]
 8005424:	18e3      	adds	r3, r4, r3
 8005426:	6859      	ldr	r1, [r3, #4]
 8005428:	430a      	orrs	r2, r1
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	68a3      	ldr	r3, [r4, #8]
 800542e:	60df      	str	r7, [r3, #12]
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	e6f6      	b.n	8005222 <_malloc_r+0x6a>
 8005434:	003c      	movs	r4, r7
 8005436:	e77b      	b.n	8005330 <_malloc_r+0x178>
 8005438:	3808      	subs	r0, #8
 800543a:	6884      	ldr	r4, [r0, #8]
 800543c:	3b01      	subs	r3, #1
 800543e:	42a0      	cmp	r0, r4
 8005440:	d082      	beq.n	8005348 <_malloc_r+0x190>
 8005442:	e787      	b.n	8005354 <_malloc_r+0x19c>
 8005444:	2303      	movs	r3, #3
 8005446:	688f      	ldr	r7, [r1, #8]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	439a      	bics	r2, r3
 800544c:	9202      	str	r2, [sp, #8]
 800544e:	4295      	cmp	r5, r2
 8005450:	d803      	bhi.n	800545a <_malloc_r+0x2a2>
 8005452:	1b52      	subs	r2, r2, r5
 8005454:	2a0f      	cmp	r2, #15
 8005456:	dd00      	ble.n	800545a <_malloc_r+0x2a2>
 8005458:	e09f      	b.n	800559a <_malloc_r+0x3e2>
 800545a:	9b02      	ldr	r3, [sp, #8]
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	9303      	str	r3, [sp, #12]
 8005460:	4b1f      	ldr	r3, [pc, #124]	; (80054e0 <_malloc_r+0x328>)
 8005462:	681e      	ldr	r6, [r3, #0]
 8005464:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <_malloc_r+0x32c>)
 8005466:	3610      	adds	r6, #16
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	1976      	adds	r6, r6, r5
 800546c:	3301      	adds	r3, #1
 800546e:	d005      	beq.n	800547c <_malloc_r+0x2c4>
 8005470:	4b1d      	ldr	r3, [pc, #116]	; (80054e8 <_malloc_r+0x330>)
 8005472:	3b01      	subs	r3, #1
 8005474:	199e      	adds	r6, r3, r6
 8005476:	4b1c      	ldr	r3, [pc, #112]	; (80054e8 <_malloc_r+0x330>)
 8005478:	425b      	negs	r3, r3
 800547a:	401e      	ands	r6, r3
 800547c:	0031      	movs	r1, r6
 800547e:	9801      	ldr	r0, [sp, #4]
 8005480:	f000 f9b8 	bl	80057f4 <_sbrk_r>
 8005484:	0004      	movs	r4, r0
 8005486:	1c43      	adds	r3, r0, #1
 8005488:	d05f      	beq.n	800554a <_malloc_r+0x392>
 800548a:	9b03      	ldr	r3, [sp, #12]
 800548c:	4283      	cmp	r3, r0
 800548e:	d902      	bls.n	8005496 <_malloc_r+0x2de>
 8005490:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <_malloc_r+0x31c>)
 8005492:	429f      	cmp	r7, r3
 8005494:	d159      	bne.n	800554a <_malloc_r+0x392>
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <_malloc_r+0x334>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	18b1      	adds	r1, r6, r2
 800549c:	6019      	str	r1, [r3, #0]
 800549e:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <_malloc_r+0x330>)
 80054a0:	1e5a      	subs	r2, r3, #1
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	d127      	bne.n	80054f8 <_malloc_r+0x340>
 80054a8:	4213      	tst	r3, r2
 80054aa:	d125      	bne.n	80054f8 <_malloc_r+0x340>
 80054ac:	9a02      	ldr	r2, [sp, #8]
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <_malloc_r+0x31c>)
 80054b0:	1992      	adds	r2, r2, r6
 80054b2:	2601      	movs	r6, #1
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	4316      	orrs	r6, r2
 80054b8:	605e      	str	r6, [r3, #4]
 80054ba:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <_malloc_r+0x334>)
 80054bc:	4a0c      	ldr	r2, [pc, #48]	; (80054f0 <_malloc_r+0x338>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6811      	ldr	r1, [r2, #0]
 80054c2:	428b      	cmp	r3, r1
 80054c4:	d900      	bls.n	80054c8 <_malloc_r+0x310>
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	4a0a      	ldr	r2, [pc, #40]	; (80054f4 <_malloc_r+0x33c>)
 80054ca:	6811      	ldr	r1, [r2, #0]
 80054cc:	428b      	cmp	r3, r1
 80054ce:	d93c      	bls.n	800554a <_malloc_r+0x392>
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e03a      	b.n	800554a <_malloc_r+0x392>
 80054d4:	200002c4 	.word	0x200002c4
 80054d8:	00000554 	.word	0x00000554
 80054dc:	000001ff 	.word	0x000001ff
 80054e0:	20000ba0 	.word	0x20000ba0
 80054e4:	200006cc 	.word	0x200006cc
 80054e8:	00001000 	.word	0x00001000
 80054ec:	20000b70 	.word	0x20000b70
 80054f0:	20000b98 	.word	0x20000b98
 80054f4:	20000b9c 	.word	0x20000b9c
 80054f8:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <_malloc_r+0x3f8>)
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	3001      	adds	r0, #1
 80054fe:	d132      	bne.n	8005566 <_malloc_r+0x3ae>
 8005500:	601c      	str	r4, [r3, #0]
 8005502:	2007      	movs	r0, #7
 8005504:	4020      	ands	r0, r4
 8005506:	d002      	beq.n	800550e <_malloc_r+0x356>
 8005508:	2308      	movs	r3, #8
 800550a:	1a18      	subs	r0, r3, r0
 800550c:	1824      	adds	r4, r4, r0
 800550e:	4b29      	ldr	r3, [pc, #164]	; (80055b4 <_malloc_r+0x3fc>)
 8005510:	19a6      	adds	r6, r4, r6
 8005512:	1818      	adds	r0, r3, r0
 8005514:	4016      	ands	r6, r2
 8005516:	1b86      	subs	r6, r0, r6
 8005518:	0031      	movs	r1, r6
 800551a:	9801      	ldr	r0, [sp, #4]
 800551c:	f000 f96a 	bl	80057f4 <_sbrk_r>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d101      	bne.n	8005528 <_malloc_r+0x370>
 8005524:	0020      	movs	r0, r4
 8005526:	2600      	movs	r6, #0
 8005528:	4a23      	ldr	r2, [pc, #140]	; (80055b8 <_malloc_r+0x400>)
 800552a:	1b00      	subs	r0, r0, r4
 800552c:	6813      	ldr	r3, [r2, #0]
 800552e:	199b      	adds	r3, r3, r6
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	2301      	movs	r3, #1
 8005534:	4a21      	ldr	r2, [pc, #132]	; (80055bc <_malloc_r+0x404>)
 8005536:	1986      	adds	r6, r0, r6
 8005538:	431e      	orrs	r6, r3
 800553a:	6094      	str	r4, [r2, #8]
 800553c:	6066      	str	r6, [r4, #4]
 800553e:	4297      	cmp	r7, r2
 8005540:	d0bb      	beq.n	80054ba <_malloc_r+0x302>
 8005542:	9a02      	ldr	r2, [sp, #8]
 8005544:	2a0f      	cmp	r2, #15
 8005546:	d814      	bhi.n	8005572 <_malloc_r+0x3ba>
 8005548:	6063      	str	r3, [r4, #4]
 800554a:	2203      	movs	r2, #3
 800554c:	4b1b      	ldr	r3, [pc, #108]	; (80055bc <_malloc_r+0x404>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4393      	bics	r3, r2
 8005554:	1b5a      	subs	r2, r3, r5
 8005556:	429d      	cmp	r5, r3
 8005558:	d801      	bhi.n	800555e <_malloc_r+0x3a6>
 800555a:	2a0f      	cmp	r2, #15
 800555c:	dc1d      	bgt.n	800559a <_malloc_r+0x3e2>
 800555e:	9801      	ldr	r0, [sp, #4]
 8005560:	f7fd f822 	bl	80025a8 <__malloc_unlock>
 8005564:	e635      	b.n	80051d2 <_malloc_r+0x1a>
 8005566:	9b03      	ldr	r3, [sp, #12]
 8005568:	1ae3      	subs	r3, r4, r3
 800556a:	185b      	adds	r3, r3, r1
 800556c:	4912      	ldr	r1, [pc, #72]	; (80055b8 <_malloc_r+0x400>)
 800556e:	600b      	str	r3, [r1, #0]
 8005570:	e7c7      	b.n	8005502 <_malloc_r+0x34a>
 8005572:	2207      	movs	r2, #7
 8005574:	9e02      	ldr	r6, [sp, #8]
 8005576:	3e0c      	subs	r6, #12
 8005578:	4396      	bics	r6, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	4013      	ands	r3, r2
 800557e:	2205      	movs	r2, #5
 8005580:	4333      	orrs	r3, r6
 8005582:	607b      	str	r3, [r7, #4]
 8005584:	19bb      	adds	r3, r7, r6
 8005586:	605a      	str	r2, [r3, #4]
 8005588:	609a      	str	r2, [r3, #8]
 800558a:	2e0f      	cmp	r6, #15
 800558c:	d995      	bls.n	80054ba <_malloc_r+0x302>
 800558e:	0039      	movs	r1, r7
 8005590:	9801      	ldr	r0, [sp, #4]
 8005592:	3108      	adds	r1, #8
 8005594:	f7ff fada 	bl	8004b4c <_free_r>
 8005598:	e78f      	b.n	80054ba <_malloc_r+0x302>
 800559a:	2301      	movs	r3, #1
 800559c:	0018      	movs	r0, r3
 800559e:	4907      	ldr	r1, [pc, #28]	; (80055bc <_malloc_r+0x404>)
 80055a0:	4328      	orrs	r0, r5
 80055a2:	688c      	ldr	r4, [r1, #8]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	1965      	adds	r5, r4, r5
 80055a8:	6060      	str	r0, [r4, #4]
 80055aa:	608d      	str	r5, [r1, #8]
 80055ac:	606b      	str	r3, [r5, #4]
 80055ae:	e638      	b.n	8005222 <_malloc_r+0x6a>
 80055b0:	200006cc 	.word	0x200006cc
 80055b4:	00001000 	.word	0x00001000
 80055b8:	20000b70 	.word	0x20000b70
 80055bc:	200002c4 	.word	0x200002c4

080055c0 <memcpy>:
 80055c0:	2300      	movs	r3, #0
 80055c2:	b510      	push	{r4, lr}
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d100      	bne.n	80055ca <memcpy+0xa>
 80055c8:	bd10      	pop	{r4, pc}
 80055ca:	5ccc      	ldrb	r4, [r1, r3]
 80055cc:	54c4      	strb	r4, [r0, r3]
 80055ce:	3301      	adds	r3, #1
 80055d0:	e7f8      	b.n	80055c4 <memcpy+0x4>

080055d2 <memset>:
 80055d2:	0003      	movs	r3, r0
 80055d4:	1882      	adds	r2, r0, r2
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d100      	bne.n	80055dc <memset+0xa>
 80055da:	4770      	bx	lr
 80055dc:	7019      	strb	r1, [r3, #0]
 80055de:	3301      	adds	r3, #1
 80055e0:	e7f9      	b.n	80055d6 <memset+0x4>
	...

080055e4 <_open_r>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	0005      	movs	r5, r0
 80055e8:	0008      	movs	r0, r1
 80055ea:	0011      	movs	r1, r2
 80055ec:	2200      	movs	r2, #0
 80055ee:	4c06      	ldr	r4, [pc, #24]	; (8005608 <_open_r+0x24>)
 80055f0:	6022      	str	r2, [r4, #0]
 80055f2:	001a      	movs	r2, r3
 80055f4:	f7fc fd90 	bl	8002118 <_open>
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	d103      	bne.n	8005604 <_open_r+0x20>
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d000      	beq.n	8005604 <_open_r+0x20>
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	bd70      	pop	{r4, r5, r6, pc}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	20000e08 	.word	0x20000e08

0800560c <_putc_r>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	0006      	movs	r6, r0
 8005610:	000d      	movs	r5, r1
 8005612:	0014      	movs	r4, r2
 8005614:	2800      	cmp	r0, #0
 8005616:	d004      	beq.n	8005622 <_putc_r+0x16>
 8005618:	6983      	ldr	r3, [r0, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <_putc_r+0x16>
 800561e:	f7ff f91f 	bl	8004860 <__sinit>
 8005622:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <_putc_r+0x88>)
 8005624:	429c      	cmp	r4, r3
 8005626:	d124      	bne.n	8005672 <_putc_r+0x66>
 8005628:	6874      	ldr	r4, [r6, #4]
 800562a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800562c:	07db      	lsls	r3, r3, #31
 800562e:	d405      	bmi.n	800563c <_putc_r+0x30>
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	059b      	lsls	r3, r3, #22
 8005634:	d402      	bmi.n	800563c <_putc_r+0x30>
 8005636:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005638:	f7ff fd34 	bl	80050a4 <__retarget_lock_acquire_recursive>
 800563c:	68a3      	ldr	r3, [r4, #8]
 800563e:	3b01      	subs	r3, #1
 8005640:	60a3      	str	r3, [r4, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	da05      	bge.n	8005652 <_putc_r+0x46>
 8005646:	69a2      	ldr	r2, [r4, #24]
 8005648:	4293      	cmp	r3, r2
 800564a:	db1c      	blt.n	8005686 <_putc_r+0x7a>
 800564c:	b2eb      	uxtb	r3, r5
 800564e:	2b0a      	cmp	r3, #10
 8005650:	d019      	beq.n	8005686 <_putc_r+0x7a>
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	6022      	str	r2, [r4, #0]
 8005658:	701d      	strb	r5, [r3, #0]
 800565a:	b2ed      	uxtb	r5, r5
 800565c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800565e:	07db      	lsls	r3, r3, #31
 8005660:	d405      	bmi.n	800566e <_putc_r+0x62>
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	059b      	lsls	r3, r3, #22
 8005666:	d402      	bmi.n	800566e <_putc_r+0x62>
 8005668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800566a:	f7ff fd1c 	bl	80050a6 <__retarget_lock_release_recursive>
 800566e:	0028      	movs	r0, r5
 8005670:	bd70      	pop	{r4, r5, r6, pc}
 8005672:	4b09      	ldr	r3, [pc, #36]	; (8005698 <_putc_r+0x8c>)
 8005674:	429c      	cmp	r4, r3
 8005676:	d101      	bne.n	800567c <_putc_r+0x70>
 8005678:	68b4      	ldr	r4, [r6, #8]
 800567a:	e7d6      	b.n	800562a <_putc_r+0x1e>
 800567c:	4b07      	ldr	r3, [pc, #28]	; (800569c <_putc_r+0x90>)
 800567e:	429c      	cmp	r4, r3
 8005680:	d1d3      	bne.n	800562a <_putc_r+0x1e>
 8005682:	68f4      	ldr	r4, [r6, #12]
 8005684:	e7d1      	b.n	800562a <_putc_r+0x1e>
 8005686:	0029      	movs	r1, r5
 8005688:	0022      	movs	r2, r4
 800568a:	0030      	movs	r0, r6
 800568c:	f000 fa0a 	bl	8005aa4 <__swbuf_r>
 8005690:	0005      	movs	r5, r0
 8005692:	e7e3      	b.n	800565c <_putc_r+0x50>
 8005694:	080064bc 	.word	0x080064bc
 8005698:	080064dc 	.word	0x080064dc
 800569c:	0800649c 	.word	0x0800649c

080056a0 <lflush>:
 80056a0:	2209      	movs	r2, #9
 80056a2:	b510      	push	{r4, lr}
 80056a4:	8983      	ldrh	r3, [r0, #12]
 80056a6:	4013      	ands	r3, r2
 80056a8:	2200      	movs	r2, #0
 80056aa:	2b09      	cmp	r3, #9
 80056ac:	d102      	bne.n	80056b4 <lflush+0x14>
 80056ae:	f7ff f861 	bl	8004774 <fflush>
 80056b2:	0002      	movs	r2, r0
 80056b4:	0010      	movs	r0, r2
 80056b6:	bd10      	pop	{r4, pc}

080056b8 <__srefill_r>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	0005      	movs	r5, r0
 80056bc:	000c      	movs	r4, r1
 80056be:	2800      	cmp	r0, #0
 80056c0:	d004      	beq.n	80056cc <__srefill_r+0x14>
 80056c2:	6983      	ldr	r3, [r0, #24]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <__srefill_r+0x14>
 80056c8:	f7ff f8ca 	bl	8004860 <__sinit>
 80056cc:	4b43      	ldr	r3, [pc, #268]	; (80057dc <__srefill_r+0x124>)
 80056ce:	429c      	cmp	r4, r3
 80056d0:	d116      	bne.n	8005700 <__srefill_r+0x48>
 80056d2:	686c      	ldr	r4, [r5, #4]
 80056d4:	230c      	movs	r3, #12
 80056d6:	5ee2      	ldrsh	r2, [r4, r3]
 80056d8:	2380      	movs	r3, #128	; 0x80
 80056da:	019b      	lsls	r3, r3, #6
 80056dc:	421a      	tst	r2, r3
 80056de:	d105      	bne.n	80056ec <__srefill_r+0x34>
 80056e0:	4313      	orrs	r3, r2
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056e6:	4b3e      	ldr	r3, [pc, #248]	; (80057e0 <__srefill_r+0x128>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	6663      	str	r3, [r4, #100]	; 0x64
 80056ec:	2300      	movs	r3, #0
 80056ee:	6063      	str	r3, [r4, #4]
 80056f0:	230c      	movs	r3, #12
 80056f2:	5ee2      	ldrsh	r2, [r4, r3]
 80056f4:	b293      	uxth	r3, r2
 80056f6:	0699      	lsls	r1, r3, #26
 80056f8:	d50c      	bpl.n	8005714 <__srefill_r+0x5c>
 80056fa:	2001      	movs	r0, #1
 80056fc:	4240      	negs	r0, r0
 80056fe:	e068      	b.n	80057d2 <__srefill_r+0x11a>
 8005700:	4b38      	ldr	r3, [pc, #224]	; (80057e4 <__srefill_r+0x12c>)
 8005702:	429c      	cmp	r4, r3
 8005704:	d101      	bne.n	800570a <__srefill_r+0x52>
 8005706:	68ac      	ldr	r4, [r5, #8]
 8005708:	e7e4      	b.n	80056d4 <__srefill_r+0x1c>
 800570a:	4b37      	ldr	r3, [pc, #220]	; (80057e8 <__srefill_r+0x130>)
 800570c:	429c      	cmp	r4, r3
 800570e:	d1e1      	bne.n	80056d4 <__srefill_r+0x1c>
 8005710:	68ec      	ldr	r4, [r5, #12]
 8005712:	e7df      	b.n	80056d4 <__srefill_r+0x1c>
 8005714:	0759      	lsls	r1, r3, #29
 8005716:	d44a      	bmi.n	80057ae <__srefill_r+0xf6>
 8005718:	06d9      	lsls	r1, r3, #27
 800571a:	d405      	bmi.n	8005728 <__srefill_r+0x70>
 800571c:	2309      	movs	r3, #9
 800571e:	602b      	str	r3, [r5, #0]
 8005720:	3337      	adds	r3, #55	; 0x37
 8005722:	4313      	orrs	r3, r2
 8005724:	81a3      	strh	r3, [r4, #12]
 8005726:	e7e8      	b.n	80056fa <__srefill_r+0x42>
 8005728:	2608      	movs	r6, #8
 800572a:	4233      	tst	r3, r6
 800572c:	d00a      	beq.n	8005744 <__srefill_r+0x8c>
 800572e:	0021      	movs	r1, r4
 8005730:	0028      	movs	r0, r5
 8005732:	f7fe ffdf 	bl	80046f4 <_fflush_r>
 8005736:	2800      	cmp	r0, #0
 8005738:	d1df      	bne.n	80056fa <__srefill_r+0x42>
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	60a0      	str	r0, [r4, #8]
 800573e:	43b3      	bics	r3, r6
 8005740:	81a3      	strh	r3, [r4, #12]
 8005742:	61a0      	str	r0, [r4, #24]
 8005744:	2304      	movs	r3, #4
 8005746:	89a2      	ldrh	r2, [r4, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	81a3      	strh	r3, [r4, #12]
 800574c:	6923      	ldr	r3, [r4, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d103      	bne.n	800575a <__srefill_r+0xa2>
 8005752:	0021      	movs	r1, r4
 8005754:	0028      	movs	r0, r5
 8005756:	f7ff fcd7 	bl	8005108 <__smakebuf_r>
 800575a:	230c      	movs	r3, #12
 800575c:	5ee7      	ldrsh	r7, [r4, r3]
 800575e:	b2be      	uxth	r6, r7
 8005760:	07b3      	lsls	r3, r6, #30
 8005762:	d00f      	beq.n	8005784 <__srefill_r+0xcc>
 8005764:	2301      	movs	r3, #1
 8005766:	81a3      	strh	r3, [r4, #12]
 8005768:	4b20      	ldr	r3, [pc, #128]	; (80057ec <__srefill_r+0x134>)
 800576a:	4921      	ldr	r1, [pc, #132]	; (80057f0 <__srefill_r+0x138>)
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	f7ff fc35 	bl	8004fdc <_fwalk>
 8005772:	2309      	movs	r3, #9
 8005774:	81a7      	strh	r7, [r4, #12]
 8005776:	401e      	ands	r6, r3
 8005778:	429e      	cmp	r6, r3
 800577a:	d103      	bne.n	8005784 <__srefill_r+0xcc>
 800577c:	0021      	movs	r1, r4
 800577e:	0028      	movs	r0, r5
 8005780:	f7fe ff20 	bl	80045c4 <__sflush_r>
 8005784:	6923      	ldr	r3, [r4, #16]
 8005786:	6922      	ldr	r2, [r4, #16]
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	0028      	movs	r0, r5
 800578c:	6963      	ldr	r3, [r4, #20]
 800578e:	6a21      	ldr	r1, [r4, #32]
 8005790:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005792:	47a8      	blx	r5
 8005794:	0002      	movs	r2, r0
 8005796:	6060      	str	r0, [r4, #4]
 8005798:	2000      	movs	r0, #0
 800579a:	4282      	cmp	r2, r0
 800579c:	dc19      	bgt.n	80057d2 <__srefill_r+0x11a>
 800579e:	89a1      	ldrh	r1, [r4, #12]
 80057a0:	4282      	cmp	r2, r0
 80057a2:	d117      	bne.n	80057d4 <__srefill_r+0x11c>
 80057a4:	2320      	movs	r3, #32
 80057a6:	430b      	orrs	r3, r1
 80057a8:	81a3      	strh	r3, [r4, #12]
 80057aa:	3801      	subs	r0, #1
 80057ac:	e011      	b.n	80057d2 <__srefill_r+0x11a>
 80057ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057b0:	2900      	cmp	r1, #0
 80057b2:	d0cb      	beq.n	800574c <__srefill_r+0x94>
 80057b4:	0023      	movs	r3, r4
 80057b6:	3344      	adds	r3, #68	; 0x44
 80057b8:	4299      	cmp	r1, r3
 80057ba:	d002      	beq.n	80057c2 <__srefill_r+0x10a>
 80057bc:	0028      	movs	r0, r5
 80057be:	f7ff f9c5 	bl	8004b4c <_free_r>
 80057c2:	2000      	movs	r0, #0
 80057c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057c6:	6360      	str	r0, [r4, #52]	; 0x34
 80057c8:	6063      	str	r3, [r4, #4]
 80057ca:	4283      	cmp	r3, r0
 80057cc:	d0be      	beq.n	800574c <__srefill_r+0x94>
 80057ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057d4:	2340      	movs	r3, #64	; 0x40
 80057d6:	6060      	str	r0, [r4, #4]
 80057d8:	430b      	orrs	r3, r1
 80057da:	e7a3      	b.n	8005724 <__srefill_r+0x6c>
 80057dc:	080064bc 	.word	0x080064bc
 80057e0:	ffffdfff 	.word	0xffffdfff
 80057e4:	080064dc 	.word	0x080064dc
 80057e8:	0800649c 	.word	0x0800649c
 80057ec:	080064fc 	.word	0x080064fc
 80057f0:	080056a1 	.word	0x080056a1

080057f4 <_sbrk_r>:
 80057f4:	2300      	movs	r3, #0
 80057f6:	b570      	push	{r4, r5, r6, lr}
 80057f8:	4c06      	ldr	r4, [pc, #24]	; (8005814 <_sbrk_r+0x20>)
 80057fa:	0005      	movs	r5, r0
 80057fc:	0008      	movs	r0, r1
 80057fe:	6023      	str	r3, [r4, #0]
 8005800:	f7fc fe4e 	bl	80024a0 <_sbrk>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d103      	bne.n	8005810 <_sbrk_r+0x1c>
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d000      	beq.n	8005810 <_sbrk_r+0x1c>
 800580e:	602b      	str	r3, [r5, #0]
 8005810:	bd70      	pop	{r4, r5, r6, pc}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	20000e08 	.word	0x20000e08

08005818 <setbuf>:
 8005818:	424a      	negs	r2, r1
 800581a:	414a      	adcs	r2, r1
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	b510      	push	{r4, lr}
 8005820:	0052      	lsls	r2, r2, #1
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	f000 f802 	bl	800582c <setvbuf>
 8005828:	bd10      	pop	{r4, pc}
	...

0800582c <setvbuf>:
 800582c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800582e:	001d      	movs	r5, r3
 8005830:	4b60      	ldr	r3, [pc, #384]	; (80059b4 <setvbuf+0x188>)
 8005832:	b085      	sub	sp, #20
 8005834:	681e      	ldr	r6, [r3, #0]
 8005836:	0004      	movs	r4, r0
 8005838:	000f      	movs	r7, r1
 800583a:	9200      	str	r2, [sp, #0]
 800583c:	2e00      	cmp	r6, #0
 800583e:	d005      	beq.n	800584c <setvbuf+0x20>
 8005840:	69b3      	ldr	r3, [r6, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d102      	bne.n	800584c <setvbuf+0x20>
 8005846:	0030      	movs	r0, r6
 8005848:	f7ff f80a 	bl	8004860 <__sinit>
 800584c:	4b5a      	ldr	r3, [pc, #360]	; (80059b8 <setvbuf+0x18c>)
 800584e:	429c      	cmp	r4, r3
 8005850:	d162      	bne.n	8005918 <setvbuf+0xec>
 8005852:	6874      	ldr	r4, [r6, #4]
 8005854:	9b00      	ldr	r3, [sp, #0]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d005      	beq.n	8005866 <setvbuf+0x3a>
 800585a:	2b01      	cmp	r3, #1
 800585c:	d900      	bls.n	8005860 <setvbuf+0x34>
 800585e:	e0a3      	b.n	80059a8 <setvbuf+0x17c>
 8005860:	2d00      	cmp	r5, #0
 8005862:	da00      	bge.n	8005866 <setvbuf+0x3a>
 8005864:	e0a0      	b.n	80059a8 <setvbuf+0x17c>
 8005866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005868:	07db      	lsls	r3, r3, #31
 800586a:	d405      	bmi.n	8005878 <setvbuf+0x4c>
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	059b      	lsls	r3, r3, #22
 8005870:	d402      	bmi.n	8005878 <setvbuf+0x4c>
 8005872:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005874:	f7ff fc16 	bl	80050a4 <__retarget_lock_acquire_recursive>
 8005878:	0021      	movs	r1, r4
 800587a:	0030      	movs	r0, r6
 800587c:	f7fe ff3a 	bl	80046f4 <_fflush_r>
 8005880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005882:	2900      	cmp	r1, #0
 8005884:	d008      	beq.n	8005898 <setvbuf+0x6c>
 8005886:	0023      	movs	r3, r4
 8005888:	3344      	adds	r3, #68	; 0x44
 800588a:	4299      	cmp	r1, r3
 800588c:	d002      	beq.n	8005894 <setvbuf+0x68>
 800588e:	0030      	movs	r0, r6
 8005890:	f7ff f95c 	bl	8004b4c <_free_r>
 8005894:	2300      	movs	r3, #0
 8005896:	6363      	str	r3, [r4, #52]	; 0x34
 8005898:	2300      	movs	r3, #0
 800589a:	61a3      	str	r3, [r4, #24]
 800589c:	6063      	str	r3, [r4, #4]
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	d503      	bpl.n	80058ac <setvbuf+0x80>
 80058a4:	6921      	ldr	r1, [r4, #16]
 80058a6:	0030      	movs	r0, r6
 80058a8:	f7ff f950 	bl	8004b4c <_free_r>
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	4a43      	ldr	r2, [pc, #268]	; (80059bc <setvbuf+0x190>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	81a3      	strh	r3, [r4, #12]
 80058b4:	9b00      	ldr	r3, [sp, #0]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d100      	bne.n	80058bc <setvbuf+0x90>
 80058ba:	e06f      	b.n	800599c <setvbuf+0x170>
 80058bc:	ab03      	add	r3, sp, #12
 80058be:	aa02      	add	r2, sp, #8
 80058c0:	0021      	movs	r1, r4
 80058c2:	0030      	movs	r0, r6
 80058c4:	f7ff fbf0 	bl	80050a8 <__swhatbuf_r>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	4318      	orrs	r0, r3
 80058cc:	81a0      	strh	r0, [r4, #12]
 80058ce:	2d00      	cmp	r5, #0
 80058d0:	d12c      	bne.n	800592c <setvbuf+0x100>
 80058d2:	9d02      	ldr	r5, [sp, #8]
 80058d4:	0028      	movs	r0, r5
 80058d6:	f7ff fc5b 	bl	8005190 <malloc>
 80058da:	9501      	str	r5, [sp, #4]
 80058dc:	1e07      	subs	r7, r0, #0
 80058de:	d157      	bne.n	8005990 <setvbuf+0x164>
 80058e0:	9b02      	ldr	r3, [sp, #8]
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	42ab      	cmp	r3, r5
 80058e6:	d14e      	bne.n	8005986 <setvbuf+0x15a>
 80058e8:	2501      	movs	r5, #1
 80058ea:	426d      	negs	r5, r5
 80058ec:	2302      	movs	r3, #2
 80058ee:	89a2      	ldrh	r2, [r4, #12]
 80058f0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80058f2:	4313      	orrs	r3, r2
 80058f4:	2200      	movs	r2, #0
 80058f6:	60a2      	str	r2, [r4, #8]
 80058f8:	0022      	movs	r2, r4
 80058fa:	3247      	adds	r2, #71	; 0x47
 80058fc:	6022      	str	r2, [r4, #0]
 80058fe:	6122      	str	r2, [r4, #16]
 8005900:	2201      	movs	r2, #1
 8005902:	b21b      	sxth	r3, r3
 8005904:	81a3      	strh	r3, [r4, #12]
 8005906:	6162      	str	r2, [r4, #20]
 8005908:	4211      	tst	r1, r2
 800590a:	d139      	bne.n	8005980 <setvbuf+0x154>
 800590c:	059b      	lsls	r3, r3, #22
 800590e:	d437      	bmi.n	8005980 <setvbuf+0x154>
 8005910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005912:	f7ff fbc8 	bl	80050a6 <__retarget_lock_release_recursive>
 8005916:	e033      	b.n	8005980 <setvbuf+0x154>
 8005918:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <setvbuf+0x194>)
 800591a:	429c      	cmp	r4, r3
 800591c:	d101      	bne.n	8005922 <setvbuf+0xf6>
 800591e:	68b4      	ldr	r4, [r6, #8]
 8005920:	e798      	b.n	8005854 <setvbuf+0x28>
 8005922:	4b28      	ldr	r3, [pc, #160]	; (80059c4 <setvbuf+0x198>)
 8005924:	429c      	cmp	r4, r3
 8005926:	d195      	bne.n	8005854 <setvbuf+0x28>
 8005928:	68f4      	ldr	r4, [r6, #12]
 800592a:	e793      	b.n	8005854 <setvbuf+0x28>
 800592c:	2f00      	cmp	r7, #0
 800592e:	d0d1      	beq.n	80058d4 <setvbuf+0xa8>
 8005930:	69b3      	ldr	r3, [r6, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d102      	bne.n	800593c <setvbuf+0x110>
 8005936:	0030      	movs	r0, r6
 8005938:	f7fe ff92 	bl	8004860 <__sinit>
 800593c:	9b02      	ldr	r3, [sp, #8]
 800593e:	429d      	cmp	r5, r3
 8005940:	d004      	beq.n	800594c <setvbuf+0x120>
 8005942:	2380      	movs	r3, #128	; 0x80
 8005944:	89a2      	ldrh	r2, [r4, #12]
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	4313      	orrs	r3, r2
 800594a:	81a3      	strh	r3, [r4, #12]
 800594c:	9b00      	ldr	r3, [sp, #0]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d103      	bne.n	800595a <setvbuf+0x12e>
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	9a00      	ldr	r2, [sp, #0]
 8005956:	431a      	orrs	r2, r3
 8005958:	81a2      	strh	r2, [r4, #12]
 800595a:	2308      	movs	r3, #8
 800595c:	89a2      	ldrh	r2, [r4, #12]
 800595e:	6027      	str	r7, [r4, #0]
 8005960:	6127      	str	r7, [r4, #16]
 8005962:	6165      	str	r5, [r4, #20]
 8005964:	4013      	ands	r3, r2
 8005966:	d01d      	beq.n	80059a4 <setvbuf+0x178>
 8005968:	07d3      	lsls	r3, r2, #31
 800596a:	d519      	bpl.n	80059a0 <setvbuf+0x174>
 800596c:	2300      	movs	r3, #0
 800596e:	426d      	negs	r5, r5
 8005970:	60a3      	str	r3, [r4, #8]
 8005972:	61a5      	str	r5, [r4, #24]
 8005974:	2501      	movs	r5, #1
 8005976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005978:	401d      	ands	r5, r3
 800597a:	d118      	bne.n	80059ae <setvbuf+0x182>
 800597c:	0593      	lsls	r3, r2, #22
 800597e:	d5c7      	bpl.n	8005910 <setvbuf+0xe4>
 8005980:	0028      	movs	r0, r5
 8005982:	b005      	add	sp, #20
 8005984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005986:	9801      	ldr	r0, [sp, #4]
 8005988:	f7ff fc02 	bl	8005190 <malloc>
 800598c:	1e07      	subs	r7, r0, #0
 800598e:	d0ab      	beq.n	80058e8 <setvbuf+0xbc>
 8005990:	2380      	movs	r3, #128	; 0x80
 8005992:	89a2      	ldrh	r2, [r4, #12]
 8005994:	9d01      	ldr	r5, [sp, #4]
 8005996:	4313      	orrs	r3, r2
 8005998:	81a3      	strh	r3, [r4, #12]
 800599a:	e7c9      	b.n	8005930 <setvbuf+0x104>
 800599c:	2500      	movs	r5, #0
 800599e:	e7a5      	b.n	80058ec <setvbuf+0xc0>
 80059a0:	60a5      	str	r5, [r4, #8]
 80059a2:	e7e7      	b.n	8005974 <setvbuf+0x148>
 80059a4:	60a3      	str	r3, [r4, #8]
 80059a6:	e7e5      	b.n	8005974 <setvbuf+0x148>
 80059a8:	2501      	movs	r5, #1
 80059aa:	426d      	negs	r5, r5
 80059ac:	e7e8      	b.n	8005980 <setvbuf+0x154>
 80059ae:	2500      	movs	r5, #0
 80059b0:	e7e6      	b.n	8005980 <setvbuf+0x154>
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	200001d0 	.word	0x200001d0
 80059b8:	080064bc 	.word	0x080064bc
 80059bc:	fffff35c 	.word	0xfffff35c
 80059c0:	080064dc 	.word	0x080064dc
 80059c4:	0800649c 	.word	0x0800649c

080059c8 <__sread>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	000c      	movs	r4, r1
 80059cc:	250e      	movs	r5, #14
 80059ce:	5f49      	ldrsh	r1, [r1, r5]
 80059d0:	f000 fa4c 	bl	8005e6c <_read_r>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	db03      	blt.n	80059e0 <__sread+0x18>
 80059d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059da:	181b      	adds	r3, r3, r0
 80059dc:	6563      	str	r3, [r4, #84]	; 0x54
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	4a02      	ldr	r2, [pc, #8]	; (80059ec <__sread+0x24>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	81a3      	strh	r3, [r4, #12]
 80059e8:	e7f9      	b.n	80059de <__sread+0x16>
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	ffffefff 	.word	0xffffefff

080059f0 <__swrite>:
 80059f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f2:	001f      	movs	r7, r3
 80059f4:	898b      	ldrh	r3, [r1, #12]
 80059f6:	0005      	movs	r5, r0
 80059f8:	000c      	movs	r4, r1
 80059fa:	0016      	movs	r6, r2
 80059fc:	05db      	lsls	r3, r3, #23
 80059fe:	d505      	bpl.n	8005a0c <__swrite+0x1c>
 8005a00:	230e      	movs	r3, #14
 8005a02:	5ec9      	ldrsh	r1, [r1, r3]
 8005a04:	2200      	movs	r2, #0
 8005a06:	2302      	movs	r3, #2
 8005a08:	f000 fa1c 	bl	8005e44 <_lseek_r>
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	4a05      	ldr	r2, [pc, #20]	; (8005a24 <__swrite+0x34>)
 8005a10:	0028      	movs	r0, r5
 8005a12:	4013      	ands	r3, r2
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	0032      	movs	r2, r6
 8005a18:	230e      	movs	r3, #14
 8005a1a:	5ee1      	ldrsh	r1, [r4, r3]
 8005a1c:	003b      	movs	r3, r7
 8005a1e:	f000 f8a7 	bl	8005b70 <_write_r>
 8005a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a24:	ffffefff 	.word	0xffffefff

08005a28 <__sseek>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	000c      	movs	r4, r1
 8005a2c:	250e      	movs	r5, #14
 8005a2e:	5f49      	ldrsh	r1, [r1, r5]
 8005a30:	f000 fa08 	bl	8005e44 <_lseek_r>
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	1c42      	adds	r2, r0, #1
 8005a38:	d103      	bne.n	8005a42 <__sseek+0x1a>
 8005a3a:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <__sseek+0x28>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	81a3      	strh	r3, [r4, #12]
 8005a40:	bd70      	pop	{r4, r5, r6, pc}
 8005a42:	2280      	movs	r2, #128	; 0x80
 8005a44:	0152      	lsls	r2, r2, #5
 8005a46:	4313      	orrs	r3, r2
 8005a48:	81a3      	strh	r3, [r4, #12]
 8005a4a:	6560      	str	r0, [r4, #84]	; 0x54
 8005a4c:	e7f8      	b.n	8005a40 <__sseek+0x18>
 8005a4e:	46c0      	nop			; (mov r8, r8)
 8005a50:	ffffefff 	.word	0xffffefff

08005a54 <__sclose>:
 8005a54:	b510      	push	{r4, lr}
 8005a56:	230e      	movs	r3, #14
 8005a58:	5ec9      	ldrsh	r1, [r1, r3]
 8005a5a:	f000 f995 	bl	8005d88 <_close_r>
 8005a5e:	bd10      	pop	{r4, pc}

08005a60 <strncmp>:
 8005a60:	2300      	movs	r3, #0
 8005a62:	b530      	push	{r4, r5, lr}
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d00a      	beq.n	8005a7e <strncmp+0x1e>
 8005a68:	3a01      	subs	r2, #1
 8005a6a:	5cc4      	ldrb	r4, [r0, r3]
 8005a6c:	5ccd      	ldrb	r5, [r1, r3]
 8005a6e:	42ac      	cmp	r4, r5
 8005a70:	d104      	bne.n	8005a7c <strncmp+0x1c>
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d002      	beq.n	8005a7c <strncmp+0x1c>
 8005a76:	3301      	adds	r3, #1
 8005a78:	2c00      	cmp	r4, #0
 8005a7a:	d1f6      	bne.n	8005a6a <strncmp+0xa>
 8005a7c:	1b63      	subs	r3, r4, r5
 8005a7e:	0018      	movs	r0, r3
 8005a80:	bd30      	pop	{r4, r5, pc}

08005a82 <strspn>:
 8005a82:	0003      	movs	r3, r0
 8005a84:	b530      	push	{r4, r5, lr}
 8005a86:	781c      	ldrb	r4, [r3, #0]
 8005a88:	2c00      	cmp	r4, #0
 8005a8a:	d007      	beq.n	8005a9c <strspn+0x1a>
 8005a8c:	000a      	movs	r2, r1
 8005a8e:	e002      	b.n	8005a96 <strspn+0x14>
 8005a90:	42ac      	cmp	r4, r5
 8005a92:	d005      	beq.n	8005aa0 <strspn+0x1e>
 8005a94:	3201      	adds	r2, #1
 8005a96:	7815      	ldrb	r5, [r2, #0]
 8005a98:	2d00      	cmp	r5, #0
 8005a9a:	d1f9      	bne.n	8005a90 <strspn+0xe>
 8005a9c:	1a18      	subs	r0, r3, r0
 8005a9e:	bd30      	pop	{r4, r5, pc}
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	e7f0      	b.n	8005a86 <strspn+0x4>

08005aa4 <__swbuf_r>:
 8005aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa6:	0005      	movs	r5, r0
 8005aa8:	000e      	movs	r6, r1
 8005aaa:	0014      	movs	r4, r2
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d004      	beq.n	8005aba <__swbuf_r+0x16>
 8005ab0:	6983      	ldr	r3, [r0, #24]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <__swbuf_r+0x16>
 8005ab6:	f7fe fed3 	bl	8004860 <__sinit>
 8005aba:	4b29      	ldr	r3, [pc, #164]	; (8005b60 <__swbuf_r+0xbc>)
 8005abc:	429c      	cmp	r4, r3
 8005abe:	d133      	bne.n	8005b28 <__swbuf_r+0x84>
 8005ac0:	686c      	ldr	r4, [r5, #4]
 8005ac2:	69a3      	ldr	r3, [r4, #24]
 8005ac4:	60a3      	str	r3, [r4, #8]
 8005ac6:	89a3      	ldrh	r3, [r4, #12]
 8005ac8:	071b      	lsls	r3, r3, #28
 8005aca:	d537      	bpl.n	8005b3c <__swbuf_r+0x98>
 8005acc:	6923      	ldr	r3, [r4, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d034      	beq.n	8005b3c <__swbuf_r+0x98>
 8005ad2:	230c      	movs	r3, #12
 8005ad4:	5ee2      	ldrsh	r2, [r4, r3]
 8005ad6:	2380      	movs	r3, #128	; 0x80
 8005ad8:	019b      	lsls	r3, r3, #6
 8005ada:	b2f7      	uxtb	r7, r6
 8005adc:	b2f6      	uxtb	r6, r6
 8005ade:	421a      	tst	r2, r3
 8005ae0:	d036      	beq.n	8005b50 <__swbuf_r+0xac>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	6922      	ldr	r2, [r4, #16]
 8005ae6:	1a98      	subs	r0, r3, r2
 8005ae8:	6963      	ldr	r3, [r4, #20]
 8005aea:	4298      	cmp	r0, r3
 8005aec:	db05      	blt.n	8005afa <__swbuf_r+0x56>
 8005aee:	0021      	movs	r1, r4
 8005af0:	0028      	movs	r0, r5
 8005af2:	f7fe fdff 	bl	80046f4 <_fflush_r>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d126      	bne.n	8005b48 <__swbuf_r+0xa4>
 8005afa:	68a3      	ldr	r3, [r4, #8]
 8005afc:	3001      	adds	r0, #1
 8005afe:	3b01      	subs	r3, #1
 8005b00:	60a3      	str	r3, [r4, #8]
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	6022      	str	r2, [r4, #0]
 8005b08:	701f      	strb	r7, [r3, #0]
 8005b0a:	6963      	ldr	r3, [r4, #20]
 8005b0c:	4298      	cmp	r0, r3
 8005b0e:	d004      	beq.n	8005b1a <__swbuf_r+0x76>
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	07db      	lsls	r3, r3, #31
 8005b14:	d51a      	bpl.n	8005b4c <__swbuf_r+0xa8>
 8005b16:	2e0a      	cmp	r6, #10
 8005b18:	d118      	bne.n	8005b4c <__swbuf_r+0xa8>
 8005b1a:	0021      	movs	r1, r4
 8005b1c:	0028      	movs	r0, r5
 8005b1e:	f7fe fde9 	bl	80046f4 <_fflush_r>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d012      	beq.n	8005b4c <__swbuf_r+0xa8>
 8005b26:	e00f      	b.n	8005b48 <__swbuf_r+0xa4>
 8005b28:	4b0e      	ldr	r3, [pc, #56]	; (8005b64 <__swbuf_r+0xc0>)
 8005b2a:	429c      	cmp	r4, r3
 8005b2c:	d101      	bne.n	8005b32 <__swbuf_r+0x8e>
 8005b2e:	68ac      	ldr	r4, [r5, #8]
 8005b30:	e7c7      	b.n	8005ac2 <__swbuf_r+0x1e>
 8005b32:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <__swbuf_r+0xc4>)
 8005b34:	429c      	cmp	r4, r3
 8005b36:	d1c4      	bne.n	8005ac2 <__swbuf_r+0x1e>
 8005b38:	68ec      	ldr	r4, [r5, #12]
 8005b3a:	e7c2      	b.n	8005ac2 <__swbuf_r+0x1e>
 8005b3c:	0021      	movs	r1, r4
 8005b3e:	0028      	movs	r0, r5
 8005b40:	f000 f82a 	bl	8005b98 <__swsetup_r>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d0c4      	beq.n	8005ad2 <__swbuf_r+0x2e>
 8005b48:	2601      	movs	r6, #1
 8005b4a:	4276      	negs	r6, r6
 8005b4c:	0030      	movs	r0, r6
 8005b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b50:	4313      	orrs	r3, r2
 8005b52:	81a3      	strh	r3, [r4, #12]
 8005b54:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <__swbuf_r+0xc8>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	6663      	str	r3, [r4, #100]	; 0x64
 8005b5c:	e7c1      	b.n	8005ae2 <__swbuf_r+0x3e>
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	080064bc 	.word	0x080064bc
 8005b64:	080064dc 	.word	0x080064dc
 8005b68:	0800649c 	.word	0x0800649c
 8005b6c:	ffffdfff 	.word	0xffffdfff

08005b70 <_write_r>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	0005      	movs	r5, r0
 8005b74:	0008      	movs	r0, r1
 8005b76:	0011      	movs	r1, r2
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4c06      	ldr	r4, [pc, #24]	; (8005b94 <_write_r+0x24>)
 8005b7c:	6022      	str	r2, [r4, #0]
 8005b7e:	001a      	movs	r2, r3
 8005b80:	f7fc fb4c 	bl	800221c <_write>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d103      	bne.n	8005b90 <_write_r+0x20>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d000      	beq.n	8005b90 <_write_r+0x20>
 8005b8e:	602b      	str	r3, [r5, #0]
 8005b90:	bd70      	pop	{r4, r5, r6, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	20000e08 	.word	0x20000e08

08005b98 <__swsetup_r>:
 8005b98:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <__swsetup_r+0xdc>)
 8005b9a:	b570      	push	{r4, r5, r6, lr}
 8005b9c:	681d      	ldr	r5, [r3, #0]
 8005b9e:	0006      	movs	r6, r0
 8005ba0:	000c      	movs	r4, r1
 8005ba2:	2d00      	cmp	r5, #0
 8005ba4:	d005      	beq.n	8005bb2 <__swsetup_r+0x1a>
 8005ba6:	69ab      	ldr	r3, [r5, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d102      	bne.n	8005bb2 <__swsetup_r+0x1a>
 8005bac:	0028      	movs	r0, r5
 8005bae:	f7fe fe57 	bl	8004860 <__sinit>
 8005bb2:	4b31      	ldr	r3, [pc, #196]	; (8005c78 <__swsetup_r+0xe0>)
 8005bb4:	429c      	cmp	r4, r3
 8005bb6:	d10f      	bne.n	8005bd8 <__swsetup_r+0x40>
 8005bb8:	686c      	ldr	r4, [r5, #4]
 8005bba:	230c      	movs	r3, #12
 8005bbc:	5ee2      	ldrsh	r2, [r4, r3]
 8005bbe:	b293      	uxth	r3, r2
 8005bc0:	0719      	lsls	r1, r3, #28
 8005bc2:	d42d      	bmi.n	8005c20 <__swsetup_r+0x88>
 8005bc4:	06d9      	lsls	r1, r3, #27
 8005bc6:	d411      	bmi.n	8005bec <__swsetup_r+0x54>
 8005bc8:	2309      	movs	r3, #9
 8005bca:	2001      	movs	r0, #1
 8005bcc:	6033      	str	r3, [r6, #0]
 8005bce:	3337      	adds	r3, #55	; 0x37
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	81a3      	strh	r3, [r4, #12]
 8005bd4:	4240      	negs	r0, r0
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}
 8005bd8:	4b28      	ldr	r3, [pc, #160]	; (8005c7c <__swsetup_r+0xe4>)
 8005bda:	429c      	cmp	r4, r3
 8005bdc:	d101      	bne.n	8005be2 <__swsetup_r+0x4a>
 8005bde:	68ac      	ldr	r4, [r5, #8]
 8005be0:	e7eb      	b.n	8005bba <__swsetup_r+0x22>
 8005be2:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <__swsetup_r+0xe8>)
 8005be4:	429c      	cmp	r4, r3
 8005be6:	d1e8      	bne.n	8005bba <__swsetup_r+0x22>
 8005be8:	68ec      	ldr	r4, [r5, #12]
 8005bea:	e7e6      	b.n	8005bba <__swsetup_r+0x22>
 8005bec:	075b      	lsls	r3, r3, #29
 8005bee:	d513      	bpl.n	8005c18 <__swsetup_r+0x80>
 8005bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bf2:	2900      	cmp	r1, #0
 8005bf4:	d008      	beq.n	8005c08 <__swsetup_r+0x70>
 8005bf6:	0023      	movs	r3, r4
 8005bf8:	3344      	adds	r3, #68	; 0x44
 8005bfa:	4299      	cmp	r1, r3
 8005bfc:	d002      	beq.n	8005c04 <__swsetup_r+0x6c>
 8005bfe:	0030      	movs	r0, r6
 8005c00:	f7fe ffa4 	bl	8004b4c <_free_r>
 8005c04:	2300      	movs	r3, #0
 8005c06:	6363      	str	r3, [r4, #52]	; 0x34
 8005c08:	2224      	movs	r2, #36	; 0x24
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	4393      	bics	r3, r2
 8005c0e:	81a3      	strh	r3, [r4, #12]
 8005c10:	2300      	movs	r3, #0
 8005c12:	6063      	str	r3, [r4, #4]
 8005c14:	6923      	ldr	r3, [r4, #16]
 8005c16:	6023      	str	r3, [r4, #0]
 8005c18:	2308      	movs	r3, #8
 8005c1a:	89a2      	ldrh	r2, [r4, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	6923      	ldr	r3, [r4, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10b      	bne.n	8005c3e <__swsetup_r+0xa6>
 8005c26:	21a0      	movs	r1, #160	; 0xa0
 8005c28:	2280      	movs	r2, #128	; 0x80
 8005c2a:	89a3      	ldrh	r3, [r4, #12]
 8005c2c:	0089      	lsls	r1, r1, #2
 8005c2e:	0092      	lsls	r2, r2, #2
 8005c30:	400b      	ands	r3, r1
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <__swsetup_r+0xa6>
 8005c36:	0021      	movs	r1, r4
 8005c38:	0030      	movs	r0, r6
 8005c3a:	f7ff fa65 	bl	8005108 <__smakebuf_r>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	89a2      	ldrh	r2, [r4, #12]
 8005c42:	4013      	ands	r3, r2
 8005c44:	d011      	beq.n	8005c6a <__swsetup_r+0xd2>
 8005c46:	2300      	movs	r3, #0
 8005c48:	60a3      	str	r3, [r4, #8]
 8005c4a:	6963      	ldr	r3, [r4, #20]
 8005c4c:	425b      	negs	r3, r3
 8005c4e:	61a3      	str	r3, [r4, #24]
 8005c50:	2000      	movs	r0, #0
 8005c52:	6923      	ldr	r3, [r4, #16]
 8005c54:	4283      	cmp	r3, r0
 8005c56:	d1be      	bne.n	8005bd6 <__swsetup_r+0x3e>
 8005c58:	230c      	movs	r3, #12
 8005c5a:	5ee2      	ldrsh	r2, [r4, r3]
 8005c5c:	0613      	lsls	r3, r2, #24
 8005c5e:	d5ba      	bpl.n	8005bd6 <__swsetup_r+0x3e>
 8005c60:	2340      	movs	r3, #64	; 0x40
 8005c62:	4313      	orrs	r3, r2
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	3801      	subs	r0, #1
 8005c68:	e7b5      	b.n	8005bd6 <__swsetup_r+0x3e>
 8005c6a:	0792      	lsls	r2, r2, #30
 8005c6c:	d400      	bmi.n	8005c70 <__swsetup_r+0xd8>
 8005c6e:	6963      	ldr	r3, [r4, #20]
 8005c70:	60a3      	str	r3, [r4, #8]
 8005c72:	e7ed      	b.n	8005c50 <__swsetup_r+0xb8>
 8005c74:	200001d0 	.word	0x200001d0
 8005c78:	080064bc 	.word	0x080064bc
 8005c7c:	080064dc 	.word	0x080064dc
 8005c80:	0800649c 	.word	0x0800649c

08005c84 <__call_exitprocs>:
 8005c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c86:	4b3d      	ldr	r3, [pc, #244]	; (8005d7c <__call_exitprocs+0xf8>)
 8005c88:	b087      	sub	sp, #28
 8005c8a:	9005      	str	r0, [sp, #20]
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	9103      	str	r1, [sp, #12]
 8005c90:	f7ff fa08 	bl	80050a4 <__retarget_lock_acquire_recursive>
 8005c94:	4b3a      	ldr	r3, [pc, #232]	; (8005d80 <__call_exitprocs+0xfc>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	9302      	str	r3, [sp, #8]
 8005c9a:	9b02      	ldr	r3, [sp, #8]
 8005c9c:	001f      	movs	r7, r3
 8005c9e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8005ca0:	3748      	adds	r7, #72	; 0x48
 8005ca2:	2c00      	cmp	r4, #0
 8005ca4:	d010      	beq.n	8005cc8 <__call_exitprocs+0x44>
 8005ca6:	0023      	movs	r3, r4
 8005ca8:	6865      	ldr	r5, [r4, #4]
 8005caa:	3388      	adds	r3, #136	; 0x88
 8005cac:	681e      	ldr	r6, [r3, #0]
 8005cae:	1e6b      	subs	r3, r5, #1
 8005cb0:	00ad      	lsls	r5, r5, #2
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	1963      	adds	r3, r4, r5
 8005cb6:	3d04      	subs	r5, #4
 8005cb8:	9301      	str	r3, [sp, #4]
 8005cba:	1975      	adds	r5, r6, r5
 8005cbc:	9b00      	ldr	r3, [sp, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	da08      	bge.n	8005cd4 <__call_exitprocs+0x50>
 8005cc2:	4b30      	ldr	r3, [pc, #192]	; (8005d84 <__call_exitprocs+0x100>)
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d145      	bne.n	8005d54 <__call_exitprocs+0xd0>
 8005cc8:	4b2c      	ldr	r3, [pc, #176]	; (8005d7c <__call_exitprocs+0xf8>)
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	f7ff f9eb 	bl	80050a6 <__retarget_lock_release_recursive>
 8005cd0:	b007      	add	sp, #28
 8005cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00f      	beq.n	8005cfa <__call_exitprocs+0x76>
 8005cda:	2e00      	cmp	r6, #0
 8005cdc:	d107      	bne.n	8005cee <__call_exitprocs+0x6a>
 8005cde:	9b00      	ldr	r3, [sp, #0]
 8005ce0:	3d04      	subs	r5, #4
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	9b01      	ldr	r3, [sp, #4]
 8005ce8:	3b04      	subs	r3, #4
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	e7e6      	b.n	8005cbc <__call_exitprocs+0x38>
 8005cee:	002b      	movs	r3, r5
 8005cf0:	3380      	adds	r3, #128	; 0x80
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	9a03      	ldr	r2, [sp, #12]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d1f1      	bne.n	8005cde <__call_exitprocs+0x5a>
 8005cfa:	6862      	ldr	r2, [r4, #4]
 8005cfc:	9b01      	ldr	r3, [sp, #4]
 8005cfe:	9900      	ldr	r1, [sp, #0]
 8005d00:	3a01      	subs	r2, #1
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	4291      	cmp	r1, r2
 8005d06:	d117      	bne.n	8005d38 <__call_exitprocs+0xb4>
 8005d08:	6061      	str	r1, [r4, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0e7      	beq.n	8005cde <__call_exitprocs+0x5a>
 8005d0e:	6862      	ldr	r2, [r4, #4]
 8005d10:	9204      	str	r2, [sp, #16]
 8005d12:	2e00      	cmp	r6, #0
 8005d14:	d007      	beq.n	8005d26 <__call_exitprocs+0xa2>
 8005d16:	2201      	movs	r2, #1
 8005d18:	9900      	ldr	r1, [sp, #0]
 8005d1a:	408a      	lsls	r2, r1
 8005d1c:	0031      	movs	r1, r6
 8005d1e:	31fc      	adds	r1, #252	; 0xfc
 8005d20:	6848      	ldr	r0, [r1, #4]
 8005d22:	4210      	tst	r0, r2
 8005d24:	d10c      	bne.n	8005d40 <__call_exitprocs+0xbc>
 8005d26:	4798      	blx	r3
 8005d28:	9b04      	ldr	r3, [sp, #16]
 8005d2a:	6862      	ldr	r2, [r4, #4]
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d1b4      	bne.n	8005c9a <__call_exitprocs+0x16>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	429c      	cmp	r4, r3
 8005d34:	d0d3      	beq.n	8005cde <__call_exitprocs+0x5a>
 8005d36:	e7b0      	b.n	8005c9a <__call_exitprocs+0x16>
 8005d38:	2200      	movs	r2, #0
 8005d3a:	9901      	ldr	r1, [sp, #4]
 8005d3c:	604a      	str	r2, [r1, #4]
 8005d3e:	e7e4      	b.n	8005d0a <__call_exitprocs+0x86>
 8005d40:	6889      	ldr	r1, [r1, #8]
 8005d42:	4211      	tst	r1, r2
 8005d44:	d103      	bne.n	8005d4e <__call_exitprocs+0xca>
 8005d46:	6829      	ldr	r1, [r5, #0]
 8005d48:	9805      	ldr	r0, [sp, #20]
 8005d4a:	4798      	blx	r3
 8005d4c:	e7ec      	b.n	8005d28 <__call_exitprocs+0xa4>
 8005d4e:	6828      	ldr	r0, [r5, #0]
 8005d50:	4798      	blx	r3
 8005d52:	e7e9      	b.n	8005d28 <__call_exitprocs+0xa4>
 8005d54:	6862      	ldr	r2, [r4, #4]
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	2a00      	cmp	r2, #0
 8005d5a:	d10c      	bne.n	8005d76 <__call_exitprocs+0xf2>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <__call_exitprocs+0xf2>
 8005d60:	603b      	str	r3, [r7, #0]
 8005d62:	2e00      	cmp	r6, #0
 8005d64:	d002      	beq.n	8005d6c <__call_exitprocs+0xe8>
 8005d66:	0030      	movs	r0, r6
 8005d68:	f7ff fa1c 	bl	80051a4 <free>
 8005d6c:	0020      	movs	r0, r4
 8005d6e:	f7ff fa19 	bl	80051a4 <free>
 8005d72:	683c      	ldr	r4, [r7, #0]
 8005d74:	e795      	b.n	8005ca2 <__call_exitprocs+0x1e>
 8005d76:	0027      	movs	r7, r4
 8005d78:	001c      	movs	r4, r3
 8005d7a:	e792      	b.n	8005ca2 <__call_exitprocs+0x1e>
 8005d7c:	200006d4 	.word	0x200006d4
 8005d80:	080064fc 	.word	0x080064fc
 8005d84:	080051a5 	.word	0x080051a5

08005d88 <_close_r>:
 8005d88:	2300      	movs	r3, #0
 8005d8a:	b570      	push	{r4, r5, r6, lr}
 8005d8c:	4c06      	ldr	r4, [pc, #24]	; (8005da8 <_close_r+0x20>)
 8005d8e:	0005      	movs	r5, r0
 8005d90:	0008      	movs	r0, r1
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	f7fc fa20 	bl	80021d8 <_close>
 8005d98:	1c43      	adds	r3, r0, #1
 8005d9a:	d103      	bne.n	8005da4 <_close_r+0x1c>
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d000      	beq.n	8005da4 <_close_r+0x1c>
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	bd70      	pop	{r4, r5, r6, pc}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	20000e08 	.word	0x20000e08

08005dac <__sflags>:
 8005dac:	780b      	ldrb	r3, [r1, #0]
 8005dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005db0:	2b72      	cmp	r3, #114	; 0x72
 8005db2:	d019      	beq.n	8005de8 <__sflags+0x3c>
 8005db4:	2b77      	cmp	r3, #119	; 0x77
 8005db6:	d007      	beq.n	8005dc8 <__sflags+0x1c>
 8005db8:	2b61      	cmp	r3, #97	; 0x61
 8005dba:	d119      	bne.n	8005df0 <__sflags+0x44>
 8005dbc:	2482      	movs	r4, #130	; 0x82
 8005dbe:	2084      	movs	r0, #132	; 0x84
 8005dc0:	00a4      	lsls	r4, r4, #2
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	0040      	lsls	r0, r0, #1
 8005dc6:	e003      	b.n	8005dd0 <__sflags+0x24>
 8005dc8:	24c0      	movs	r4, #192	; 0xc0
 8005dca:	2301      	movs	r3, #1
 8005dcc:	2008      	movs	r0, #8
 8005dce:	00e4      	lsls	r4, r4, #3
 8005dd0:	2510      	movs	r5, #16
 8005dd2:	2680      	movs	r6, #128	; 0x80
 8005dd4:	271c      	movs	r7, #28
 8005dd6:	46ac      	mov	ip, r5
 8005dd8:	0136      	lsls	r6, r6, #4
 8005dda:	3101      	adds	r1, #1
 8005ddc:	780d      	ldrb	r5, [r1, #0]
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	d10a      	bne.n	8005df8 <__sflags+0x4c>
 8005de2:	4323      	orrs	r3, r4
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	e006      	b.n	8005df6 <__sflags+0x4a>
 8005de8:	2400      	movs	r4, #0
 8005dea:	2004      	movs	r0, #4
 8005dec:	0023      	movs	r3, r4
 8005dee:	e7ef      	b.n	8005dd0 <__sflags+0x24>
 8005df0:	2316      	movs	r3, #22
 8005df2:	6003      	str	r3, [r0, #0]
 8005df4:	2000      	movs	r0, #0
 8005df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df8:	2d62      	cmp	r5, #98	; 0x62
 8005dfa:	d00b      	beq.n	8005e14 <__sflags+0x68>
 8005dfc:	2d78      	cmp	r5, #120	; 0x78
 8005dfe:	d00c      	beq.n	8005e1a <__sflags+0x6e>
 8005e00:	2d2b      	cmp	r5, #43	; 0x2b
 8005e02:	d1ea      	bne.n	8005dda <__sflags+0x2e>
 8005e04:	4665      	mov	r5, ip
 8005e06:	43b8      	bics	r0, r7
 8005e08:	4328      	orrs	r0, r5
 8005e0a:	2503      	movs	r5, #3
 8005e0c:	43ab      	bics	r3, r5
 8005e0e:	3d01      	subs	r5, #1
 8005e10:	432b      	orrs	r3, r5
 8005e12:	e7e2      	b.n	8005dda <__sflags+0x2e>
 8005e14:	2580      	movs	r5, #128	; 0x80
 8005e16:	026d      	lsls	r5, r5, #9
 8005e18:	e7fa      	b.n	8005e10 <__sflags+0x64>
 8005e1a:	4333      	orrs	r3, r6
 8005e1c:	e7dd      	b.n	8005dda <__sflags+0x2e>
	...

08005e20 <_isatty_r>:
 8005e20:	2300      	movs	r3, #0
 8005e22:	b570      	push	{r4, r5, r6, lr}
 8005e24:	4c06      	ldr	r4, [pc, #24]	; (8005e40 <_isatty_r+0x20>)
 8005e26:	0005      	movs	r5, r0
 8005e28:	0008      	movs	r0, r1
 8005e2a:	6023      	str	r3, [r4, #0]
 8005e2c:	f7fc faea 	bl	8002404 <_isatty>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d103      	bne.n	8005e3c <_isatty_r+0x1c>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d000      	beq.n	8005e3c <_isatty_r+0x1c>
 8005e3a:	602b      	str	r3, [r5, #0]
 8005e3c:	bd70      	pop	{r4, r5, r6, pc}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	20000e08 	.word	0x20000e08

08005e44 <_lseek_r>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	0005      	movs	r5, r0
 8005e48:	0008      	movs	r0, r1
 8005e4a:	0011      	movs	r1, r2
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	4c06      	ldr	r4, [pc, #24]	; (8005e68 <_lseek_r+0x24>)
 8005e50:	6022      	str	r2, [r4, #0]
 8005e52:	001a      	movs	r2, r3
 8005e54:	f7fc faf8 	bl	8002448 <_lseek>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d103      	bne.n	8005e64 <_lseek_r+0x20>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d000      	beq.n	8005e64 <_lseek_r+0x20>
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	bd70      	pop	{r4, r5, r6, pc}
 8005e66:	46c0      	nop			; (mov r8, r8)
 8005e68:	20000e08 	.word	0x20000e08

08005e6c <_read_r>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	0005      	movs	r5, r0
 8005e70:	0008      	movs	r0, r1
 8005e72:	0011      	movs	r1, r2
 8005e74:	2200      	movs	r2, #0
 8005e76:	4c06      	ldr	r4, [pc, #24]	; (8005e90 <_read_r+0x24>)
 8005e78:	6022      	str	r2, [r4, #0]
 8005e7a:	001a      	movs	r2, r3
 8005e7c:	f7fc fa5a 	bl	8002334 <_read>
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	d103      	bne.n	8005e8c <_read_r+0x20>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d000      	beq.n	8005e8c <_read_r+0x20>
 8005e8a:	602b      	str	r3, [r5, #0]
 8005e8c:	bd70      	pop	{r4, r5, r6, pc}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	20000e08 	.word	0x20000e08

08005e94 <__EH_FRAME_BEGIN__>:
 8005e94:	00000000                                ....

08005e98 <_init>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr

08005ea4 <_fini>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eaa:	bc08      	pop	{r3}
 8005eac:	469e      	mov	lr, r3
 8005eae:	4770      	bx	lr

08005eb0 <_ZTVN4mbed8AnalogInE>:
	...
 8005eb8:	07b9 0800 0801 0800 07bd 0800 07d5 0800     ................

08005ec8 <_ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops>:
 8005ec8:	07ed 0800 07f5 0800 07ff 0800               ............

08005ed4 <_ZTVN4mbed6SerialE>:
	...
 8005edc:	0c9f 0800 0cb1 0800 0835 0800 0b75 0800     ........5...u...
 8005eec:	0cc5 0800 0cdd 0800 ff44 ffff 0000 0000     ........D.......
 8005efc:	0861 0800 0ba5 0800 1af7 0800 1ab5 0800     a...............
 8005f0c:	1b29 0800 1ab1 0800 1b37 0800 1b33 0800     ).......7...3...
 8005f1c:	1b2d 0800 1b31 0800 1b3b 0800 0c69 0800     -...1...;...i...
 8005f2c:	0c73 0800 0c7d 0800 0c87 0800 0c95 0800     s...}...........
 8005f3c:	0c99 0800 0c9d 0800 0ce5 0800 0ccd 0800     ................
 8005f4c:	0ca1 0800 0cb5 0800 ff40 ffff 0000 0000     ........@.......
 8005f5c:	0871 0800 0bb5 0800                         q.......

08005f64 <_ZTVN4mbed10SerialBaseE>:
	...
 8005f6c:	0d45 0800 0d47 0800 0f61 0800 0fe1 0800     E...G...a.......

08005f7c <_ZTVN4mbed6TickerE>:
	...
 8005f84:	080d 0800 0aa1 0800 100b 0800               ............

08005f90 <_ZTVN4mbed10TimerEventE>:
	...
 8005fa0:	2497 0800                                   .$..

08005fa4 <us_data>:
 8005fa4:	5fac 0800 09f0 2000                         ._..... 

08005fac <us_interface>:
 8005fac:	4421 0800 4435 0800 447d 0800 4491 0800     !D..5D..}D...D..
 8005fbc:	4441 0800 445d 0800 4331 0800               AD..]D..1C..

08005fc8 <_ZTVN4mbed8FileBaseE>:
	...
 8005fd0:	1939 0800 19a5 0800                         9.......

08005fd8 <_ZTVN4mbed10FileHandleE>:
	...
 8005fe8:	2497 0800 2497 0800 2497 0800 2497 0800     .$...$...$...$..
 8005ff8:	19b7 0800 19bb 0800 1145 0800 1153 0800     ........E...S...
 8006008:	19bf 0800 0c69 0800 0c73 0800 0c7d 0800     ....i...s...}...
 8006018:	0c87 0800 0c95 0800 0c99 0800 0c9d 0800     ................
 8006028:	002f 0000                                   /...

0800602c <_ZTVN4mbed8FileLikeE>:
	...
 800603c:	2497 0800 2497 0800 2497 0800 2497 0800     .$...$...$...$..
 800604c:	19b7 0800 19bb 0800 1145 0800 1153 0800     ........E...S...
 800605c:	19bf 0800 0c69 0800 0c73 0800 0c7d 0800     ....i...s...}...
 800606c:	0c87 0800 0c95 0800 0c99 0800 0c9d 0800     ................
 800607c:	fffc ffff 0000 0000 0000 0000 0000 0000     ................
 800608c:	2b77 0000                                   w+..

08006090 <_ZTVN4mbed6StreamE>:
	...
 80060a0:	1af7 0800 1ab5 0800 1b29 0800 1ab1 0800     ........).......
 80060b0:	1b37 0800 1b33 0800 1b2d 0800 1b31 0800     7...3...-...1...
 80060c0:	1b3b 0800 0c69 0800 0c73 0800 0c7d 0800     ;...i...s...}...
 80060d0:	0c87 0800 0c95 0800 0c99 0800 0c9d 0800     ................
 80060e0:	2497 0800 2497 0800 1aad 0800 1aaf 0800     .$...$..........
 80060f0:	fffc ffff 0000 0000 0000 0000 0000 0000     ................

08006100 <_ZTV12DirectSerial>:
	...
 8006108:	1de5 0800 25b9 0800 1e09 0800 1de9 0800     .....%..........
 8006118:	1dcd 0800 1ddd 0800 19b7 0800 1dd9 0800     ................
 8006128:	1145 0800 1153 0800 1dd3 0800 0c69 0800     E...S.......i...
 8006138:	0c73 0800 0c7d 0800 0c87 0800 0c95 0800     s...}...........
 8006148:	1e25 0800 0c9d 0800                         %.......

08006150 <__stderr_name>:
 8006150:	732f 6474 7265 0072                         /stderr.

08006158 <__stdin_name>:
 8006158:	732f 6474 6e69 0000                         /stdin..

08006160 <__stdout_name>:
 8006160:	732f 6474 756f 0074 000d 0000               /stdout.....

0800616c <PinMap_ADC>:
 800616c:	0000 0000 2400 4001 0003 0000 0001 0000     .....$.@........
 800617c:	2400 4001 1003 0000 0004 0000 2400 4001     .$.@.........$.@
 800618c:	4003 0000 0005 0000 2400 4001 5003 0000     .@.......$.@.P..
 800619c:	0006 0000 2400 4001 6003 0000 0007 0000     .....$.@.`......
 80061ac:	2400 4001 7003 0000 0010 0000 2400 4001     .$.@.p.......$.@
 80061bc:	8003 0000 0011 0000 2400 4001 9003 0000     .........$.@....
 80061cc:	0020 0000 2400 4001 a003 0000 0021 0000      ....$.@....!...
 80061dc:	2400 4001 b003 0000 0022 0000 2400 4001     .$.@...."....$.@
 80061ec:	c003 0000 0023 0000 2400 4001 d003 0000     ....#....$.@....
 80061fc:	0024 0000 2400 4001 e003 0000 0025 0000     $....$.@....%...
 800620c:	2400 4001 f003 0000 ffff 0000 ffff ffff     .$.@............
 800621c:	0000 0000                                   ....

08006220 <PinMap_ADC_Internal>:
 8006220:	00f0 0000 2400 4001 0003 0001 00f1 0000     .....$.@........
 8006230:	2400 4001 1003 0001 ffff 0000 ffff ffff     .$.@............
 8006240:	0000 0000                                   ....

08006244 <PinMap_UART_RX>:
 8006244:	0001 0000 4c00 4000 0412 0000 0003 0000     .....L.@........
 8006254:	4400 4000 0112 0000 000a 0000 3800 4001     .D.@.........8.@
 8006264:	0112 0000 000f 0000 4400 4000 0112 0000     .........D.@....
 8006274:	0017 0000 3800 4001 0012 0000 001b 0000     .....8.@........
 8006284:	4800 4000 0412 0000 0025 0000 4800 4000     .H.@....%....H.@
 8006294:	0112 0000 002b 0000 4800 4000 0112 0000     ....+....H.@....
 80062a4:	012b 0000 4c00 4000 0012 0000 ffff 0000     +....L.@........
 80062b4:	ffff ffff 0000 0000                         ........

080062bc <PinMap_UART_TX>:
 80062bc:	0000 0000 4c00 4000 0412 0000 0002 0000     .....L.@........
 80062cc:	4400 4000 0112 0000 0009 0000 3800 4001     .D.@.........8.@
 80062dc:	0112 0000 000e 0000 4400 4000 0112 0000     .........D.@....
 80062ec:	0016 0000 3800 4001 0012 0000 001a 0000     .....8.@........
 80062fc:	4800 4000 0412 0000 0024 0000 4800 4000     .H.@....$....H.@
 800630c:	0112 0000 002a 0000 4800 4000 0112 0000     ....*....H.@....
 800631c:	012a 0000 4c00 4000 0012 0000 ffff 0000     *....L.@........
 800632c:	ffff ffff 0000 0000 6553 5374 7379 6c43     ........SetSysCl
 800633c:	636f 206b 6166 6c69 6465 000a 2912 0800     ock failed...)..
 800634c:	290e 0800 2938 0800 293e 0800 2944 0800     .)..8)..>)..D)..
 800635c:	294a 0800 2950 0800 2956 0800 295c 0800     J)..P)..V)..\)..
 800636c:	2962 0800 2968 0800 296e 0800 2974 0800     b)..h)..n)..t)..
 800637c:	297a 0800 2980 0800 2986 0800 298c 0800     z)...)...)...)..
 800638c:	2996 0800 6143 6e6e 746f 6920 696e 6974     .)..Cannot initi
 800639c:	6c61 7a69 2065 4441 0043 0000 0302 0504     alize ADC.......
 80063ac:	0706 0908 0b0a 0d0c 0f0e 1010 0201 0403     ................
 80063bc:	0605 0807 0a09 0c0b 0e0d 100f               ............

080063c8 <AHBPrescTable>:
	...
 80063d0:	0201 0403 0706 0908                         ........

080063d8 <APBPrescTable>:
 80063d8:	0000 0000 0201 0403 3d2c 0800 3d48 0800     ........,=..H=..
 80063e8:	3d60 0800 3d78 0800 3da8 0800 3d90 0800     `=..x=...=...=..
 80063f8:	6950 6d6e 7061 6520 7272 726f 203a 7277     Pinmap error: wr
 8006408:	6e6f 2067 6f70 7472 6e20 6d75 6562 2e72     ong port number.
 8006418:	0000 0000                                   ....

0800641c <ll_pin_defines>:
 800641c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
 800642c:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
 800643c:	0100 0000 0200 0000 0400 0000 0800 0000     ................
 800644c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
 800645c:	7245 6f72 3a72 6e20 7765 7320 7265 6169     Error: new seria
 800646c:	206c 626f 656a 7463 6920 2073 7375 6e69     l object is usin
 800647c:	2067 6173 656d 5520 5241 2054 7361 5320     g same UART as S
 800648c:	4454 4f49 0000 0000                         TDIO....

08006494 <info.9237>:
 8006494:	4240 000f 0010 0000                         @B......

0800649c <__sf_fake_stderr>:
	...

080064bc <__sf_fake_stdin>:
	...

080064dc <__sf_fake_stdout>:
	...

080064fc <_global_impure_ptr>:
 80064fc:	01d4 2000 0584 0800 04d4 0800 04d4 0800     ... ............
 800650c:	04d2 0800 0576 0800 0576 0800 056c 0800     ....v...v...l...
 800651c:	04d2 0800 0576 0800 056c 0800 0576 0800     ....v...l...v...
 800652c:	04d2 0800 057c 0800 057c 0800 057c 0800     ....|...|...|...
 800653c:	060c 0800                                   ....
